{"version":3,"sources":["state.js","settings.js","formHelpers.js","SensorForms.js","TriggerForms.js","ActionForms.js","Basics.js","DetailView.js","events.js","ListView.js","Chart.js","AppView.js","Sensor.js","Trigger.js","Action.js","index.js"],"names":["stateManager","eventManager","itemLabel","eventHandlerItemPrefix","fetchUrlPath","this","stateKey","globalState","setGlobalState","subscribe","event","message","id","data","newIdx","filtered","items","filter","item","index","setItems","length","setState","active","name","updateItem","setActiveState","lastUpdateEvent","Date","now","state","idx","findIndex","obj","last_reading","reading","newState","newGlobalState","newActiveState","activeState","updateItems","find","url","fetch","then","res","json","setItem","catch","method","console","log","JSON","stringify","body","onChangeHandler","e","preventDefault","target","nativeEvent","value","dataset","factor","FormGroupSelect","props","className","label","placeholder","onChange","disabled","children","FormGroup","type","list","data-factor","suffix","ApplyCreateCloseButtons","handleClose","editMode","onClick","makeSubmitHandler","initialState","setActive","path","urlPrefix","AddRowButton","InputRow","handleRemove","handleChange","sensorManager","useState","numberUpdating","setNumberUpdating","time","lastReading","setLastReading","incrementNumberUpdating","inc","n","updateChannelList","row","useEffect","key","map","channel","Object","keys","variable","ActionIDsFrom","actions","setActions","actionManager","action","i","newActions","idxOption","emptyInputRow","retain_for","expression","variables","action_ids","expressionMessage","expressionError","InputRows","setVariables","newInputRow","newRow","slice","randomChar","string","charAt","Math","floor","random","vowels","consonants","result","randomReadableString","_","newVariables","ListItemSelect","style","cursor","width","iconLeft","iconRight","ListItemCollapse","show","setShow","borderBottom","transform","truncate","str","toString","minuteStr","x","round","converters","Proxy","elapsed","toLocaleString","percentage","seconds","href","decodeURIComponent","rel","interval","cooldown","broken","last_notify","moment","fromNow","queued_messages","get","ignoreList","labelConversion","listItemsLastReading","AttributeRow","Button","showSpinner","YouSureButton","sureClass","showDialog","setShowDialog","setTimeout","Buttons","updating","setUpdating","copying","setCopying","refreshItem","last_update","addItem","copy","deleteItem","DetailView","FormView","setFormState","formState","attributes","statefulConverters","sensorName","s","entries","entry","includes","attributeRows","subscriptions","listen","push","indexOf","forEach","eventHandler","that","EventSource","onmessage","parse","handleEvent","error","BadgeMessage","badge","child","color","Item","flash","setFlash","ListView","toLowerCase","some","React","memo","options","responsive","hoverMode","stacked","title","display","text","scales","yAxes","position","gridLines","drawOnChartArea","xAxes","plugins","zoom","pan","enabled","drag","mode","speed","threshold","chartExists","chart","Chart","Line","chartRef","current","labels","datasets","borderColor","backgroundColor","fill","hidden","ondblclick","resetZoom","makeChart","createRef","ref","Sidebar","ContentView","events","itemInfo","manager","form","handleSubmit","stateProps","onSubmit","borderRight","moreInfo","activeDetailView","setActiveDetailView","window","open","document","write","content","evaluateExpression","App","_setState","initializeGlobalState","MoreInfoView","icons","makeTabs","sensors","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6179a539.chunk.js","sourcesContent":["import {urlPrefix} from \"./settings\";\n\n// the state manager itself is stateless. All its state is stored in the \"globalState\" of the root ract component\nexport class stateManager {\n    constructor({eventManager,\n                 itemLabel=\"Item\",\n                 eventHandlerItemPrefix = \"item\",\n                 fetchUrlPath=\"/items\"}) {\n\n        // Is this state manager for a Sensor, Trigger or otherwise?\n        this.itemLabel = itemLabel\n        this.stateKey = itemLabel + \"State\"\n        this.eventHandlerItemPrefix = eventHandlerItemPrefix\n        this.fetchUrlPath = fetchUrlPath\n\n        // dummy state\n        this.globalState = {}\n        this.setGlobalState = ({}) => {}\n\n        // listen to incoming events. The eventManager will call the \"eventHandler\" function\n        this.eventManager = eventManager\n        eventManager.subscribe(this)\n    }\n\n    initializeGlobalState(globalState, setGlobalState) {\n        this.globalState = globalState\n        this.setGlobalState = setGlobalState\n    }\n\n    eventHandler(event) {\n        if (event.message === this.eventHandlerItemPrefix + \" deleted\") {\n            // remove item from list\n            let id = event.data.id\n            let newIdx = 0\n            let filtered = this.items().filter((item, index) => {\n                if (item.id === id) {\n                    newIdx = index\n                }\n                return item.id !== id;\n            });\n\n            // delete item\n            this.setItems(filtered)\n\n            // focus on new item\n            if (this.items().length > 0) {\n                newIdx = this.items().length <= newIdx ? newIdx - 1 : newIdx\n                this.setState( {\n                    active: this.items()[newIdx].id\n                } )\n            }\n\n        } if (event.message === this.eventHandlerItemPrefix + \" added\") {\n            this.item(event.data.id).name == null && this.setItems([\n                ...this.items(),\n                event.data\n            ])\n\n        } if (event.message === this.eventHandlerItemPrefix + \" edited\") {\n            // update the relevant item\n            this.updateItem(event.data.id)\n\n        } if (event.message === this.eventHandlerItemPrefix + \" updated\") {\n            let id = event.data.id\n            // set last update time\n            this.setActiveState({lastUpdateEvent: Date.now() / 1000}, id)\n            if (this.state().active === id) {\n                // update item if currently visible\n                this.updateItem(id)\n            } else {\n                // remove outdated reading if not visible\n                let items = this.items()\n                let idx = items.findIndex(obj => obj.id === id)\n                if (items[idx].last_reading) {\n                    items[idx].last_reading = null\n                }\n                event.data.reading != null && (items[idx].last_reading = event.data.reading)\n                this.setItems(items)\n            }\n        }\n    }\n\n    state() {\n        // initialize other state\n        if (this.globalState[this.stateKey] == null) {\n            this.globalState[this.stateKey] = {}\n        }\n        return this.globalState[this.stateKey]\n    }\n\n    setState(newState) {\n        let state = this.state()\n        let newGlobalState = {}\n        newGlobalState[this.stateKey] = {...state, ...newState}\n        this.setGlobalState(newGlobalState)\n    }\n\n    activeState(id=this.state().active) {\n        // state of currently active item\n        if (id == null) return {}\n        // initialize\n        if (this.globalState[id] == null) {\n            this.globalState[id] = {}\n            return {}\n        }\n        return this.globalState[id]\n    }\n\n    setActiveState(newActiveState, id=this.state().active) {\n        if (id == null) return\n\n        let newState = {}\n        newState[id] = {...this.activeState(id), ...newActiveState}\n        this.setGlobalState(newState)\n    }\n\n    items() {\n        // initialize list of sensors or triggers, ect\n        if (this.globalState[this.itemLabel] == null) {\n            this.globalState[this.itemLabel] = []\n            this.updateItems()\n            return []\n        }\n        return this.globalState[this.itemLabel]\n    }\n\n    setItems(items) {\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.setGlobalState(newState)\n    }\n\n    item(id=this.state().active){\n        let item = this.items().find(obj => {\n            return obj.id === id\n        })\n        // item not found\n        if (item == null) {\n            item = {}\n        }\n        return item\n    }\n\n    setItem(item) {\n        let items = this.items()\n        let idx = items.findIndex(obj => obj.id === item.id)\n        items[idx] = item\n        this.setItems(items)\n    }\n\n    updateItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem(data)\n            })\n    }\n\n    updateItems() {\n        let url = urlPrefix + this.fetchUrlPath\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                this.setItems(res)\n                if (this.state().active === \"\" && this.items().length > 0) this.setState({\n                    active: \"id\" in this.items()[0] ? this.items()[0].id : \"form\"\n                })\n            })\n            .catch(() => {\n                this.state().active === \"\" && this.setState({\n                    active: \"form\"\n                })\n            })\n    }\n\n    refreshItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}/update`\n        return fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem({\n                    ...this.item(),\n                    last_reading: data\n                })\n            })\n    }\n\n    deleteItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`;\n        return fetch(url, {\n            method: 'DELETE',\n            data: {}\n        });\n    }\n\n    addItem(data) {\n        let url = urlPrefix + this.fetchUrlPath;\n        console.log(JSON.stringify(data))\n        return fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    }\n\n}","// dev\n//export let urlPrefix = \"http://127.0.0.1:5000\";\n\n// build\nexport let urlPrefix = \".\";","import React from \"react\";\nimport {urlPrefix} from \"./settings\";\n\nexport const daysToSeconds = 24 * 60 * 60\n\nexport function onChangeHandler(state, setState) {\n    return function onChange(e) {\n        e.preventDefault()\n        let target = e.nativeEvent.target\n        let newState = {...state}\n        let value = target.value\n        if (target.dataset.factor && value != null) {\n            value *= target.dataset.factor\n        }\n        newState[target.name] = value\n        setState(newState)\n    }\n}\n\nexport function FormGroupSelect(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <select\n                    className=\"form-control\"\n                    placeholder={props.placeholder || \"\"}\n                    onChange={props.onChange}\n                    value={props.value}\n                    name={props.name}\n                    disabled={props.disabled}\n                >\n                    {props.children}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport function FormGroup(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <input type={props.type || \"text\"}\n                       className=\"form-control\"\n                       placeholder={props.placeholder || \"\"}\n                       onChange={onChangeHandler(props.state, props.setState)}\n                       value={\n                           props.factor != null ?\n                               props.state[props.name] / props.factor :\n                               props.state[props.name]\n                       }\n                       list={props.list || \"\"}\n                       name={props.name}\n                       disabled={props.disabled}\n                       data-factor={props.factor}\n                />\n                {\"suffix\" in props ? (\n                    <div className=\"input-group-append\">\n                        <span className=\"input-group-text\">{props.suffix}</span>\n                    </div>\n                ) : \"\"}\n            </div>\n        </div>\n    )\n}\n\n\nexport function ApplyCreateCloseButtons({handleClose=()=>{}, editMode=false, label=\"\"}) {\n    return (\n        <div className={\"col-12\"}>\n            <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                {editMode ? \"Apply\" : `Create ${label}`}\n            </button>\n            {editMode ?\n            <button type={\"button\"} className={\"btn btn-secondary mt-2 ml-2 px-4\"} onClick={handleClose}>\n                Cancel\n            </button>\n            : \"\"}\n        </div>\n    )\n}\n\n\nexport function makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, path) {\n\n    return function handleSubmit(event) {\n        event.preventDefault()\n\n        if (editMode) {\n            // edit sensor\n            fetch(urlPrefix + \"/\" + path + \"/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(state)\n            })\n        } else {\n            // new sensor\n            fetch(urlPrefix + \"/\" + path, {\n                method: \"post\",\n                body: JSON.stringify(state)\n            })\n                .then(res => {\n                    setState(initialState)\n                    return res.json()\n                })\n                .then(data => {\n                    setActive(data.id)\n                })\n        }\n\n        handleClose()\n    }\n}\n\n\nexport function randomReadableString(length=5) {\n    function randomChar(string) {\n        return string.charAt(Math.floor(Math.random() * string.length))\n    }\n    let vowels = 'aeoui'\n    let consonants = 'qwrtzipsdfghjklyxcvbnm'\n    let result = ''\n    for (let i = 0; i < length; i++) {\n        result += i % 2 === 0 ? randomChar(consonants) : randomChar(vowels)\n    }\n    return result\n}","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    FormGroupSelect,\n    makeSubmitHandler,\n    onChangeHandler\n} from \"./formHelpers\";\nimport {stateManager} from \"./state\";\n\nconst initialState = {\n    \"type\": \"HTML\",\n    \"interval\": 5 * 60,\n    \"name\": \"\",\n    \"url\": \"\",\n    \"retain_for\": 90 * daysToSeconds};\n\nexport function SensorFrom({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=(active)=>{}, ...props}) {\n\n    const handleSubmit = makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, \"sensors\")\n\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FormGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={onChangeHandler(state, setState)}\n                    disabled={editMode}\n                >\n                    <option value={\"HTML\"}>HTML - Grabs HTTP response from a URL</option>\n                    <option value={\"CPUPercentage\"}>CPUPercentage - Host system CPU usage</option>\n                    <option value={\"RAMPercentage\"}>RAMPercentage - Host system memory usage</option>\n                    <option value={\"Uptime\"}>Uptime - Host system uptime</option>\n                </FormGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FormGroup {...stateProps} label={\"Name:\"} name={\"name\"}/>\n                <FormGroup\n                    {...stateProps}\n                    label={\"Update interval:\"}\n                    name={\"interval\"} type={\"number\"}\n                    suffix={\"minutes\"}\n                    factor={60}\n                />\n                <FormGroup\n                    {...stateProps}\n                    label={\"Retain for:\"}\n                    name={\"retain_for\"}\n                    type={\"number\"}\n                    suffix={\"days\"}\n                    factor={daysToSeconds}/>\n\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"HTML\" ? (\n                    <FormGroup label={\"Target URL:\"} name={\"url\"} {...stateProps}/>\n                ) : \"\" }\n            </div>\n\n            <ApplyCreateCloseButtons handleClose={handleClose} editMode={editMode} label={\"Sensor\"}/>\n        </form>\n    )\n}\n\n\n","import React, {useEffect, useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    makeSubmitHandler,\n    randomReadableString\n} from \"./formHelpers\";\n\nfunction AddRowButton({onClick}) {\n    return (\n        <button type=\"button\" className={\"btn btn-sm btn-light\"} onClick={(e) => {\n            e.preventDefault()\n            if (onClick == null) return\n            onClick()\n        }}>\n            <span className={\"fa fa-plus\"} />\n        </button>\n    )\n}\n\n\nfunction InputRow({handleRemove, state, handleChange, sensorManager}) {\n    let [numberUpdating, setNumberUpdating] = useState(0)\n    let [lastReading, setLastReading] = useState({time: 0})\n\n    function incrementNumberUpdating(inc=1) {\n        setNumberUpdating(n => {\n            return n + inc\n        });\n    }\n\n    function updateChannelList(id, row=state.row) {\n        let url = `${urlPrefix}/query/${id}?row=${row}`\n        incrementNumberUpdating()\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                if (res[0] != null) setLastReading(res[0])\n                else setLastReading({})\n                incrementNumberUpdating(-1)\n            })\n            .catch(() => {\n                incrementNumberUpdating(-1)\n                setLastReading({})\n            })\n    }\n\n    function onClickRemove(e) {\n        e.preventDefault()\n        handleRemove()\n    }\n\n    function onClickRefresh(e) {\n        e.preventDefault()\n        updateChannelList(state.id)\n    }\n\n    function onChange(event) {\n        event.preventDefault()\n        let newState = {...state};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        handleChange(newState)\n        if (event.nativeEvent.target.name === \"id\") {\n            updateChannelList(event.nativeEvent.target.value)\n        }\n        if (event.nativeEvent.target.name === \"row\") {\n            updateChannelList(state.id, event.nativeEvent.target.value)\n        }\n    }\n\n    useEffect(() => {\n        state.id && updateChannelList(state.id)\n    }, [state.id]);\n\n    return ([\n        <div key={\"remove-button\"}>\n            <button type=\"button\" className={\"btn btn-sm btn-light\"} onClick={onClickRemove}>\n                <span className={\"fa fa-minus\"} />\n            </button>\n        </div>,\n        <div key={\"sensor\"}>\n            <select\n                   className=\"form-control form-control-sm mr-2\"\n                   placeholder=\"Sensor\"\n                   name={\"id\"}\n                   value={ state.id }\n                   onChange={onChange}>\n                <option value=\"\"/>\n                { sensorManager.items().map(item => {\n                    return <option key={item.id} value={item.id}>{item.name}</option>\n                }) }\n            </select>\n        </div>,\n        <div key={\"channel\"}>\n            <select\n                   className=\"form-control form-control-sm mr-2\"\n                   placeholder=\"Channel\"\n                   name={\"channel\"}\n                   value={ state.channel }\n                   onChange={onChange}>\n                { Object.keys(lastReading).map(item => {\n                    return <option key={item} value={item}>{item}</option>\n                }) }\n            </select>\n        </div>,\n        <div key={\"index\"}>\n            <input type=\"number\"\n                   className=\"form-control form-control-sm mr-2\"\n                   placeholder=\"-1\"\n                   name={\"row\"}\n                   value={ state.row }\n                   onChange={onChange}/>\n        </div>,\n        <div key={\"placeholder\"}/>,\n        <div key={\"variable\"}>\n            <input type=\"text\"\n                   className=\"form-control form-control-sm\"\n                   placeholder=\"Variable name (can be used in Expression)\"\n                   name={\"variable\"}\n                   value={ state.variable }\n                   onChange={onChange}/>\n        </div>,\n        <div key={\"current-value\"}>\n            <div className=\"form-control form-control-sm bg-light text-truncate text-nowrap text-monospace\">\n                { lastReading[state.channel] }\n            </div>\n        </div>,\n        <div key={\"update-button\"} className={\"mb-2\"}>\n            <button type=\"button\" className={\"btn btn-sm btn-light w-100\"} onClick={onClickRefresh}>\n                {numberUpdating > 0 ?\n                    <i className={\"spinner-border spinner-border-sm\"}/> :\n                    <i className={\"fa fa-sync\"}/>}\n            </button>\n        </div>\n    ])\n}\n\n\nfunction ActionIDsFrom({actions, setActions, actionManager}) {\n    return (\n        <div>\n            <ul className={\"list-group\"}>\n                {actions.map((action, idx) => {\n                    return (\n                        <div className={\"list-group-item p-0\"} key={idx}>\n                            <div className={\"input-group\"}>\n                                <div className=\"input-group-prepend\">\n                                    <button\n                                        className=\"btn btn-light\"\n                                        type=\"button\"\n                                        onClick={() => setActions(\n                                            actions.filter((item, i) => idx !== i)\n                                        )}>\n                                        <i className={\"fas fa-minus\"}/>\n                                    </button>\n                                </div>\n                                <select\n                                    className={\"border-0 custom-select\"}\n                                    value={action}\n                                    onChange={event => {\n                                        let newActions = [...actions]\n                                        newActions[idx] = event.nativeEvent.target.value\n                                        setActions(newActions)\n                                    }}>\n                                    {actionManager.items().map((item, idxOption) => {\n                                        return <option value={item.id} key={idxOption}>\n                                            {item.name}\n                                        </option>\n                                    })}\n                                </select>\n                            </div>\n                        </div>\n                    )\n                })}\n            </ul>\n            <div\n                className={\"btn btn-light mt-1\"}\n                onClick={() => {\n                    setActions([\n                        ...actions,\n                        actionManager.items().length > 0  ? actionManager.items()[0].id : \"\"\n                    ])\n                }}>\n                <i className={\"fa fa-plus\"}/>\n            </div>\n        </div>\n    )\n}\n\n\nconst emptyInputRow = {channel: \"time\", row: -1, id:\"\", variable: \"A\"}\nconst initialState = {\n    name: \"New Trigger\",\n    retain_for: 90 * daysToSeconds,\n    expression: \"\",\n    variables: [emptyInputRow],\n    action_ids: [],\n    message: \"\",\n    expressionMessage: \"\",\n    expressionError: false,\n}\n\n\nfunction InputRows({variables, setVariables, sensorManager}) {\n\n    function newInputRow() {\n        if (variables.length === 0) return emptyInputRow\n        // make sure to deep copy the variable object\n        let newRow = {...variables.slice(-1)[0]}\n        newRow.variable = randomReadableString(3)\n        setVariables([...variables, newRow])\n    }\n\n    return ([\n        ...variables.map((variable, idx) => {\n            return <InputRow\n                sensorManager={sensorManager}\n                key={idx}\n                state={variable}\n                handleRemove={() => {\n                    setVariables(\n                        variables.filter((_, i) => {\n                            return i !== idx\n                        })\n                    )\n                }}\n                handleChange={(newState) => {\n                    let newVariables = [...variables]\n                    newVariables[idx] = newState\n                    setVariables(newVariables)\n                }}\n            />\n        }),\n        <AddRowButton key={\"add-button\"} onClick={() => {newInputRow()}}/>\n    ])\n}\n\n\nexport function TriggerFrom({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=()=>{}, actionManager, sensorManager}) {\n\n    // evaluate expression when form is shown, or variables or expression changes\n    useEffect(() => {\n        if (state.expression === \"\") return\n        evaluateExpression(state.expression, state.variables)\n    }, [state.expression, state.variables]);\n\n\n    const handleSubmit = makeSubmitHandler(\n        editMode, handleClose, state, setState, initialState, setActive, \"triggers\")\n\n\n    function evaluateExpression(expression, variables) {\n        let data = {\n            expression: expression,\n            variables: variables,\n        }\n\n        fetch(urlPrefix + \"/evaluate\", {\n            method: \"post\",\n            body: JSON.stringify(data)\n        })\n            .then(res => {return res.json()})\n            .then(res => {\n                setState({...state, expressionMessage: res.message, expressionError: res.error})\n            })\n    }\n\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={\"row\"}>\n                <div className={\"col-md-6\"}>\n                    <FormGroup\n                        label={\"Name:\"}\n                        name={\"name\"}\n                        {...stateProps}/>\n                </div>\n                <div className={\"col-md-6\"}>\n                    <FormGroup\n                        label={\"Retain history for:\"}\n                        type={\"number\"}\n                        name={\"retain_for\"}\n                        suffix={\"days\"}\n                        factor={daysToSeconds}\n                        {...stateProps}/>\n                </div>\n            </div>\n\n            <hr/>\n\n            <h4>Variables</h4>\n            <div className={\"variable-input-grid\"}>\n                <div/>\n                <div>Sensor:</div>\n                <div>Channel:</div>\n                <div>Index:</div>\n                <InputRows\n                    sensorManager={sensorManager}\n                    variables={state.variables}\n                    setVariables={(variables => {\n                        setState({...state, variables: variables})\n                    })}/>\n            </div>\n\n\n            <hr/>\n            <h4>Expression</h4>\n\n            <FormGroup\n                type=\"text\"\n                className=\"form-control text-monospace mb-1\"\n                placeholder={\"A == 3 or \\\"substing\\\" in long_string\"}\n                name={\"expression\"}\n                {...stateProps}/>\n\n            {state.expression === \"\" ? null :\n                <div className={`alert ${state.expressionError ? \"alert-danger\" : \n                    [true, false].includes(state.expressionMessage) ? \"alert-success\" : \"alert-warning\"}`}>\n                    {\"expressionMessage\" in state && state.expressionMessage.toString()}\n                </div>\n            }\n\n            <h4>Action</h4>\n            <ActionIDsFrom\n                actionManager={actionManager}\n                actions={state.action_ids}\n                setActions={actions => {\n                    setState({\n                        ...state,\n                        action_ids: actions\n                    })\n                }}/>\n\n            <FormGroup\n                label={\"Message:\"}\n                name={\"message\"}\n                {...stateProps}/>\n\n            <ApplyCreateCloseButtons label={\"Trigger\"} handleClose={handleClose} editMode={editMode}/>\n        </form>\n    )\n}\n\n\n","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    FormGroupSelect,\n    makeSubmitHandler,\n    onChangeHandler\n} from \"./formHelpers\";\n\nconst initialState = {\n    \"type\": \"DebugAction\",\n    \"interval\": 5 * 60,\n    \"name\": \"\",\n    \"url\": \"\",\n    \"retain_for\": 90 * daysToSeconds};\n\n\nexport function ActionForm({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=(active)=>{}, ...props}) {\n\n    const handleSubmit = makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, \"actions\")\n\n    function testAction() {\n        let message = `${state.name}: Test message :)`;\n        fetch(urlPrefix + \"/actions/\" + state.id + \"/update\", {\n            method: \"post\",\n            body: JSON.stringify({\n                message: message,\n                force_send: true\n            })\n        })\n    }\n\n    const stateProps = {state: state, setState: setState}\n\n    function pushoverInputs() {\n        return [\n            <FormGroup label={\"Api token:\"} name={\"api_token\"} key={\"api_token\"} {...stateProps}/>,\n            <FormGroup label={\"User key:\"} name={\"user_key\"} key={\"user_key\"} {...stateProps}/>,\n            <FormGroup label={\"Device:\"} name={\"device\"} key={\"device\"} {...stateProps}/>,\n        ]\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FormGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={onChangeHandler(state, setState)}\n                    disabled={editMode}\n                >\n                    <option value={\"DebugAction\"}>DebugAction - Debug print statement</option>\n                    <option value={\"PushoverAction\"}>Pushover - Sends a push notification</option>\n                </FormGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FormGroup\n                    label={\"Name:\"}\n                    name={\"name\"}\n                    {...stateProps}/>\n                <FormGroup\n                    label={\"Cooldown:\"}\n                    name={\"cooldown\"}\n                    type={\"number\"}\n                    suffix={\"minutes\"}\n                    factor={60}\n                    {...stateProps}/>\n                <FormGroup\n                    label={\"Retain for:\"}\n                    name={\"retain_for\"}\n                    type={\"number\"}\n                    suffix={\"days\"}\n                    factor={daysToSeconds}\n                    {...stateProps}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"PushoverAction\" ? (\n                    pushoverInputs()\n                ) : \"\" }\n            </div>\n\n            <ApplyCreateCloseButtons editMode={editMode} handleClose={handleClose} label={\"Action\"}/>\n        </form>\n    )\n}\n\n\n","import React, {useCallback, useEffect, useState} from \"react\";\n\nexport const Modal = ({handleClose, show, children, title}) => {\n    function maybeClose(event) {\n        if (event.target.classList.contains(\"modal\")) {\n            handleClose()\n        }\n    }\n\n    const escFunction = useCallback((event) => {\n        if (event.key === \"Escape\") {\n            handleClose()\n        }\n    }, [handleClose]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", escFunction, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [escFunction]);\n\n    return (\n        <div className={`modal fade ${show ? \"show\" : \"\"}`}\n             tabIndex=\"-1\"\n             role=\"dialog\"\n             style={{\n                 \"display\": show ? \"block\" : \"none\",\n                 \"backgroundColor\": \"rgba(1,1,31,0.22)\",\n                 backdropFilter: \"blur(8px)\",\n                 overflowY: \"auto\"\n             }}\n             onClick={(event) => maybeClose(event)}\n        >\n            <div className=\"modal-dialog modal-xl\" role=\"document\">\n                <div className=\"modal-content shadow\">\n                    <div className=\"modal-header bg-light\">\n                        <h5 className=\"modal-title\">{title}</h5>\n                        <button type=\"button\" className=\"close\" onClick={() => {\n                            handleClose()\n                        }}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport function ListItemSelect(props) {\n    return (\n        <li\n            className={`list-group-item list-group-item-transparent list-group-item-action \n            ${props.active ? \"active\" : \"\"} ` + props.className}\n            style={{cursor: \"default\"}}\n            onClick={props.onClick}\n        >\n            <span style={{width: \"48px\"}}>{props.iconLeft}</span>\n            {props.children}\n            <span className={\"float-right\"}>{props.iconRight}</span>\n        </li>\n    )\n}\n\n\nexport function ListItemCollapse(props) {\n    let [show, setShow] = useState(false);\n\n    return (\n        [\n            <li className={\"list-group-item list-group-item-action\"}\n                onClick={() => setShow(!show)}\n                style={{cursor: \"pointer\", borderBottom: \"none\"}}\n                key={\"1\"}\n            >\n                <i className={\"fas fa-chevron-right fa-sm mr-2\"} style={show ? {transform: \"rotate(90deg)\"} : {}}/>\n                <span className=\"text-monospace\">\n                    {props.label}\n                </span>\n                <span className=\"float-right font-weight-light\">\n                    {props.value}\n                </span>\n            </li>,\n            <li className={`list-group-item custom-collapse ${show ? \"show\" : \"\"} py-0`} key={\"2\"}>\n                <div className={\"py-3\"}>\n                    {show ? props.children : null}\n                </div>\n            </li>\n        ]\n    )\n}","import React, {useEffect, useState} from \"react\"\nimport {ListItemCollapse} from \"./Basics\";\nimport moment from \"moment\";\n\nfunction truncate(str) {\n    if (str !== null) {\n        str = str.toString()\n        return str.length < 40 ? str : `${str.slice(0, 37)}...`\n    }\n}\n\nfunction minuteStr(x) {\n    return `${Math.round(x / 60 * 10) / 10} minute${x !== 60 ? \"s\" : \"\"}`\n}\n\nlet knownConverters = {\n    elapsed: x => {\n        return `${Math.round(x * 1000)} ms`\n    },\n    time: x => {\n        return new Date(x * 1000).toLocaleString()\n    },\n    percentage: x => {\n        return `${Math.round(x * 10) / 10} %`\n    },\n    seconds: x => {\n        return `${Math.round(x)} (${Math.round(10 * x / 60 / 60 / 24) / 10} days)`\n    },\n    url: x => {\n        return (\n            <a href={decodeURIComponent(x)} target=\"_blank\" rel=\"noopener noreferrer\">\n                { decodeURIComponent(x) }\n            </a>\n        )\n    },\n    interval: minuteStr,\n    cooldown: minuteStr,\n    type: x => {\n        return <kbd className={\"bg-light text-dark\"}>\n            {x}\n        </kbd>\n    },\n    retain_for: x => {\n        return `${Math.round(x / 24 / 60 / 60 * 10) / 10} days`\n    },\n    expression: x => {\n        return <div className={\"text-monospace\"}>{x}</div>\n    },\n    broken: x => {\n        return !x ? <span className={\"fas fa-check text-success\"}/> : <span className={\"fas fa-times text-danger\"}/>\n    },\n    last_notify: x => {\n        return x < 0 ?\n            \"never\" :\n            `${new Date(x * 1000).toLocaleString()} (${moment(x * 1000).fromNow()})`\n    },\n    queued_messages: x => {\n        return x.map((item, idx) => {\n            return <div key={idx}>\n                {item}\n            </div>\n        })\n    }\n}\nlet converters = new Proxy(knownConverters, {\n    get: (target, name) =>\n        name in target ? target[name] : truncate\n})\n\n\nlet ignoreList = [\"last_reading\", \"last_update\", \"kwargs\", \"enabled\", \"id\", \"name\"]\n\nlet knownLabelConversions = {\n    \"url\": \"Target URL\",\n    \"retain_for\": \"Retain readings for\",\n    \"last_notify\": \"Last notified\",\n    \"queued_messages\": \"Queued messages\",\n    \"api_token\": \"Api token\",\n    \"user_key\": \"User key\",\n    \"action_ids\": \"Actions\",\n}\nlet labelConversion = new Proxy(knownLabelConversions, {\n    get: (target, name) =>\n        name in target ? target[name] : <span className={\"text-capitalize\"}>{name}</span>\n})\n\n\nexport function listItemsLastReading(lastReading) {\n    if (lastReading == null) return (\n        <i className={\"spinner-grow spinner-grow-lg text-secondary mx-auto my-4\"}/>\n    )\n\n    let listItems = Object.keys(lastReading).map(function (key) {\n        return <ListItemCollapse\n            key={key}\n            label={key}\n            value={converters[key](lastReading[key])}\n        >\n            {lastReading[key]}\n        </ListItemCollapse>\n    });\n    return (\n        listItems\n    )\n}\n\n\nfunction AttributeRow({label, children}) {\n    return (\n        <li className={\"list-group-item px-0\"}>\n            <div className={\"row\"}>\n                <div className={\"col-3 h5 text-secondary m-0\"}>\n                    {label}\n                </div>\n                <div className={\"col-9\"}>\n                    {children}\n                </div>\n            </div>\n        </li>\n    )\n}\n\n\nfunction Button({showSpinner, className, ...props}) {\n    return (\n        <button\n            className={\"btn btn-light mr-2 \" + className}\n            {...props}>\n            {showSpinner ?\n                <i className={\"spinner-border spinner-border-sm\"}/> :\n                props.children}\n        </button>\n    )\n}\n\nfunction YouSureButton({children, onClick, sureClass=\"border-primary\", ...props}) {\n    let [showDialog, setShowDialog] = useState(false)\n\n    return (\n        <Button\n            onClick={(e) => {\n                showDialog && onClick(e)\n                !showDialog && setTimeout(() => {setShowDialog(false)}, 3000)\n                setShowDialog(!showDialog)\n            }}\n            className={showDialog ? sureClass : \"\"}\n            {...props}>\n            {children}\n        </Button>\n    )\n\n}\n\n\nfunction Buttons({stateManager}) {\n    let [updating, setUpdating] = useState(false)\n    let [copying, setCopying] = useState(false)\n    let id = stateManager.state().active\n\n    function refresh() {\n        if (updating) {return}\n        setUpdating(true)\n        stateManager.refreshItem(id)\n            .then(() => {setUpdating(false)})\n            .catch(() => {setUpdating(false)})\n    }\n\n    function copy() {\n        let {last_reading, last_update, id, ...item} = stateManager.item()\n        item.name += \" (copy)\"\n        setCopying(true)\n        stateManager.addItem(item)\n            .then(() => {setCopying(false)})\n            .catch(() => {setCopying(false)})\n    }\n\n    return (\n        <div className={\"header-buttons float-right my-auto\"}>\n            <Button showSpinner={updating} onClick={() => refresh()} disabled={stateManager.activeState().editMode}>\n                <i className={\"fa fa-sync\"}/>\n            </Button>\n\n            <YouSureButton showSpinner={copying} onClick={() => copy()} disabled={stateManager.activeState().editMode}>\n                <i className={\"fa fa-copy\"}/>\n            </YouSureButton>\n\n            <Button\n                onClick={() => stateManager.setActiveState({\n                    editMode: !stateManager.activeState().editMode\n                })}>\n                <i className={\"fa fa-edit\"}/>\n            </Button>\n\n            <YouSureButton\n                sureClass={\"border-danger\"}\n                onClick={() => stateManager.deleteItem(id)}>\n                <i className={\"fa fa-trash text-danger\"}/>\n            </YouSureButton>\n        </div>\n    )\n\n}\n\nexport function DetailView({stateManager, FormView, children, ...props}) {\n    let id = stateManager.state().active\n\n    useEffect(() => {\n        stateManager.item().last_reading == null && stateManager.updateItem(id)\n    }, [id])\n\n    function attributeRows(attributes) {\n        let statefulConverters = {\n            variables: x => {\n                return x.map((variable, idx) => {\n                    let sensorName = variable.id\n                    try {\n                        sensorName = props.sensorManager.items().find(s => s.id === variable.id).name\n                    } catch (e) {}\n\n                    return <div className={\"text-monospace text-large\"} key={idx}>\n                        <code className={\"\"}>{variable.variable}</code> = <kbd>\n                            {sensorName}\n                        </kbd>.\n                        <kbd>{variable.channel}</kbd>\n                        [<kbd>{variable.row}</kbd>]\n                    </div>\n                })\n            },\n            action_ids: x => {\n                return x.map((id, idx) => {\n                    return (\n                        <kbd key={idx}>\n                            {props.actionManager != null ?\n                                props.actionManager.item(id).name || id :\n                                id}\n                        </kbd>\n                    )\n                })\n            },\n        }\n\n        return (\n            <ul className=\"list-group list-group-flush\">\n                {Object.entries(attributes).map(entry => {\n                    let key = entry[0]\n                    let value = entry[1]\n                    return (value != null && value !== \"\" && !(ignoreList.includes(key))) && (\n                        <AttributeRow label={labelConversion[key]} key={key}>\n                            { key in statefulConverters ? statefulConverters[key](value) : converters[key](value)}\n                        </AttributeRow>\n                    )\n                })}\n            </ul>\n        )\n    }\n\n    function renderDetail() {\n        return (\n            <div className={\"main px-3\"} key={\"detail\"}>\n                { attributeRows(stateManager.item()) }\n                { children }\n            </div>\n        )\n    }\n\n    function setFormState(state) {\n        stateManager.setActiveState({\n            formState: {...stateManager.activeState().formState, ...state}\n        })\n    }\n\n    function renderForm() {\n        return (\n            <div className={\"main px-3\"}>\n                <FormView\n                    key={\"form\"}\n                    state={{...stateManager.item(), ...stateManager.activeState().formState}}\n                    setState={setFormState}\n                    editMode={true}\n                    handleClose={() => {stateManager.setActiveState({editMode: false, formState: {}})}}\n                    {...props}\n                />\n            </div>\n        )\n    }\n\n    if (stateManager.activeState().editMode === true) {\n        return ([\n            <Buttons stateManager={stateManager} key={\"Buttons\"}/>,\n            renderForm()\n        ])\n    } else {\n        return ([\n            <Buttons stateManager={stateManager} key={\"ButtonsDetail\"}/>,\n            renderDetail()\n        ])\n    }\n}","import { urlPrefix } from './settings.js';\n\n\nexport class eventManager {\n    constructor() {\n        this.subscriptions = []\n        this.listen()\n    }\n\n\n    subscribe(obj) {\n        this.subscriptions.push(obj)\n    }\n\n\n    unsubscribe(obj) {\n        let idx = this.subscriptions.indexOf(obj)\n        delete this.subscriptions[idx]\n    }\n\n\n    handleEvent(event) {\n        this.subscriptions.forEach(obj => {\n            try {\n                obj.eventHandler(event)\n            }\n            catch (e) {\n                console.log(e)\n            }\n        })\n    }\n\n\n    listen () {\n        let that = this;\n        let source = new EventSource(urlPrefix + \"/events\");\n        source.onmessage = function (e) {\n            try {\n                let data = JSON.parse(e.data)\n                that.handleEvent(data)\n            } catch (error) {}\n        }\n    }\n\n}","import React, {useEffect, useState} from \"react\";\nimport {ListItemSelect} from \"./Basics\";\n\n\nfunction BadgeMessage({stateManager, item}) {\n    function badge(child, color=\"light\") {\n        return (\n            <div className={\"badge font-weight-normal badge-\" + color}>\n                {child}\n                { stateManager.activeState(item.id).editMode && <i className={\"fas fa-edit ml-2\"}/> }\n            </div>\n        )\n    }\n\n    if (stateManager.eventHandlerItemPrefix === \"trigger\") {\n        // no data for last reading? early return\n        if (item.last_reading == null) return null\n\n        // broken?\n        if (item.last_reading.state == null) {\n            return badge(\"broken\", \"warning\")\n        }\n\n        return item.last_reading.state ? badge(\"triggering\", \"primary\") : badge(\"not triggering\")\n    }\n\n    return badge(item.type)\n}\n\n\nfunction Item({stateManager, item}) {\n    let [flash, setFlash] = useState(\"initial\")\n\n    useEffect(() => {\n        // do not do anything on initial render\n        if (flash === \"initial\") {\n            setFlash(\"\")\n            return;\n        }\n        setFlash(\"flash\")\n        setTimeout(() => setFlash(\"\"), 1000)\n    }, [stateManager.activeState(item.id).lastUpdateEvent])\n\n    return (\n        <ListItemSelect\n            className={flash}\n            onClick={() => stateManager.setState({ active: item.id })}\n            active={stateManager.state().active === item.id}\n            iconRight={<BadgeMessage stateManager={stateManager} item={item}/>}>\n            { item.name }\n        </ListItemSelect>\n    )\n}\n\nexport function ListView({stateManager}) {\n    useEffect(() => {\n        if (stateManager.state().active == null && stateManager.items()[0] != null) {\n            stateManager.setState({\n                active:  stateManager.items()[0].id\n            })\n        }\n    }, [stateManager.state().active, stateManager.items()])\n\n    function ItemList(items) {\n        if (items == null) return null\n\n        return items.map(item => <Item stateManager={stateManager} item={item} key={item.id}/>);\n    }\n\n    return [\n        <li className={`list-group-item list-group-item-transparent list-group-item-action \n        ${stateManager.state().active === \"form\" ? \"active\" : \"\"}`}\n            key={\"button\"}\n            style={{cursor: \"default\"}}\n            onClick={() => stateManager.setState({ active: \"form\" })}\n        >\n            <h3 className={\"mb-1\"}>\n                New {stateManager.itemLabel}\n                <span className={\"float-right\"}>\n                    <i className={\"fa fa-xs fa-plus\"}/>\n                </span>\n            </h3>\n        </li>,\n\n        <input className={\"input-group-sm list-group-item list-group-item-transparent w-100 icon-placeholder py-2\"}\n               placeholder=\"&#xf002; Filter\"\n               value={stateManager.state().filter}\n               key={\"Filter\"}\n               onChange={event => stateManager.setState({filter: event.target.value})}\n        />,\n\n        ItemList( stateManager.items().filter(item => {\n            let filter = (stateManager.state().filter || \"\").toLowerCase()\n            return Object.keys(item).some(key => {\n                try {\n                    return item[key].toLowerCase().includes(filter)\n                } catch (e) {\n                    return false\n                }\n            })\n        }))\n    ]\n\n}\n\n\n\n","import React, {useEffect} from \"react\";\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-zoom'\n\n// React.memo should prevent the rerendering except, if the props change.\nexport const LineChart = React.memo(function LineChart(props) {\n    function makeLineChartData(data) {\n        return {\n            labels: data.map((x, i) => i),\n            datasets: [{\n                label: 'My First dataset',\n                borderColor: \"#fa9121\",\n                backgroundColor: \"#fa912111\",\n                fill: true,\n                data: data,\n                hidden: true,\n            }, {\n                label: 'My Second dataset',\n                borderColor: \"#21af61\",\n                backgroundColor: \"#21af61\",\n                fill: false,\n                data: data.map(x => x * 1.2),\n            }]\n        }\n    }\n\n    let options = {\n        responsive: true,\n        hoverMode: 'index',\n        stacked: false,\n        title: {\n            display: true,\n            text: props.title || \"\"\n        },\n        scales: {\n            yAxes: [{\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'left',\n                id: 'y-axis-1',\n            }, {\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: false,\n                position: 'right',\n                id: 'y-axis-2',\n\n                // grid line settings\n                gridLines: {\n                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                },\n            }],\n            xAxes: [{\n                type: 'time',\n            }, ],\n        },\n        plugins: {\n            zoom: {\n                pan: {\n                    enabled: false,\n                },\n                zoom: {\n                    enabled: true,\n                    drag: true,\n                    mode: 'x',\n                    speed: 1,\n                    threshold: 0.1,\n                }\n            }\n        },\n    }\n\n    let chartExists = false\n    useEffect(() => {\n        if (!chartExists) {\n            makeChart()\n            chartExists = true\n        }\n    }, [props.data]);\n\n    function makeChart() {\n        let chart = Chart.Line(chartRef.current, {\n            data: makeLineChartData(props.data),\n            options: options\n        })\n        chartRef.current.ondblclick = () => {\n            chart.resetZoom()\n        }\n    }\n\n    let chartRef = React.createRef();\n\n    return <canvas ref={chartRef}/>\n})","import {stateManager} from \"./state\";\nimport {SensorFrom} from \"./SensorForms\";\nimport {TriggerFrom} from \"./TriggerForms\";\nimport {ActionForm} from \"./ActionForms\";\nimport React, {useState} from \"react\";\nimport {DetailView} from \"./DetailView\";\nimport {eventManager} from \"./events\";\nimport {ListView} from \"./ListView\";\nimport {Sensor} from \"./Sensor\";\nimport {Trigger} from \"./Trigger\";\nimport {Action} from \"./Action\";\n\nfunction Sidebar(props) {\n    return (\n        <div className={\"sidebar bg-night shadow-sm\"}>\n            <ul className={\"list-group list-group-flush\"}>\n                {props.children}\n            </ul>\n        </div>\n    )\n}\n\n\nfunction ContentView({FormView, stateManager, children, ...props}) {\n    function setFormState(state) {\n        stateManager.setState({\n            formState: {...stateManager.state().formState, ...state}\n        })\n    }\n\n    function renderContent() {\n        if (stateManager.state().active === \"form\") {\n            return (\n                <div className={\"main px-3\"}>\n                    <FormView\n                        key={\"FormView\"}\n                        state={stateManager.state().formState}\n                        setState={setFormState}\n                        setActive={active => {\n                            stateManager.setState({active: active})\n                        }}\n                        {...props}\n                    />\n                </div>\n            )\n        } else {\n            return <DetailView\n                key={\"DetailView\"}\n                stateManager={stateManager}\n                FormView={FormView}\n                {...props}>\n                {children}\n            </DetailView>\n        }\n    }\n\n    return ([\n        <div className={\"header h2 text-dark my-auto px-3\"} key={\"header\"}>\n            {stateManager.item().name || \"Create New\"}\n        </div>,\n        renderContent()\n    ])\n}\n\n// create event listener globally\nlet events = new eventManager()\nlet itemInfo = {\n    \"sensors\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Sensor\",\n            eventHandlerItemPrefix: \"sensor\",\n            fetchUrlPath: \"/sensors\",\n        }),\n        form: SensorFrom,\n        moreInfo: Sensor,\n    },\n    \"triggers\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Trigger\",\n            eventHandlerItemPrefix: \"trigger\",\n            fetchUrlPath: \"/triggers\",\n        }),\n        form: TriggerFrom,\n        moreInfo: Trigger,\n    },\n    \"actions\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Action\",\n            eventHandlerItemPrefix: \"action\",\n            fetchUrlPath: \"/actions\",\n        }),\n        form: ActionForm,\n        moreInfo: Action,\n    },\n}\n\nexport function App() {\n    let [state, _setState] = useState({})\n\n    function setState(newState) {\n        _setState({...state, ...newState})\n    }\n\n    Object.keys(itemInfo).map(key => {\n        itemInfo[key].manager.initializeGlobalState(state, setState)\n    })\n\n    let [active, setActive] = useState(\"sensors\")\n\n    function makeTabs() {\n        let icons = {\n            \"sensors\": <span className={`fas fa-ruler-vertical mr-2`}/>,\n            \"triggers\": <span className={`fas fa-calculator mr-2`}/>,\n            \"actions\": <span className={`fas fa-bullseye mr-2`}/>,\n        }\n        return Object.keys(itemInfo).map(key => {\n            return (\n                <button type=\"button\"\n                        className={`btn btn-outline-transparent text-white px-1 text-capitalize \n                        ${active === key ? \"active\" : \"\"}`}\n                        key={key}\n                        onClick={() => {\n                            setActive(key)\n                        }}>\n                    {icons[key]}<br/>{key}\n                </button>\n            )\n        })\n    }\n\n    let manager = itemInfo[active].manager\n    let MoreInfoView = itemInfo[active].moreInfo\n\n    return (\n        <div className={\"main-grid\"}>\n            <Sidebar>\n                <div className=\"btn-group w-100 px-1 py-2\">\n                    {makeTabs()}\n                </div>\n                <ListView stateManager={manager}/>\n            </Sidebar>\n\n            <ContentView\n                stateManager={manager}\n                FormView={itemInfo[active].form}\n                sensorManager={itemInfo.sensors.manager}\n                actionManager={itemInfo.actions.manager}>\n                    <MoreInfoView stateManager={manager}/>\n            </ContentView>\n        </div>\n    )\n}","import React from \"react\"\nimport {listItemsLastReading} from \"./DetailView\";\nimport {LineChart} from \"./Chart\";\nimport {urlPrefix} from \"./settings\";\n\n\nexport function Sensor({stateManager}) {\n\n    let activeDetailView = stateManager.state().activeDetailView || 0\n    const setActiveDetailView = active => {\n        stateManager.setState({activeDetailView: active})\n    }\n\n    function getChartData() {\n        let url = `${urlPrefix}/query/${stateManager.item().id}?row=elapsed`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                console.log(res)\n                stateManager.setActiveState({chartData: res})\n            })\n    }\n\n    return (\n        <div className={\"mt-3\"}>\n            { stateManager.item().type === \"HTML\" && (\n                <button\n                    className={\"btn btn-sm btn-outline-primary mb-2\"}\n                    onClick={() => {\n                        let wnd = window.open(stateManager.item().url)\n                        wnd.document.write(stateManager.item().last_reading.content)\n                    }}>\n                    <span className={\"fa fa-external-link-alt mr-2\"}/>\n                    Open HTML content of last reading in new window\n                </button>\n            )}\n            <div className=\"btn-group mb-2 w-100\">\n                <button\n                    type=\"button\"\n                    className={`btn btn-light ${activeDetailView === 0 ? \"active\" : \"\"}`}\n                    onClick={() => {setActiveDetailView(0)}}>\n                    <span className={\"fas fa-database mr-2\"}/>\n                    Raw Data\n                </button>\n                <button\n                    type=\"button\"\n                    className={`btn btn-light ${activeDetailView === 1 ? \"active\" : \"\"}`}\n                    onClick={() => {setActiveDetailView(1)}}>\n                    <span className={\"fas fa-chart-area mr-2\"}/>\n                    History\n                </button>\n            </div>\n\n            {activeDetailView === 0 &&\n            <div>\n                <ul className={\"list-group\"}>\n                    {listItemsLastReading(stateManager.item().last_reading)}\n                </ul>\n                <span className={\"text-muted font-weight-normal\"}>data from last reading</span>\n            </div>\n            }\n\n            {activeDetailView === 1 &&\n                <div>\n                    Work in progress\n                    {//<LineChart data={stateManager.activeState().chartData || [0, 2, 3, 1, 4, 2, 4, 2, 1]}/>\n                    }\n                </div>\n            }\n\n        </div>\n    )\n}","import React from \"react\"\nimport {listItemsLastReading} from \"./DetailView\";\n\n\nexport function Trigger({stateManager}) {\n    return (\n        <div className={\"mt-3\"}>\n            <h4>\n                Last Check\n            </h4>\n            <ul className={\"list-group\"}>\n                {listItemsLastReading(stateManager.item().last_reading)}\n            </ul>\n        </div>\n    )\n}","import React from \"react\"\nimport {listItemsLastReading} from \"./DetailView\";\n\n\nexport function Action({stateManager}) {\n    return (\n        <div className={\"mt-3\"}>\n            <h4>\n                Last Message\n            </h4>\n            <ul className={\"list-group\"}>\n                {listItemsLastReading(stateManager.item().last_reading)}\n            </ul>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './custom.css'\nimport {App} from \"./AppView\";\n//import './bootstrap-dark/bootstrap-dark.scss' import {App} from \"./AppView\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n          <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}