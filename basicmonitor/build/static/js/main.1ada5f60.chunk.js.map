{"version":3,"sources":["state.js","settings.js","formHelpers.js","SensorForms.js","TriggerForms.js","ActionForms.js","Basics.js","DetailView.js","events.js","ListView.js","Chart.js","AppView.js","Sensor.js","Trigger.js","Action.js","index.js"],"names":["stateManager","eventManager","itemLabel","basicEventHandlerItemPrefix","eventHandlerItemPrefix","fetchUrlPath","this","stateKey","globalState","setGlobalState","subscribe","event","message","id","data","newIdx","filtered","items","filter","item","index","setItems","length","setState","active","updateItem","state","idx","findIndex","obj","last_reading","newState","newGlobalState","newActiveState","activeState","updateItems","find","url","fetch","then","res","json","setItem","method","onChangeHandler","e","preventDefault","target","nativeEvent","value","dataset","factor","name","FormGroupSelect","props","className","label","placeholder","onChange","disabled","children","FormGroup","type","list","data-factor","suffix","ApplyCreateCloseButtons","handleClose","editMode","onClick","makeSubmitHandler","initialState","setActive","path","urlPrefix","body","JSON","stringify","AddRowButton","style","width","InputRow","handleRemove","handleChange","sensorManager","useState","numberUpdating","setNumberUpdating","time","lastReading","setLastReading","incrementNumberUpdating","inc","n","updateChannelList","row","useEffect","map","key","channel","Object","keys","maxWidth","variable","ActionIDsFrom","actions","setActions","actionManager","action","i","newActions","idxOption","emptyInputRow","retain_for","expression","variables","action_ids","expressionMessage","expressionError","InputRows","setVariables","newInputRow","newRow","slice","randomChar","string","charAt","Math","floor","random","vowels","consonants","result","randomReadableString","_","newVariables","ListItemSelect","cursor","iconLeft","iconRight","ListItemCollapse","show","setShow","borderBottom","transform","truncate","str","toString","minuteStr","x","round","converters","Proxy","elapsed","Date","toLocaleString","percentage","seconds","href","decodeURIComponent","rel","interval","cooldown","broken","last_notify","moment","fromNow","queued_messages","get","ignoreList","labelConversion","listItemsLastReading","AttributeRow","DetailView","FormView","updating","setUpdating","renderButtons","refreshItem","setActiveState","deleteItem","setFormState","formState","attributes","statefulConverters","sensorName","s","entries","entry","includes","attributeRows","subscriptions","listen","push","indexOf","forEach","eventHandler","console","log","that","EventSource","onmessage","parse","handleEvent","error","ListView","toLowerCase","some","React","memo","options","responsive","hoverMode","stacked","title","display","text","scales","yAxes","position","gridLines","drawOnChartArea","xAxes","plugins","zoom","pan","enabled","drag","mode","speed","threshold","chartExists","chart","Chart","Line","chartRef","current","labels","datasets","borderColor","backgroundColor","fill","hidden","ondblclick","resetZoom","makeChart","createRef","ref","Sidebar","Content","overflow","ContentView","events","itemInfo","manager","form","handleSubmit","stateProps","onSubmit","borderRight","moreInfo","activeDetailView","setActiveDetailView","window","open","document","write","content","evaluateExpression","App","_setState","initializeGlobalState","MoreInfoView","icons","makeTabs","sensors","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ada5f60.chunk.js","sourcesContent":["import {urlPrefix} from \"./settings\";\n\n// the state manager itself is stateless. All its state is stored in the \"globalState\" of the root ract component\nexport class stateManager {\n    constructor({eventManager,\n                 itemLabel=\"Item\",\n                 basicEventHandlerItemPrefix: eventHandlerItemPrefix = \"item\",\n                 fetchUrlPath=\"/items\"}) {\n\n        // Is this state manager for a Sensor, Trigger or otherwise?\n        this.itemLabel = itemLabel\n        this.stateKey = itemLabel + \"State\"\n        this.eventHandlerItemPrefix = eventHandlerItemPrefix\n        this.fetchUrlPath = fetchUrlPath\n\n        // dummy state\n        this.globalState = {}\n        this.setGlobalState = ({}) => {}\n\n        // listen to incoming events. The eventManager will call the \"eventHandler\" function\n        this.eventManager = eventManager\n        eventManager.subscribe(this)\n    }\n\n    initializeGlobalState(globalState, setGlobalState) {\n        this.globalState = globalState\n        this.setGlobalState = setGlobalState\n    }\n\n    eventHandler(event) {\n        if (event.message === this.eventHandlerItemPrefix + \" deleted\") {\n            // remove item from list\n            let id = event.data.id\n            let newIdx = 0\n            let filtered = this.items().filter((item, index) => {\n                if (item.id === id) {\n                    newIdx = index\n                }\n                return item.id !== id;\n            });\n\n            // delete item\n            this.setItems(filtered)\n\n            // focus on new item\n            if (this.items().length > 0) {\n                newIdx = this.items().length <= newIdx ? newIdx - 1 : newIdx\n                this.setState( {\n                    active: this.items()[newIdx].id\n                } )\n            }\n\n        } if (event.message === this.eventHandlerItemPrefix + \" added\") {\n            this.setItems([\n                ...this.items(),\n                event.data\n            ] )\n        } if (event.message === this.eventHandlerItemPrefix + \" edited\") {\n            // update the relevant item\n            this.updateItem(event.data.id)\n        } if (event.message === this.eventHandlerItemPrefix + \" updated\") {\n            let id = event.data.id\n            if (this.state().active === id) {\n                // update item if currently visible\n                this.updateItem(id)\n            } else {\n                // remove outdated reading if not visible\n                let items = this.items()\n                let idx = items.findIndex(obj => obj.id === id)\n                if (items[idx].last_reading) {\n                    items[idx].last_reading = null\n                }\n                this.setItems(items)\n            }\n        }\n    }\n\n    state() {\n        // initialize other state\n        if (this.globalState[this.stateKey] == null) {\n            this.globalState[this.stateKey] = {}\n        }\n        return this.globalState[this.stateKey]\n    }\n\n    setState(newState) {\n        let state = this.state()\n        let newGlobalState = {}\n        newGlobalState[this.stateKey] = {...state, ...newState}\n        this.setGlobalState(newGlobalState)\n    }\n\n    activeState() {\n        // state of currently active item\n        let id = this.state().active\n        if (id == null) return {}\n        // initialize\n        if (this.globalState[id] == null) {\n            this.globalState[id] = {}\n            return {}\n        }\n        return this.globalState[id]\n    }\n\n    setActiveState(newActiveState) {\n        let id = this.state().active\n        if (id == null) return\n\n        let newState = {}\n        newState[id] = {...this.activeState(), ...newActiveState}\n        this.setGlobalState(newState)\n    }\n\n    items() {\n        // initialize list of sensors or triggers, ect\n        if (this.globalState[this.itemLabel] == null) {\n            this.globalState[this.itemLabel] = []\n            this.updateItems()\n            return []\n        }\n        return this.globalState[this.itemLabel]\n    }\n\n    setItems(items) {\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.setGlobalState(newState)\n    }\n\n    item() {\n        let item = this.items().find(obj => {\n            return obj.id === this.state().active\n        })\n        // item not found\n        if (item == null) {\n            item = {}\n        }\n        return item\n    }\n\n    setItem(item) {\n        let items = this.items()\n        let idx = items.findIndex(obj => obj.id === item.id)\n        items[idx] = item\n        this.setItems(items)\n    }\n\n    updateItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem(data)\n            })\n    }\n\n    updateItems() {\n        let url = urlPrefix + this.fetchUrlPath\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                this.setItems(res)\n                if (this.state().active === \"\" && this.items().length > 0) this.setState({\n                    active: \"id\" in this.items()[0] ? this.items()[0].id : \"\"\n                })\n            })\n    }\n\n    refreshItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}/update`\n        return fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem({\n                    ...this.item(),\n                    last_reading: data\n                })\n            })\n    }\n\n    deleteItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`;\n        fetch(url, {\n            method: 'DELETE',\n            data: {}\n        });\n    }\n\n}","// dev\n//export let urlPrefix = \"http://127.0.0.1:5000\";\n\n// build\n export let urlPrefix = \".\";","import React from \"react\";\nimport {urlPrefix} from \"./settings\";\n\nexport const daysToSeconds = 24 * 60 * 60\n\nexport function onChangeHandler(state, setState) {\n    return function onChange(e) {\n        e.preventDefault()\n        let target = e.nativeEvent.target\n        let newState = {...state}\n        let value = target.value\n        if (target.dataset.factor && value != null) {\n            value *= target.dataset.factor\n        }\n        newState[target.name] = value\n        setState(newState)\n    }\n}\n\nexport function FormGroupSelect(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <select\n                    className=\"form-control\"\n                    placeholder={props.placeholder || \"\"}\n                    onChange={props.onChange}\n                    value={props.value}\n                    name={props.name}\n                    disabled={props.disabled}\n                >\n                    {props.children}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport function FormGroup(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <input type={props.type || \"text\"}\n                       className=\"form-control\"\n                       placeholder={props.placeholder || \"\"}\n                       onChange={onChangeHandler(props.state, props.setState)}\n                       value={\n                           props.factor != null ?\n                               props.state[props.name] / props.factor :\n                               props.state[props.name]\n                       }\n                       list={props.list || \"\"}\n                       name={props.name}\n                       disabled={props.disabled}\n                       data-factor={props.factor}\n                />\n                {\"suffix\" in props ? (\n                    <div className=\"input-group-append\">\n                        <span className=\"input-group-text\">{props.suffix}</span>\n                    </div>\n                ) : \"\"}\n            </div>\n        </div>\n    )\n}\n\n\nexport function ApplyCreateCloseButtons({handleClose=()=>{}, editMode=false, label=\"\"}) {\n    return (\n        <div className={\"col-12\"}>\n            <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                {editMode ? \"Apply\" : `Create ${label}`}\n            </button>\n            {editMode ?\n            <button type={\"button\"} className={\"btn btn-secondary mt-2 ml-2 px-4\"} onClick={handleClose}>\n                Cancel\n            </button>\n            : \"\"}\n        </div>\n    )\n}\n\n\nexport function makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, path) {\n\n    return function handleSubmit(event) {\n        event.preventDefault()\n\n        if (editMode) {\n            // edit sensor\n            fetch(urlPrefix + \"/\" + path + \"/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(state)\n            })\n        } else {\n            // new sensor\n            fetch(urlPrefix + \"/\" + path, {\n                method: \"post\",\n                body: JSON.stringify(state)\n            })\n                .then(res => {\n                    setState(initialState)\n                    return res.json()\n                })\n                .then(data => {\n                    setActive(data.id)\n                })\n        }\n\n        handleClose()\n    }\n}\n\n\nexport function randomReadableString(length=5) {\n    function randomChar(string) {\n        return string.charAt(Math.floor(Math.random() * string.length))\n    }\n    let vowels = 'aeoui'\n    let consonants = 'qwrtzipsdfghjklyxcvbnm'\n    let result = ''\n    for (let i = 0; i < length; i++) {\n        result += i % 2 === 0 ? randomChar(consonants) : randomChar(vowels)\n    }\n    return result\n}","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    FormGroupSelect,\n    makeSubmitHandler,\n    onChangeHandler\n} from \"./formHelpers\";\nimport {stateManager} from \"./state\";\n\nconst initialState = {\n    \"type\": \"HTML\",\n    \"interval\": 5 * 60,\n    \"name\": \"\",\n    \"url\": \"\",\n    \"retain_for\": 90 * daysToSeconds};\n\nexport function SensorFrom({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=(active)=>{}, ...props}) {\n\n    const handleSubmit = makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, \"sensors\")\n\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FormGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={onChangeHandler(state, setState)}\n                    disabled={editMode}\n                >\n                    <option value={\"HTML\"}>HTML - Grabs HTTP response from a URL</option>\n                    <option value={\"CPUPercentage\"}>CPUPercentage - Host system CPU usage</option>\n                    <option value={\"RAMPercentage\"}>RAMPercentage - Host system memory usage</option>\n                    <option value={\"Uptime\"}>Uptime - Host system uptime</option>\n                </FormGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FormGroup {...stateProps} label={\"Name:\"} name={\"name\"}/>\n                <FormGroup\n                    {...stateProps}\n                    label={\"Update interval:\"}\n                    name={\"interval\"} type={\"number\"}\n                    suffix={\"minutes\"}\n                    factor={60}\n                />\n                <FormGroup\n                    {...stateProps}\n                    label={\"Retain for:\"}\n                    name={\"retain_for\"}\n                    type={\"number\"}\n                    suffix={\"days\"}\n                    factor={daysToSeconds}/>\n\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"HTML\" ? (\n                    <FormGroup label={\"Target URL:\"} name={\"url\"} {...stateProps}/>\n                ) : \"\" }\n            </div>\n\n            <ApplyCreateCloseButtons handleClose={handleClose} editMode={editMode} label={\"Sensor\"}/>\n        </form>\n    )\n}\n\n\n","import React, {useEffect, useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    makeSubmitHandler,\n    randomReadableString\n} from \"./formHelpers\";\n\nfunction AddRowButton({onClick}) {\n    return (\n        <div className={\"row mt-1\"}>\n            <div className={\"pl-2\"} style={{width: \"48px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light mr-2\"} onClick={(e) => {\n                    e.preventDefault()\n                    if (onClick == null) return\n                    onClick()\n                }}>\n                    <span className={\"fa fa-plus\"} />\n                </button>\n            </div>\n        </div>\n    )\n}\n\n\nfunction InputRow({handleRemove, state, handleChange, sensorManager}) {\n    let [numberUpdating, setNumberUpdating] = useState(0)\n    let [lastReading, setLastReading] = useState({time: 0})\n\n    function incrementNumberUpdating(inc=1) {\n        setNumberUpdating(n => {\n            return n + inc\n        });\n    }\n\n    function updateChannelList(id, row=state.row) {\n        let url = `${urlPrefix}/query/${id}?row=${row}`\n        incrementNumberUpdating()\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                if (res[0] != null) setLastReading(res[0])\n                incrementNumberUpdating(-1)\n            })\n    }\n\n    function onClickRemove(e) {\n        e.preventDefault()\n        handleRemove()\n    }\n\n    function onClickRefresh(e) {\n        e.preventDefault()\n        updateChannelList(state.id)\n    }\n\n    function onChange(event) {\n        event.preventDefault()\n        let newState = {...state};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        handleChange(newState)\n        if (event.nativeEvent.target.name === \"id\") {\n            updateChannelList(event.nativeEvent.target.value)\n        }\n        if (event.nativeEvent.target.name === \"row\") {\n            updateChannelList(state.id, event.nativeEvent.target.value)\n        }\n    }\n\n    useEffect(() => {\n        state.id && updateChannelList(state.id)\n    }, [state.id]);\n\n    return (\n        <div className={\"row py-2\"}>\n            <div className={\"pl-2\"} style={{width: \"36px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light mr-2\"} onClick={onClickRemove}>\n                    <span className={\"fa fa-minus\"} />\n                </button>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"35%\"}}>\n                <select\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"Sensor\"\n                       name={\"id\"}\n                       value={ state.id }\n                       onChange={onChange}>\n                    <option value=\"\"/>\n                    { sensorManager.items().map(item => {\n                        return <option key={item.id} value={item.id}>{item.name}</option>\n                    }) }\n                </select>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"35%\"}}>\n                <select\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"Channel\"\n                       name={\"channel\"}\n                       value={ state.channel }\n                       onChange={onChange}>\n                    { Object.keys(lastReading).map(item => {\n                        return <option key={item} value={item}>{item}</option>\n                    }) }\n                </select>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"20%\", maxWidth: \"90px\"}}>\n                <input type=\"number\"\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"-1\"\n                       name={\"row\"}\n                       value={ state.row }\n                       onChange={onChange}/>\n            </div>\n\n            <div className={\"col-12 mt-1\"} />\n\n            <div className={\"pl-2\"} style={{width: \"36px\"}}> </div>\n            <div className={\"pl-2\"} style={{width: \"70%\"}}>\n                <div className=\"input-group input-group-sm\">\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           placeholder=\"Variable name (can be used in Expression)\"\n                           name={\"variable\"}\n                           value={ state.variable }\n                           onChange={onChange}/>\n                    <div className=\"input-group-append w-50\">\n                        <div className=\"input-group-text w-100 bg-light\">\n                            <span className={\"text-truncate text-nowrap text-monospace\"}>\n                                = { lastReading[state.channel] }\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"20%\", maxWidth: \"90px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light w-100\"} onClick={onClickRefresh}>\n                    {numberUpdating > 0 ?\n                        <i className={\"spinner-border spinner-border-sm\"}/> :\n                        <i className={\"fa fa-sync\"}/>}\n                </button>\n            </div>\n\n        </div>\n    )\n}\n\n\nfunction ActionIDsFrom({actions, setActions, actionManager}) {\n    return (\n        <div>\n            <ul className={\"list-group\"}>\n                {actions.map((action, idx) => {\n                    return (\n                        <div className={\"list-group-item p-0\"} key={idx}>\n                            <div className={\"input-group\"}>\n                                <div className=\"input-group-prepend\">\n                                    <button\n                                        className=\"btn btn-light\"\n                                        type=\"button\"\n                                        onClick={() => setActions(\n                                            actions.filter((item, i) => idx !== i)\n                                        )}>\n                                        <i className={\"fas fa-minus\"}/>\n                                    </button>\n                                </div>\n                                <select\n                                    className={\"border-0 custom-select\"}\n                                    value={action}\n                                    onChange={event => {\n                                        let newActions = [...actions]\n                                        newActions[idx] = event.nativeEvent.target.value\n                                        setActions(newActions)\n                                    }}>\n                                    {actionManager.items().map((item, idxOption) => {\n                                        return <option value={item.id} key={idxOption}>\n                                            {item.name}\n                                        </option>\n                                    })}\n                                </select>\n                            </div>\n                        </div>\n                    )\n                })}\n            </ul>\n            <div\n                className={\"btn btn-light mt-1\"}\n                onClick={() => {\n                    setActions([\n                        ...actions,\n                        actionManager.items().length > 0  ? actionManager.items()[0].id : \"\"\n                    ])\n                }}>\n                <i className={\"fa fa-plus\"}/>\n            </div>\n        </div>\n    )\n}\n\n\nconst emptyInputRow = {channel: \"time\", row: -1, id:\"\", variable: \"A\"}\nconst initialState = {\n    name: \"New Trigger\",\n    retain_for: 90 * daysToSeconds,\n    expression: \"\",\n    variables: [emptyInputRow],\n    action_ids: [],\n    message: \"\",\n    expressionMessage: \"\",\n    expressionError: false,\n}\n\n\nfunction InputRows({variables, setVariables, sensorManager}) {\n\n    function newInputRow() {\n        if (variables.length === 0) return emptyInputRow\n        // make sure to deep copy the variable object\n        let newRow = {...variables.slice(-1)[0]}\n        newRow.variable = randomReadableString(3)\n        setVariables([...variables, newRow])\n    }\n\n    return (\n        <div>\n            { variables.map((variable, idx) => {\n                return <InputRow\n                    sensorManager={sensorManager}\n                    key={idx}\n                    state={variable}\n                    handleRemove={() => {\n                        setVariables(\n                            variables.filter((_, i) => {\n                                return i !== idx\n                            })\n                        )\n                    }}\n                    handleChange={(newState) => {\n                        let newVariables = [...variables]\n                        newVariables[idx] = newState\n                        setVariables(newVariables)\n                    }}\n                />\n            }) }\n            <AddRowButton onClick={() => {newInputRow()}}/>\n        </div>\n    )\n}\n\n\nexport function TriggerFrom({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=()=>{}, actionManager, sensorManager}) {\n\n    // evaluate expression when form is shown, or variables or expression changes\n    useEffect(() => {\n        if (state.expression === \"\") return\n        evaluateExpression(state.expression, state.variables)\n    }, [state.expression, state.variables]);\n\n\n    const handleSubmit = makeSubmitHandler(\n        editMode, handleClose, state, setState, initialState, setActive, \"triggers\")\n\n\n    function evaluateExpression(expression, variables) {\n        let data = {\n            expression: expression,\n            variables: variables,\n        }\n\n        fetch(urlPrefix + \"/evaluate\", {\n            method: \"post\",\n            body: JSON.stringify(data)\n        })\n            .then(res => {return res.json()})\n            .then(res => {\n                setState({...state, expressionMessage: res.message, expressionError: res.error})\n            })\n    }\n\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={\"row\"}>\n                <div className={\"col-md-6\"}>\n                    <FormGroup\n                        label={\"Name:\"}\n                        name={\"name\"}\n                        {...stateProps}/>\n                </div>\n                <div className={\"col-md-6\"}>\n                    <FormGroup\n                        label={\"Retain history for:\"}\n                        type={\"number\"}\n                        name={\"retain_for\"}\n                        suffix={\"days\"}\n                        factor={daysToSeconds}\n                        {...stateProps}/>\n                </div>\n            </div>\n\n            <hr/>\n\n            <h4>Variables</h4>\n            <div className={\"row\"}>\n                <div style={{width: \"36px\"}} className={\"px-2\"}> </div>\n                <div style={{width: \"35%\"}} className={\"px-2\"}>Sensor:</div>\n                <div style={{width: \"35%\"}} className={\"px-2\"}>Channel:</div>\n                <div style={{width: \"20%\", maxWidth: \"90px\"}} className={\"px-2\"}>Index:</div>\n            </div>\n            <InputRows\n                sensorManager={sensorManager}\n                variables={state.variables}\n                setVariables={(variables => {\n                    setState({...state, variables: variables})\n                })}/>\n\n            <hr/>\n            <h4>Expression</h4>\n\n            <FormGroup\n                type=\"text\"\n                className=\"form-control text-monospace mb-1\"\n                placeholder={\"A == 3 or \\\"substing\\\" in long_string\"}\n                name={\"expression\"}\n                {...stateProps}/>\n\n            {state.expression === \"\" ? null :\n                <div className={`alert ${state.expressionError ? \"alert-danger\" : \n                    [true, false].includes(state.expressionMessage) ? \"alert-success\" : \"alert-warning\"}`}>\n                    {\"expressionMessage\" in state && state.expressionMessage.toString()}\n                </div>\n            }\n\n            <h4>Action</h4>\n            <ActionIDsFrom\n                actionManager={actionManager}\n                actions={state.action_ids}\n                setActions={actions => {\n                    setState({\n                        ...state,\n                        action_ids: actions\n                    })\n                }}/>\n\n            <FormGroup\n                label={\"Message:\"}\n                name={\"message\"}\n                {...stateProps}/>\n\n            <ApplyCreateCloseButtons label={\"Trigger\"} handleClose={handleClose} editMode={editMode}/>\n        </form>\n    )\n}\n\n\n","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    FormGroupSelect,\n    makeSubmitHandler,\n    onChangeHandler\n} from \"./formHelpers\";\n\nconst initialState = {\n    \"type\": \"DebugAction\",\n    \"interval\": 5 * 60,\n    \"name\": \"\",\n    \"url\": \"\",\n    \"retain_for\": 90 * daysToSeconds};\n\n\nexport function ActionForm({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=(active)=>{}, ...props}) {\n\n    const handleSubmit = makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, \"actions\")\n\n    function testAction() {\n        let message = `${state.name}: Test message :)`;\n        fetch(urlPrefix + \"/actions/\" + state.id + \"/update\", {\n            method: \"post\",\n            body: JSON.stringify({\n                message: message,\n                force_send: true\n            })\n        })\n    }\n\n    const stateProps = {state: state, setState: setState}\n\n    function pushoverInputs() {\n        return [\n            <FormGroup label={\"Api token:\"} name={\"api_token\"} key={\"api_token\"} {...stateProps}/>,\n            <FormGroup label={\"User key:\"} name={\"user_key\"} key={\"user_key\"} {...stateProps}/>,\n            <FormGroup label={\"Device:\"} name={\"device\"} key={\"device\"} {...stateProps}/>,\n        ]\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FormGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={onChangeHandler(state, setState)}\n                    disabled={editMode}\n                >\n                    <option value={\"DebugAction\"}>DebugAction - Debug print statement</option>\n                    <option value={\"PushoverAction\"}>Pushover - Sends a push notification</option>\n                </FormGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FormGroup\n                    label={\"Name:\"}\n                    name={\"name\"}\n                    {...stateProps}/>\n                <FormGroup\n                    label={\"Cooldown:\"}\n                    name={\"cooldown\"}\n                    type={\"number\"}\n                    suffix={\"minutes\"}\n                    factor={60}\n                    {...stateProps}/>\n                <FormGroup\n                    label={\"Retain for:\"}\n                    name={\"retain_for\"}\n                    type={\"number\"}\n                    suffix={\"days\"}\n                    factor={daysToSeconds}\n                    {...stateProps}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"PushoverAction\" ? (\n                    pushoverInputs()\n                ) : \"\" }\n            </div>\n\n            <ApplyCreateCloseButtons editMode={editMode} handleClose={handleClose} label={\"Action\"}/>\n        </form>\n    )\n}\n\n\n","import React, {useCallback, useEffect, useState} from \"react\";\n\nexport const Modal = ({handleClose, show, children, title}) => {\n    function maybeClose(event) {\n        if (event.target.classList.contains(\"modal\")) {\n            handleClose()\n        }\n    }\n\n    const escFunction = useCallback((event) => {\n        if (event.key === \"Escape\") {\n            handleClose()\n        }\n    }, [handleClose]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", escFunction, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [escFunction]);\n\n    return (\n        <div className={`modal fade ${show ? \"show\" : \"\"}`}\n             tabIndex=\"-1\"\n             role=\"dialog\"\n             style={{\n                 \"display\": show ? \"block\" : \"none\",\n                 \"backgroundColor\": \"rgba(1,1,31,0.22)\",\n                 backdropFilter: \"blur(8px)\",\n                 overflowY: \"auto\"\n             }}\n             onClick={(event) => maybeClose(event)}\n        >\n            <div className=\"modal-dialog modal-xl\" role=\"document\">\n                <div className=\"modal-content shadow\">\n                    <div className=\"modal-header bg-light\">\n                        <h5 className=\"modal-title\">{title}</h5>\n                        <button type=\"button\" className=\"close\" onClick={() => {\n                            handleClose()\n                        }}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport function ListItemSelect(props) {\n    return (\n        <li\n            className={`list-group-item list-group-item-action ${props.active ? \"active\" : \"\"}`}\n            style={{cursor: \"default\"}}\n            onClick={props.onClick}\n        >\n            <span style={{width: \"48px\"}}>{props.iconLeft}</span>\n            {props.children}\n            <span className={\"float-right\"}>{props.iconRight}</span>\n        </li>\n    )\n}\n\n\nexport function ListItemCollapse(props) {\n    let [show, setShow] = useState(false);\n\n    return (\n        [\n            <li className={\"list-group-item list-group-item-action\"}\n                onClick={() => setShow(!show)}\n                style={{cursor: \"pointer\", borderBottom: \"none\"}}\n                key={\"1\"}\n            >\n                <i className={\"fas fa-chevron-right fa-sm mr-2\"} style={show ? {transform: \"rotate(90deg)\"} : {}}/>\n                <span className=\"text-monospace\">\n                    {props.label}\n                </span>\n                <span className=\"float-right font-weight-light\">\n                    {props.value}\n                </span>\n            </li>,\n            <li className={`list-group-item custom-collapse ${show ? \"show\" : \"\"} py-0`} key={\"2\"}>\n                <div className={\"py-3\"}>\n                    {show ? props.children : null}\n                </div>\n            </li>\n        ]\n    )\n}","import React, {useEffect, useState} from \"react\"\nimport {ListItemCollapse} from \"./Basics\";\nimport moment from \"moment\";\n\nfunction truncate(str) {\n    if (str !== null) {\n        str = str.toString()\n        return str.length < 40 ? str : `${str.slice(0, 37)}...`\n    }\n}\n\nfunction minuteStr(x) {\n    return `${Math.round(x / 60 * 10) / 10} minute${x !== 60 ? \"s\" : \"\"}`\n}\n\nlet knownConverters = {\n    elapsed: x => {\n        return `${Math.round(x * 1000)} ms`\n    },\n    time: x => {\n        return new Date(x * 1000).toLocaleString()\n    },\n    percentage: x => {\n        return `${Math.round(x * 10) / 10} %`\n    },\n    seconds: x => {\n        return `${Math.round(x)} (${Math.round(10 * x / 60 / 60 / 24) / 10} days)`\n    },\n    url: x => {\n        return (\n            <a href={decodeURIComponent(x)} target=\"_blank\" rel=\"noopener noreferrer\">\n                { decodeURIComponent(x) }\n            </a>\n        )\n    },\n    interval: minuteStr,\n    cooldown: minuteStr,\n    type: x => {\n        return <kbd className={\"bg-light text-dark\"}>\n            {x}\n        </kbd>\n    },\n    retain_for: x => {\n        return `${Math.round(x / 24 / 60 / 60 * 10) / 10} days`\n    },\n    expression: x => {\n        return <div className={\"text-monospace\"}>{x}</div>\n    },\n    broken: x => {\n        return !x ? <span className={\"fas fa-check text-success\"}/> : <span className={\"fas fa-times text-danger\"}/>\n    },\n    last_notify: x => {\n        return x < 0 ?\n            \"never\" :\n            `${new Date(x * 1000).toLocaleString()} (${moment(x * 1000).fromNow()})`\n    },\n    queued_messages: x => {\n        return x.map((item, idx) => {\n            return <div key={idx}>\n                {item}\n            </div>\n        })\n    },\n    action_ids: x => {\n        return x.map((item, idx) => {\n            return <kbd key={idx}>\n                {item}\n            </kbd>\n        })\n    },\n}\nlet converters = new Proxy(knownConverters, {\n    get: (target, name) =>\n        name in target ? target[name] : truncate\n})\n\n\nlet ignoreList = [\"last_reading\", \"last_update\", \"kwargs\", \"enabled\", \"id\", \"name\"]\n\nlet knownLabelConversions = {\n    \"url\": \"Target URL\",\n    \"retain_for\": \"Retain readings for\",\n    \"last_notify\": \"Last notified\",\n    \"queued_messages\": \"Queued messages\",\n    \"api_token\": \"Api token\",\n    \"user_key\": \"User key\",\n    \"action_ids\": \"Actions\",\n}\nlet labelConversion = new Proxy(knownLabelConversions, {\n    get: (target, name) =>\n        name in target ? target[name] : <span className={\"text-capitalize\"}>{name}</span>\n})\n\n\nexport function listItemsLastReading(lastReading) {\n    if (lastReading == null) return (\n        <i className={\"spinner-grow spinner-grow-lg text-secondary mx-auto my-4\"}/>\n    )\n\n    let listItems = Object.keys(lastReading).map(function (key) {\n        return <ListItemCollapse\n            key={key}\n            label={key}\n            value={converters[key](lastReading[key])}\n        >\n            {lastReading[key]}\n        </ListItemCollapse>\n    });\n    return (\n        listItems\n    )\n}\n\n\nfunction AttributeRow({label, children}) {\n    return (\n        <li className={\"list-group-item px-0\"}>\n            <div className={\"row\"}>\n                <div className={\"col-3 h5 text-secondary m-0\"}>\n                    {label}\n                </div>\n                <div className={\"col-9\"}>\n                    {children}\n                </div>\n            </div>\n        </li>\n    )\n}\n\n\nexport function DetailView({stateManager, FormView, children, ...props}) {\n    let [updating, setUpdating] = useState(false)\n\n    function id() {\n        return stateManager.state().active\n    }\n\n    useEffect(() => {\n        stateManager.item().last_reading == null && stateManager.updateItem(id())\n    }, [id()])\n\n\n    function refresh() {\n        if (updating) {return}\n        setUpdating(true)\n        stateManager.refreshItem(id())\n            .then(() => {setUpdating(false)})\n    }\n\n    function attributeRows(attributes) {\n        let statefulConverters = {\n            variables: x => {\n                return x.map((variable, idx) => {\n                    let sensorName = variable.id\n                    try {\n                        sensorName = props.sensorManager.items().find(s => s.id === variable.id).name\n                    } catch (e) {}\n\n                    return <div className={\"text-monospace text-large\"} key={idx}>\n                        <code className={\"\"}>{variable.variable}</code> = <kbd>\n                            {sensorName}\n                        </kbd>.\n                        <kbd>{variable.channel}</kbd>\n                        [<kbd>{variable.row}</kbd>]\n                    </div>\n                })\n            }\n        }\n\n        return (\n            <ul className=\"list-group list-group-flush\">\n                {Object.entries(attributes).map(entry => {\n                    let key = entry[0]\n                    let value = entry[1]\n                    return (value != null && value !== \"\" && !(ignoreList.includes(key))) && (\n                        <AttributeRow label={labelConversion[key]} key={key}>\n                            { key in statefulConverters ? statefulConverters[key](value) : converters[key](value)}\n                        </AttributeRow>\n                    )\n                })}\n            </ul>\n        )\n    }\n\n    function renderButtons() {\n        return ([\n            <span className={\"float-right\"} key={\"buttons\"}>\n                <button\n                    className={\"btn btn-light mr-2\"}\n                    onClick={() => refresh()}\n                    disabled={stateManager.activeState().editMode}\n                >\n                    {updating ?\n                        <i className={\"spinner-border spinner-border-sm\"}/> :\n                        <i className={\"fa fa-sync\"}/>}\n                </button>\n                <button\n                    className={\"btn btn-light mr-2\"}\n                    onClick={() => stateManager.setActiveState({editMode: !stateManager.activeState().editMode})}\n                >\n                    <i className={\"fa fa-edit\"}/>\n                </button>\n                <button\n                    className={\"btn btn-light\"}\n                    onClick={() => stateManager.deleteItem(id())}\n                >\n                    <i className={\"fa fa-trash text-danger\"}/>\n                </button>\n            </span>,\n            <div className={\"mb-4\"} key={\"spacer\"}/>\n            ]\n        )\n    }\n\n    function renderDetail() {\n        return (\n            <div key={\"detail\"}>\n                { attributeRows(stateManager.item()) }\n                { children }\n            </div>\n        )\n    }\n\n    function setFormState(state) {\n        stateManager.setActiveState({\n            formState: {...stateManager.activeState().formState, ...state}\n        })\n    }\n\n    function renderForm() {\n        return <FormView key={\"form\"}\n            state={{...stateManager.item(), ...stateManager.activeState().formState}}\n            setState={setFormState}\n            editMode={true}\n            handleClose={() => {stateManager.setActiveState({editMode: false, formState: {}})}}\n            {...props}\n        />\n    }\n\n    if (stateManager.activeState().editMode === true) {\n        return ([\n            renderButtons(),\n            renderForm()\n        ])\n    } else {\n        return ([\n            renderButtons(),\n            renderDetail()\n        ])\n    }\n}","import { urlPrefix } from './settings.js';\n\n\nexport class eventManager {\n    constructor() {\n        this.subscriptions = []\n        this.listen()\n    }\n\n\n    subscribe(obj) {\n        this.subscriptions.push(obj)\n    }\n\n\n    unsubscribe(obj) {\n        let idx = this.subscriptions.indexOf(obj)\n        delete this.subscriptions[idx]\n    }\n\n\n    handleEvent(event) {\n        this.subscriptions.forEach(obj => {\n            try {\n                obj.eventHandler(event)\n            }\n            catch (e) {\n                console.log(e)\n            }\n        })\n    }\n\n\n    listen () {\n        let that = this;\n\n        let source = new EventSource(urlPrefix + \"/events\");\n        source.onmessage = function (e) {\n            try {\n                let data = JSON.parse(e.data)\n                that.handleEvent(data)\n            } catch (error) {}\n        }\n    }\n\n}","import React, {useEffect} from \"react\";\nimport {ListItemSelect} from \"./Basics\";\n\nexport function ListView({stateManager}) {\n    useEffect(() => {\n        if (stateManager.state().active == null && stateManager.items()[0] != null) {\n            stateManager.setState({\n                active:  stateManager.items()[0].id\n            })\n        }\n    }, [stateManager.state().active, stateManager.items()])\n\n    function ItemList(items) {\n        if (items == null) return null\n\n        return items.map(item => {\n            return <ListItemSelect\n                key={item.id}\n                onClick={() => stateManager.setState({ active: item.id })}\n                active={stateManager.state().active === item.id}\n                iconRight={ <div className={\"badge badge-light font-weight-normal\"}>{ item.type }</div> }\n            >\n                { item.name }\n            </ListItemSelect>\n        });\n    }\n\n    return [\n        <li className={`list-group-item list-group-item-action ${stateManager.state().active === \"form\" ? \"active\" : \"\"}`}\n            key={\"button\"}\n            style={{cursor: \"default\"}}\n            onClick={() => stateManager.setState({ active: \"form\" })}\n        >\n            <h3 className={\"mb-1\"}>\n                New {stateManager.itemLabel}\n                <span className={\"float-right\"}>\n                    <i className={\"fa fa-xs fa-plus\"}/>\n                </span>\n            </h3>\n        </li>,\n\n        <input className={\"bg-light input-group-sm list-group-item w-100 icon-placeholder py-2\"}\n               placeholder=\"&#xf002; Filter\"\n               value={stateManager.state().filter}\n               key={\"Filter\"}\n               onChange={event => stateManager.setState({filter: event.target.value})}\n        />,\n\n        ItemList( stateManager.items().filter(item => {\n            let filter = (stateManager.state().filter || \"\").toLowerCase()\n            return Object.keys(item).some(key => {\n                try {\n                    return item[key].toLowerCase().includes(filter)\n                } catch (e) {\n                    return false\n                }\n            })\n        }))\n    ]\n\n}\n\n\n\n","import React, {useEffect} from \"react\";\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-zoom'\n\n// React.memo should prevent the rerendering except, if the props change.\nexport const LineChart = React.memo(function LineChart(props) {\n    function makeLineChartData(data) {\n        return {\n            labels: data.map((x, i) => i),\n            datasets: [{\n                label: 'My First dataset',\n                borderColor: \"#fa9121\",\n                backgroundColor: \"#fa912111\",\n                fill: true,\n                data: data,\n                hidden: true,\n            }, {\n                label: 'My Second dataset',\n                borderColor: \"#21af61\",\n                backgroundColor: \"#21af61\",\n                fill: false,\n                data: data.map(x => x * 1.2),\n            }]\n        }\n    }\n\n    let options = {\n        responsive: true,\n        hoverMode: 'index',\n        stacked: false,\n        title: {\n            display: true,\n            text: props.title || \"\"\n        },\n        scales: {\n            yAxes: [{\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'left',\n                id: 'y-axis-1',\n            }, {\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: false,\n                position: 'right',\n                id: 'y-axis-2',\n\n                // grid line settings\n                gridLines: {\n                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                },\n            }],\n            xAxes: [{\n                type: 'time',\n            }, ],\n        },\n        plugins: {\n            zoom: {\n                pan: {\n                    enabled: false,\n                },\n                zoom: {\n                    enabled: true,\n                    drag: true,\n                    mode: 'x',\n                    speed: 1,\n                    threshold: 0.1,\n                }\n            }\n        },\n    }\n\n    let chartExists = false\n    useEffect(() => {\n        if (!chartExists) {\n            makeChart()\n            chartExists = true\n        }\n    }, [props.data]);\n\n    function makeChart() {\n        let chart = Chart.Line(chartRef.current, {\n            data: makeLineChartData(props.data),\n            options: options\n        })\n        chartRef.current.ondblclick = () => {\n            chart.resetZoom()\n        }\n    }\n\n    let chartRef = React.createRef();\n\n    return <canvas ref={chartRef}/>\n})","import {stateManager} from \"./state\";\nimport {SensorFrom} from \"./SensorForms\";\nimport {TriggerFrom} from \"./TriggerForms\";\nimport {ActionForm} from \"./ActionForms\";\nimport React, {useState} from \"react\";\nimport {DetailView} from \"./DetailView\";\nimport {eventManager} from \"./events\";\nimport {ListView} from \"./ListView\";\nimport {Sensor} from \"./Sensor\";\nimport {Trigger} from \"./Trigger\";\nimport {Action} from \"./Action\";\n\nfunction Sidebar(props) {\n    return (\n        <div className={\"col-md-4 col-lg-3 px-0 bg-secondary border-right shadow\"}>\n            <ul className={\"list-group list-group-flush flex-column\"}>\n                {props.children}\n            </ul>\n        </div>\n    )\n}\n\nfunction Content(props) {\n    return (\n        <div className={\"col-md-8 col-lg-9 vh-100 py-3 mx-0\"} style={{overflow: \"scroll\"}}>\n            {props.children}\n        </div>\n    )\n}\n\nfunction ContentView({FormView, stateManager, children, ...props}) {\n    function setFormState(state) {\n        stateManager.setState({\n            formState: {...stateManager.state().formState, ...state}\n        })\n    }\n\n    function renderContent() {\n        if (stateManager.state().active === \"form\") {\n            return <FormView\n                state={stateManager.state().formState}\n                setState={setFormState}\n                setActive={active => {\n                    stateManager.setState({active: active})\n                }}\n                {...props}\n            />\n        } else {\n            return <DetailView\n                stateManager={stateManager}\n                FormView={FormView}\n                {...props}>\n                {children}\n            </DetailView>\n        }\n    }\n\n    return (\n        <div>\n            <span className={\"h2 text-dark mb-4\"}>\n                {stateManager.item().name || \"\"}\n            </span>\n            {renderContent()}\n        </div>\n    )\n}\n\n// create event listener globally\nlet events = new eventManager()\nlet itemInfo = {\n    \"sensors\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Sensor\",\n            basicEventHandlerItemPrefix: \"sensor\",\n            fetchUrlPath: \"/sensors\",\n        }),\n        form: SensorFrom,\n        moreInfo: Sensor,\n    },\n    \"triggers\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Trigger\",\n            basicEventHandlerItemPrefix: \"trigger\",\n            fetchUrlPath: \"/triggers\",\n        }),\n        form: TriggerFrom,\n        moreInfo: Trigger,\n    },\n    \"actions\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Action\",\n            basicEventHandlerItemPrefix: \"action\",\n            fetchUrlPath: \"/actions\",\n        }),\n        form: ActionForm,\n        moreInfo: Action,\n    },\n}\n\nexport function App() {\n    let [state, _setState] = useState({})\n\n    function setState(newState) {\n        _setState({...state, ...newState})\n    }\n\n    Object.keys(itemInfo).map(key => {\n        itemInfo[key].manager.initializeGlobalState(state, setState)\n    })\n\n    let [active, setActive] = useState(\"sensors\")\n\n    function makeTabs() {\n        let icons = {\n            \"sensors\": <span className={`fas fa-ruler-vertical mr-2`}/>,\n            \"triggers\": <span className={`fas fa-calculator mr-2`}/>,\n            \"actions\": <span className={`fas fa-bullseye mr-2`}/>,\n        }\n        return Object.keys(itemInfo).map(key => {\n            return (\n                <button type=\"button\"\n                        className={`btn btn-light px-1 text-capitalize ${active === key ? \"active\" : \"\"}`}\n                        key={key}\n                        onClick={() => {\n                            setActive(key)\n                        }}>\n                    {icons[key]}<br/>{key}\n                </button>\n            )\n        })\n    }\n\n    let manager = itemInfo[active].manager\n    let MoreInfoView = itemInfo[active].moreInfo\n\n    return (\n        <div className={\"container-fluid\"}>\n            <div className={\"row\"}>\n                <Sidebar>\n                    <li className={\"list-group-item bg-secondary p-2\"}>\n                        <div className=\"btn-group w-100\">\n                            {makeTabs()}\n                        </div>\n                    </li>\n\n                    <ListView stateManager={manager}/>\n                </Sidebar>\n\n                <Content>\n                    <ContentView\n                        stateManager={manager}\n                        FormView={itemInfo[active].form}\n                        sensorManager={itemInfo.sensors.manager}\n                        actionManager={itemInfo.actions.manager}>\n                            <MoreInfoView stateManager={manager}/>\n                    </ContentView>\n                </Content>\n            </div>\n        </div>\n    )\n}","import React from \"react\"\nimport {listItemsLastReading} from \"./DetailView\";\nimport {LineChart} from \"./Chart\";\nimport {urlPrefix} from \"./settings\";\n\n\nexport function Sensor({stateManager}) {\n\n    let activeDetailView = stateManager.state().activeDetailView || 0\n    const setActiveDetailView = active => {\n        stateManager.setState({activeDetailView: active})\n    }\n\n    function getChartData() {\n        let url = `${urlPrefix}/query/${stateManager.item().id}?row=elapsed`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                console.log(res)\n                stateManager.setActiveState({chartData: res})\n            })\n    }\n\n    return (\n        <div className={\"mt-3\"}>\n            { stateManager.item().type === \"HTML\" && (\n                <button\n                    className={\"btn btn-sm btn-outline-primary mb-2\"}\n                    onClick={() => {\n                        let wnd = window.open(stateManager.item().url)\n                        wnd.document.write(stateManager.item().last_reading.content)\n                    }}>\n                    <span className={\"fa fa-external-link-alt mr-2\"}/>\n                    Open HTML content of last reading in new window\n                </button>\n            )}\n            <div className=\"btn-group mb-2 w-100\">\n                <button\n                    type=\"button\"\n                    className={`btn btn-light ${activeDetailView === 0 ? \"active\" : \"\"}`}\n                    onClick={() => {setActiveDetailView(0)}}>\n                    <span className={\"fas fa-database mr-2\"}/>\n                    Raw Data\n                </button>\n                <button\n                    type=\"button\"\n                    className={`btn btn-light ${activeDetailView === 1 ? \"active\" : \"\"}`}\n                    onClick={() => {setActiveDetailView(1)}}>\n                    <span className={\"fas fa-chart-area mr-2\"}/>\n                    History\n                </button>\n            </div>\n\n            {activeDetailView === 0 &&\n            <div>\n                <ul className={\"list-group\"}>\n                    {listItemsLastReading(stateManager.item().last_reading)}\n                </ul>\n                <span className={\"text-muted font-weight-normal\"}>data from last reading</span>\n            </div>\n            }\n\n            {activeDetailView === 1 &&\n                <div>\n                    Work in progress\n                    {//<LineChart data={stateManager.activeState().chartData || [0, 2, 3, 1, 4, 2, 4, 2, 1]}/>\n                    }\n                </div>\n            }\n\n        </div>\n    )\n}","import React from \"react\"\nimport {listItemsLastReading} from \"./DetailView\";\n\n\nexport function Trigger({stateManager}) {\n    return (\n        <div className={\"mt-3\"}>\n            <h4>\n                Last Check\n            </h4>\n            <ul className={\"list-group\"}>\n                {listItemsLastReading(stateManager.item().last_reading)}\n            </ul>\n        </div>\n    )\n}","import React from \"react\"\nimport {listItemsLastReading} from \"./DetailView\";\n\n\nexport function Action({stateManager}) {\n    return (\n        <div className={\"mt-3\"}>\n            <h4>\n                Last Message\n            </h4>\n            <ul className={\"list-group\"}>\n                {listItemsLastReading(stateManager.item().last_reading)}\n            </ul>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './custom.css'\nimport {App} from \"./AppView\";\n//import './bootstrap-dark/bootstrap-dark.scss' import {App} from \"./AppView\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n          <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}