{"version":3,"sources":["settings.js","Basics.js","SensorForms.js","DetailView.js","Sensor.js","ListDetailView.js","SensorView.js","events.js","AppView.js","TriggerForms.js","Trigger.js","TriggerView.js","ActionForms.js","Action.js","ActionView.js","index.js"],"names":["urlPrefix","Modal","handleClose","show","children","title","escFunction","useCallback","event","key","useEffect","document","addEventListener","removeEventListener","className","tabIndex","role","style","backdropFilter","overflowY","onClick","target","classList","contains","maybeClose","type","aria-hidden","ListItemSelect","props","active","cursor","width","iconLeft","iconRight","FromGroupSelect","label","placeholder","onChange","value","name","disabled","FromGroup","list","suffix","ListItemCollapse","useState","setShow","borderBottom","transform","SensorFrom","initialState","state","setState","editMode","handleSetState","newState","nativeEvent","onSubmit","preventDefault","data","interval","retain_for","fetch","id","method","body","JSON","stringify","then","res","e","borderRight","url","truncate","str","toString","length","slice","converters","Proxy","elapsed","x","Math","round","time","Date","toLocaleString","percentage","seconds","href","decodeURIComponent","rel","expression","broken","last_notify","moment","fromNow","queued_messages","map","item","idx","get","blacklist","labelConversion","listItemsLastReading","lastReading","Object","keys","AttributeRow","overflow","DetailView","hideModal","showModal","updating","itemLabel","fetchUrlPath","this","json","last_reading","out","globalState","find","obj","newItem","items","findIndex","setGlobalState","setItem","prevProps","prevState","snapshot","update","attributes","statefulConverters","variables","sensorName","s","channel","row","entries","entry","includes","renderFormView","refresh","delete","attributeRows","renderSubclassed","React","Component","Sensor","window","open","write","content","ListDetailView","filter","basicEventHandlerItemPrefix","setItems","message","newIdx","filtered","index","updateItem","eventManager","subscribe","unsubscribe","borderBottomLeftRadius","borderBottomRightRadius","height","ItemList","toLowerCase","some","renderDetailView","SensorView","subscriptions","listen","push","indexOf","forEach","eventHandler","console","log","that","EventSource","onmessage","parse","handleEvent","error","MainPills","initialActive","reloadContent","setActive","AddRowButton","InputRow","handleRemove","handleChange","sensorOptions","setSensorOptions","numberUpdating","setNumberUpdating","setLastReading","incrementNumberUpdating","inc","n","updateChannelList","maxWidth","variable","emptyInputRow","defaultInitialState","action_ids","TriggerFrom","initial","initialInputRows","inputRows","setInputRows","expressionMessage","setExpressionMessage","expressionError","setExpressionError","dataset","factor","getVariables","evaluateExpression","data-factor","newRows","Trigger","TriggerView","ActionForm","api_token","user_key","device","force_send","Action","ActionView","events","App","_setState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aaacc18a.chunk.js","sourcesContent":["// dev\nexport let urlPrefix = \"http://127.0.0.1:5000\";\n\n// build\n// export let urlPrefix = \".\";","import React, {useCallback, useEffect, useState} from \"react\";\n\nexport const Modal = ({handleClose, show, children, title}) => {\n    function maybeClose(event) {\n        if (event.target.classList.contains(\"modal\")) {\n            handleClose()\n        }\n    }\n\n    const escFunction = useCallback((event) => {\n        if (event.key === \"Escape\") {\n            handleClose()\n        }\n    }, [handleClose]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", escFunction, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [escFunction]);\n\n    return (\n        <div className={`modal fade ${show ? \"show\" : \"\"}`}\n             tabIndex=\"-1\"\n             role=\"dialog\"\n             style={{\n                 \"display\": show ? \"block\" : \"none\",\n                 \"backgroundColor\": \"rgba(1,1,31,0.22)\",\n                 backdropFilter: \"blur(8px)\",\n                 overflowY: \"auto\"\n             }}\n             onClick={(event) => maybeClose(event)}\n        >\n            <div className=\"modal-dialog modal-xl\" role=\"document\">\n                <div className=\"modal-content shadow\">\n                    <div className=\"modal-header bg-light\">\n                        <h5 className=\"modal-title\">{title}</h5>\n                        <button type=\"button\" className=\"close\" onClick={() => {\n                            handleClose()\n                        }}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport function ListItemSelect(props) {\n    return (\n        <li\n            className={`list-group-item list-group-item-action ${props.active ? \"active\" : \"\"}`}\n            style={{cursor: \"default\"}}\n            onClick={props.onClick}\n        >\n            <span style={{width: \"48px\"}}>{props.iconLeft}</span>\n            {props.children}\n            <span className={\"float-right\"}>{props.iconRight}</span>\n        </li>\n    )\n}\n\nexport function FromGroupSelect(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <select\n                    className=\"form-control\"\n                    placeholder={props.placeholder || \"\"}\n                    onChange={props.onChange}\n                    value={props.value}\n                    name={props.name}\n                    disabled={props.disabled}\n                >\n                    {props.children}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport function FromGroup(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <input type={props.type || \"text\"}\n                       className=\"form-control\"\n                       placeholder={props.placeholder || \"\"}\n                       onChange={props.onChange}\n                       value={props.value}\n                       list={props.list || \"\"}\n                       name={props.name}\n                       disabled={props.disabled}\n                />\n                {\"suffix\" in props ? (\n                    <div className=\"input-group-append\">\n                        <span className=\"input-group-text\">{props.suffix}</span>\n                    </div>\n                ) : \"\"}\n            </div>\n        </div>\n    )\n}\n\n\nexport function ListItemCollapse(props) {\n    let [show, setShow] = useState(false);\n\n    return (\n        [\n            <li className={\"list-group-item list-group-item-action\"}\n                onClick={() => setShow(!show)}\n                style={{cursor: \"pointer\", borderBottom: \"none\"}}\n                key={\"1\"}\n            >\n                <i className={\"fas fa-chevron-right fa-sm mr-2\"} style={show ? {transform: \"rotate(90deg)\"} : {}}/>\n                <span className=\"text-monospace\">\n                    {props.label}\n                </span>\n                <span className=\"float-right font-weight-light\">\n                    {props.value}\n                </span>\n            </li>,\n            <li className={`list-group-item custom-collapse ${show ? \"show\" : \"\"} py-0`} key={\"2\"}>\n                <div className={\"py-3\"}>\n                    {show ? props.children : null}\n                </div>\n            </li>\n        ]\n    )\n}","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {FromGroup, FromGroupSelect} from \"./Basics\";\n\n\nexport function SensorFrom(props) {\n    const initialState = {\"type\": \"HTML\", \"interval\": \"5\", \"name\": \"\", \"url\": \"\", \"retain_for\": \"90\",\n        ...props.initialState};\n    let [state, setState] = useState(initialState)\n\n    let editMode = \"editMode\" in props ? props.editMode : false\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        let data = {\n            ...state,\n            \"interval\": state.interval * 60,\n            \"retain_for\": state.retain_for * 24 * 60 * 60,\n        }\n\n        if (editMode) {\n            // edit sensor\n            fetch(urlPrefix + \"/sensors/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(data)\n            })\n        } else {\n            // new sensor\n            fetch(urlPrefix + \"/sensors\", {\n                method: \"post\",\n                body: JSON.stringify(data)\n            })\n                .then(res => {\n                    setState(initialState)\n                })\n        }\n\n        try {\n            props.handleClose()\n        } catch (e) {}\n    }\n\n    function handleSetState(event) {\n        let newState = {};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        setState({\n            ...state,\n            ...newState\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FromGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={handleSetState}\n                    disabled={editMode}\n                >\n                    <option value={\"HTML\"}>HTML - Grabs HTTP response from a URL</option>\n                    <option value={\"CPUPercentage\"}>CPUPercentage - Host system CPU usage</option>\n                    <option value={\"RAMPercentage\"}>RAMPercentage - Host system memory usage</option>\n                    <option value={\"Uptime\"}>Uptime - Host system uptime</option>\n                </FromGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FromGroup label={\"Name:\"}\n                           name={\"name\"}\n                           value={state.name}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Update interval:\"}\n                           type={\"number\"}\n                           name={\"interval\"}\n                           placeholder={\"5\"}\n                           suffix={\"minutes\"}\n                           value={state.interval}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Retain for:\"}\n                           type={\"number\"}\n                           name={\"retain_for\"}\n                           placeholder={\"90\"}\n                           suffix={\"days\"}\n                           value={state.retain_for}\n                           onChange={handleSetState}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"HTML\" ? (\n                    <FromGroup label={\"Target URL:\"}\n                               type={\"text\"}\n                               name={\"url\"}\n                               value={state.url}\n                               onChange={handleSetState}/>\n                ) : \"\" }\n            </div>\n\n            <div className={\"col-lg-12\"}>\n                <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                    {editMode ? \"Apply\" : \"Create Sensor\"}\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\n","import React from \"react\"\nimport {urlPrefix} from \"./settings\"\nimport {ListItemCollapse, Modal} from \"./Basics\";\nimport moment from \"moment\";\n\nfunction truncate(str) {\n    if (str !== null) {\n        str = str.toString()\n        return str.length < 30 ? str : `${str.slice(0, 27)}...`\n    }\n}\n\nlet knownConverters = {\n    elapsed: x => {\n        return `${Math.round(x * 1000)} ms`\n    },\n    time: x => {\n        return new Date(x * 1000).toLocaleString()\n    },\n    percentage: x => {\n        return `${Math.round(x * 10) / 10} %`\n    },\n    seconds: x => {\n        return `${Math.round(x)} (${Math.round(10 * x / 60 / 60 / 24) / 10} days)`\n    },\n    url: x => {\n        return (\n            <a href={decodeURIComponent(x)} target=\"_blank\" rel=\"noopener noreferrer\">\n                { decodeURIComponent(x) }\n            </a>\n        )\n    },\n    interval: x => {\n        return `${Math.round(x / 60 * 10) / 10} minutes`\n    },\n    retain_for: x => {\n        return `${Math.round(x / 24 / 60 / 60 * 10) / 10} days`\n    },\n    expression: x => {\n        return <div className={\"text-monospace\"}>{x}</div>\n    },\n    broken: x => {\n        return !x ? <span className={\"fas fa-check text-success\"}/> : <span className={\"fas fa-times text-danger\"}/>\n    },\n    last_notify: x => {\n        return x < 0 ?\n            \"never\" :\n            `${new Date(x * 1000).toLocaleString()} (${moment(x * 1000).fromNow()})`\n    },\n    queued_messages: x => {\n        return x.map((item, idx) => {\n            return <div key={idx}>\n                {item}\n            </div>\n        })\n    },\n}\nlet converters = new Proxy(knownConverters, {\n    get: (target, name) =>\n        name in target ? target[name] : truncate\n})\n\n\nlet blacklist = [\"last_reading\", \"last_update\", \"kwargs\", \"enabled\", \"id\", \"name\"]\n\nlet knownLabelConversions = {\n    \"url\": \"Target URL\",\n    \"retain_for\": \"Retain readings for\",\n    \"broken\": \"Working?\",\n    \"last_notify\": \"Last notified\",\n    \"queued_messages\": \"Queued messages\",\n}\nlet labelConversion = new Proxy(knownLabelConversions, {\n    get: (target, name) =>\n        name in target ? target[name] : <span className={\"text-capitalize\"}>{name}</span>\n})\n\n\nexport function listItemsLastReading(lastReading) {\n    if (lastReading == null) return null\n\n    let listItems = Object.keys(lastReading).map(function (key) {\n        return <ListItemCollapse\n            key={key}\n            label={key}\n            value={converters[key](lastReading[key])}\n        >\n            {lastReading[key]}\n        </ListItemCollapse>\n    });\n    return (\n        listItems\n    )\n}\n\n\nfunction AttributeRow({label, children}) {\n    return (\n        <div className={\"row mb-2\"}>\n            <div className={\"col-sm-4\"}>\n                <h5>\n                    { label }\n                </h5>\n            </div>\n            <div className={\"col-sm-8\"} style={{ overflow: \"hidden\" }}>\n                { children }\n            </div>\n        </div>\n    )\n}\n\n\nexport class DetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {updating: false, showModal: false}\n\n        // override these attributes\n        this.itemLabel = \"Item\"\n        this.fetchUrlPath = \"/item\"\n    }\n\n    // override me\n    renderFormView() {\n        return null\n    }\n\n    //override me\n    renderSubclassed() {\n        return null\n    }\n\n\n    refresh() {\n        let url = urlPrefix + `${this.fetchUrlPath}/${this.props.id}/update`\n        this.setState({ updating: true })\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setState({\n                    item: {\n                        ...this.item(),\n                        last_reading: data\n                    },\n                    updating: false\n                });\n            })\n    }\n\n    item() {\n        let out = this.props.globalState[this.itemLabel].find(obj => {\n            return obj.id === this.props.id\n        })\n        return out == null ? {} : out\n    }\n\n    setItem(newItem) {\n        let items = this.props.globalState[this.itemLabel]\n        let idx = items.findIndex(obj => obj.id === newItem.id)\n        items[idx] = newItem\n        // set new items list\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.props.setGlobalState(newState)\n    };\n\n    update() {\n        let url = urlPrefix + `${this.fetchUrlPath}/${this.props.id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem(data)\n            })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.id !== prevProps.id) {\n            if (this.item().last_reading == null) {\n                this.update()\n            }\n        }\n    }\n\n    delete() {\n        let url = urlPrefix + `${this.fetchUrlPath}/${this.props.id}`;\n        fetch(url, {\n            method: 'DELETE',\n            data: this.item()\n        });\n    }\n\n    hideModal = () => {\n        this.setState({ showModal: false });\n    };\n\n    attributeRows(attributes) {\n        let statefulConverters = {\n            variables: x => {\n                return Object.keys(x).map(key => {\n                    let obj = x[key]\n                    let sensorName = obj.id\n                    try {\n                        sensorName =  this.props.globalState[\"Sensor\"].find(s => s.id === obj.id).name\n                    } catch (e) {}\n\n                    return <div className={\"text-monospace text-large\"} key={key}>\n                        <code className={\"\"}>{key}</code> = <kbd>\n                            {sensorName}\n                        </kbd>.\n                        <kbd>{obj.channel}</kbd>\n                        [<kbd>{obj.row}</kbd>]\n                    </div>\n                })\n            }\n        }\n\n        if (attributes == null) return\n        return Object.entries(attributes).map(entry => {\n            let key = entry[0]\n            let value = entry[1]\n            return (value != null && value !== \"\" && !(blacklist.includes(key))) ? (\n                <AttributeRow label={labelConversion[key]} key={key}>\n                    { key in statefulConverters ? statefulConverters[key](value) : converters[key](value)}\n                </AttributeRow>\n            ) : null\n\n        })\n    }\n\n\n\n    render() {\n        // { this.state.name }\n        return (\n            <div className={\"card shadow\"}>\n                { this.state.showModal ? (\n                    <Modal title={\"Edit item\"}\n                           show={true}\n                           handleClose={this.hideModal}>\n                        { this.renderFormView() }\n                    </Modal>\n                ) : null}\n\n                <div className={\"card-header bg-dark py-3\"}>\n                    <h2 className={\"mb-0 text-white\"}>\n                        {this.item().name || \"\"}\n                        <span className={\"float-right\"}>\n                            <button\n                                className={\"btn btn-light mr-2\"}\n                                onClick={() => this.refresh()}\n                            >\n                                {this.state.updating ?\n                                    <i className={\"spinner-border spinner-border-sm\"}/> :\n                                    <i className={\"fa fa-sync\"}/>}\n                            </button>\n                            <button\n                                className={\"btn btn-light mr-2\"}\n                                onClick={() => this.setState({showModal: true})}\n                            >\n                                <i className={\"fa fa-edit\"}/>\n                            </button>\n                            <button\n                                className={\"btn btn-light\"}\n                                onClick={() => this.delete()}\n                            >\n                                <i className={\"fa fa-trash text-danger\"}/>\n                            </button>\n                        </span>\n                    </h2>\n                </div>\n                <div className={\"card-body\"}>\n                    { this.attributeRows(this.item()) }\n                    { this.renderSubclassed() }\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\"\nimport {urlPrefix} from \"./settings\"\nimport {DetailView, listItemsLastReading} from \"./DetailView\";\nimport {SensorFrom} from \"./SensorForms\";\n\n\nexport class Sensor extends DetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Sensor\"\n        this.fetchUrlPath = \"/sensors\"\n    }\n\n\n    renderFormView() {\n        return <SensorFrom handleClose={this.hideModal}\n                  editMode={true}\n                  initialState={{\n                      ...this.item(),\n                      interval: this.item().interval / 60,\n                      retain_for: this.item().retain_for / 24 / 60 / 60,\n                      url: decodeURIComponent(this.item().url)}}\n        />\n    }\n\n    renderSubclassed() {\n        return (\n        <div>\n            { this.item().type === \"HTML\" ? (\n                <button\n                    className={\"btn btn-sm btn-outline-primary\"}\n                    onClick={() => {\n                        let wnd = window.open(this.item().url)\n                        wnd.document.write(this.item().last_reading.content)\n                    }}>\n                    <span className={\"fa fa-external-link-alt mr-2\"}/>\n                    Open HTML content of last reading in new window\n                </button>\n            ) : null\n            }\n            <hr/>\n            <h5>\n                Channels\n                <span className={\"text-muted font-weight-normal\"}> (last reading)</span>\n            </h5>\n            <ul className={\"list-group\"}>\n                {listItemsLastReading(this.item().last_reading)}\n            </ul>\n        </div>\n        )\n    }\n\n\n}","import React from \"react\";\nimport {urlPrefix} from \"./settings\";\nimport {ListItemSelect, Modal} from \"./Basics\";\n\nexport class ListDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { active: \"\", showModal: false, filter: \"\" }\n\n        // override these attributes\n        this.itemLabel = \"Item\"\n        this.basicEventHandlerItemPrefix = \"item\"\n        this.fetchUrlPath = \"/items\"\n    }\n\n    // override me\n    renderDetailView() {\n        return null\n    }\n\n    // override me\n    renderFormView() {\n        return null\n    }\n\n\n    setItems(items) {\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.props.setGlobalState(newState)\n    }\n\n    items() {\n        if (this.props.globalState[this.itemLabel] == null) {\n            this.props.globalState[this.itemLabel] = []\n        }\n        return this.props.globalState[this.itemLabel]\n    }\n\n    updateItem(id) {\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                let items = this.props.globalState[this.itemLabel]\n                let idx = items.findIndex(obj => obj.id === id)\n                items[idx] = data\n                this.setItems(items)\n            })\n    }\n\n    eventHandler(event) {\n        if (event.message === this.basicEventHandlerItemPrefix + \" deleted\") {\n            // remove item from list\n            let id = event.data.id\n            let newIdx = 0\n            let filtered = this.items().filter((item, index) => {\n                if (item.id === id) {\n                    newIdx = index\n                }\n                return item.id !== id;\n            });\n\n            // delete item\n            this.setItems(filtered)\n\n            // focus on new item\n            if (this.items().length > 0) {\n                newIdx = this.items().length <= newIdx ? newIdx - 1 : newIdx\n                this.setState( {\n                    active: this.items()[newIdx].id\n                } )\n            }\n\n        } if (event.message === this.basicEventHandlerItemPrefix + \" added\") {\n            this.setItems([\n                ...this.items(),\n                event.data\n            ] )\n        } if (event.message === this.basicEventHandlerItemPrefix + \" edited\") {\n            // update the relevant item\n            this.updateItem(event.data.id)\n        } if (event.message === this.basicEventHandlerItemPrefix + \" updated\") {\n            let id = event.data.id\n            if (this.state.active === id) {\n                // update item if currently visible\n                this.updateItem(id)\n            } else {\n                // remove outdated reading if not visible\n                let items = this.items()\n                let idx = items.findIndex(obj => obj.id === id)\n                if (items[idx].last_reading) {\n                    items[idx].last_reading = null\n                }\n                this.setItems(items)\n            }\n        }\n    }\n\n    update() {\n        let url = urlPrefix + this.fetchUrlPath\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                this.setItems(res)\n                if (this.state.active === \"\" && this.items().length > 0) this.setState({\n                    active: \"id\" in this.items()[0] ? this.items()[0].id : \"\"\n                })\n            })\n    }\n\n    componentDidMount() {\n        this.update()\n        if (this.props.eventManager) {\n            this.props.eventManager.subscribe(this)\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.eventManager) {\n            this.props.eventManager.unsubscribe(this)\n        }\n    }\n\n    ItemList(items) {\n        if (items == null) return null\n\n        return items.map(item => {\n            return <ListItemSelect\n                key={item.id}\n                onClick={() => this.setState({ active: item.id })}\n                active={this.state.active === item.id}\n                iconRight={ <div className={\"badge badge-light font-weight-normal\"}>{ item.type }</div> }\n            >\n                { item.name }\n            </ListItemSelect>\n        });\n    }\n\n    hideModal = () => {\n        this.setState({ showModal: false });\n    };\n\n    render() {\n        return (\n            <div className={\"row\"}>\n                <div className={\"col-md-4 mb-3\"}>\n                    <Modal title={`Add New ${this.itemLabel}`}\n                           show={this.state.showModal}\n                           handleClose={this.hideModal}>\n                        {this.renderFormView()}\n                    </Modal>\n                    <ul className={\"list-group shadow\"}>\n                        <li className={\"bg-light list-group-item btn btn-outline-primary text-dark py-3\"}\n                            style={{\n                                cursor: \"pointer\",\n                                borderBottomLeftRadius: 0,\n                                borderBottomRightRadius: 0,\n                                 height: \"76px\" }}\n                            onClick={() => this.setState({ showModal: true })}\n                        >\n                            <span className={\"h2 align-bottom float-left mb-0\"}>\n                                New {this.itemLabel}\n                            </span>\n                            <h2 className={\"mb-0\"}>\n                                <span className={\"float-right\"}>\n                                    <i className={\"fa fa-xs fa-plus\"}/>\n                                </span>\n                            </h2>\n\n                        </li>\n                        <input className={\"bg-light input-group-sm list-group-item icon-placeholder py-2\"}\n                               placeholder=\"&#xf002; Filter\"\n                               value={this.state.filter}\n                               onChange={event => this.setState({filter: event.target.value})}\n                        />\n                        { this.ItemList( this.items().filter(item => {\n                            let filter = this.state.filter.toLowerCase()\n                            return Object.keys(item).some(key => {\n                                try {\n                                    return item[key].toLowerCase().includes(filter)\n                                } catch (e) {\n                                    return false\n                                }\n                            })\n                            }))\n                        }\n                    </ul>\n                </div>\n                <div className={\"col-md-8 mb-3\"}>\n                    {this.renderDetailView()}\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\n\n","import React from 'react';\nimport {SensorFrom} from \"./SensorForms\";\nimport {Sensor} from \"./Sensor\";\nimport {ListDetailView} from \"./ListDetailView\";\n\n\nexport class SensorView extends ListDetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Sensor\"\n        this.basicEventHandlerItemPrefix = \"sensor\"\n        this.fetchUrlPath = \"/sensors\"\n    }\n\n    renderDetailView() {\n        return <Sensor id={ this.state.active }\n                       eventManager={this.props.eventManager}\n                       globalState={this.props.globalState}\n                       setGlobalState={this.props.setGlobalState}\n        />\n    }\n\n    renderFormView() {\n        return <SensorFrom handleClose={this.hideModal} />\n    }\n}\n\n\n\n","import { urlPrefix } from './settings.js';\n\n\nexport class eventManager {\n    constructor() {\n        this.subscriptions = []\n        this.listen()\n    }\n\n\n    subscribe(obj) {\n        this.subscriptions.push(obj)\n    }\n\n\n    unsubscribe(obj) {\n        let idx = this.subscriptions.indexOf(obj)\n        delete this.subscriptions[idx]\n    }\n\n\n    handleEvent(event) {\n        this.subscriptions.forEach(obj => {\n            try {\n                obj.eventHandler(event)\n            }\n            catch (e) {\n                console.log(e)\n            }\n        })\n    }\n\n\n    listen () {\n        let that = this;\n\n        let source = new EventSource(urlPrefix + \"/events\");\n        source.onmessage = function (e) {\n            try {\n                let data = JSON.parse(e.data)\n                that.handleEvent(data)\n            } catch (error) {}\n        }\n    }\n\n}","import React, {useState} from \"react\";\n\nexport const MainPills = ({content, initialActive, reloadContent}) => {\n    let [active, setActive] = useState(initialActive)\n\n    function makeTabs() {\n        return Object.keys(content).map(key => {\n            return (\n                <li className={`nav-item bg-light`} key={key} onClick={() => {setActive(key)}}>\n                    <div className={`nav-link ${active === key ? \"active\" : \"\"} text-dark px-3`} style={{cursor: \"pointer\"}}>\n                        {key}\n                    </div>\n                </li>\n            )\n        })\n    }\n\n    function makeTabChildren() {\n        // reload content\n        if (reloadContent) {\n            return content[active]\n        }\n\n        // keep everything loaded\n        return (\n            <div className=\"tab-content\">\n                {Object.keys(content).map(key => {\n                    return (\n                        <div className={`tab-pane ${active === key ? \"active\" : \"\"}`} key={key}>\n                            { content[key] }\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <nav className=\"navbar navbar-light bg-light pb-0 px-0 mb-3\">\n                <div className={\"container\"}>\n                    <ul className=\"nav nav-tabs\">\n                        {makeTabs()}\n                    </ul>\n                </div>\n            </nav>\n            <div className={\"container\"}>\n\n                    { makeTabChildren() }\n\n            </div>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport {urlPrefix} from \"./settings\";\n\nlet daysToSeconds = 24 * 60 * 60\n\nfunction AddRowButton({onClick}) {\n    return (\n        <div className={\"row mt-1\"}>\n            <div className={\"pl-2\"} style={{width: \"48px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light mr-2\"} onClick={(e) => {\n                    e.preventDefault()\n                    if (onClick == null) return\n                    onClick()\n                }}>\n                    <span className={\"fa fa-plus\"} />\n                </button>\n            </div>\n        </div>\n    )\n}\n\n\nfunction InputRow({handleRemove, value, handleChange}) {\n    let [state, setState] = useState(value)\n    let [sensorOptions, setSensorOptions] = useState([])\n    let [numberUpdating, setNumberUpdating] = useState(0)\n    let [lastReading, setLastReading] = useState({time: 0})\n\n    function updateSensorList() {\n        let url = urlPrefix + `/sensors/`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                setSensorOptions(res)\n            })\n    }\n\n    function incrementNumberUpdating(inc=1) {\n        setNumberUpdating(n => {\n            return n + inc\n        });\n    }\n\n    function updateChannelList(id, row=state.row) {\n        let url = `${urlPrefix}/query/${id}?row=${row}`\n        incrementNumberUpdating()\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                if (res[0] != null) setLastReading(res[0])\n                incrementNumberUpdating(-1)\n            })\n    }\n\n    function onClickRemove(e) {\n        e.preventDefault()\n        handleRemove()\n    }\n\n    function onClickRefresh(e) {\n        e.preventDefault()\n        updateChannelList(state.id)\n    }\n\n    function onChange(event) {\n        event.preventDefault()\n        let newState = {...state};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        setState(newState)\n        handleChange(newState)\n        if (event.nativeEvent.target.name === \"id\") {\n            updateChannelList(event.nativeEvent.target.value)\n        }\n        if (event.nativeEvent.target.name === \"row\") {\n            updateChannelList(state.id, event.nativeEvent.target.value)\n        }\n    }\n\n    useEffect(() => {\n        setState(value);\n        updateSensorList()\n        if (value.id) updateChannelList(value.id)\n    }, [value.id]);\n\n    return (\n        <div className={\"row py-2\"}>\n            <div className={\"pl-2\"} style={{width: \"36px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light mr-2\"} onClick={onClickRemove}>\n                    <span className={\"fa fa-minus\"} />\n                </button>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"35%\"}}>\n                <select\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"Sensor\"\n                       name={\"id\"}\n                       value={ state.id }\n                       onChange={onChange}>\n                    <option value=\"\"/>\n                    { sensorOptions.map(item => {\n                        return <option key={item.id} value={item.id}>{item.name}</option>\n                    }) }\n                </select>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"35%\"}}>\n                <select\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"Channel\"\n                       name={\"channel\"}\n                       value={ state.channel }\n                       onChange={onChange}>\n                    { Object.keys(lastReading).map(item => {\n                        return <option key={item} value={item}>{item}</option>\n                    }) }\n                </select>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"20%\", maxWidth: \"90px\"}}>\n                <input type=\"number\"\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"-1\"\n                       name={\"row\"}\n                       value={ state.row }\n                       onChange={onChange}/>\n            </div>\n\n            <div className={\"col-12 mt-1\"} />\n\n            <div className={\"pl-2\"} style={{width: \"36px\"}}> </div>\n            <div className={\"pl-2\"} style={{width: \"70%\"}}>\n                <div className=\"input-group input-group-sm\">\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           placeholder=\"Variable name (can be used in Expression)\"\n                           name={\"variable\"}\n                           value={ state.variable }\n                           onChange={onChange}/>\n                    <div className=\"input-group-append w-50\">\n                        <div className=\"input-group-text w-100 bg-light\">\n                            <span className={\"text-truncate text-nowrap text-monospace\"}>\n                                = { lastReading[state.channel] }\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"20%\", maxWidth: \"90px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light w-100\"} onClick={onClickRefresh}>\n                    {numberUpdating > 0 ?\n                        <i className={\"spinner-border spinner-border-sm\"}/> :\n                        <i className={\"fa fa-sync\"}/>}\n                </button>\n            </div>\n\n        </div>\n    )\n}\n\nconst emptyInputRow = {channel: \"time\", row: -1, id:\"\", variable: \"t\"}\nconst defaultInitialState = {\n    name: \"New Trigger\",\n    retain_for: 90 * daysToSeconds,\n    expression: \"\",\n    variables: {\"t\": emptyInputRow},\n    action_ids: [],\n    message: \"\",\n}\n\nexport function TriggerFrom({editMode=false, handleClose, initialState=defaultInitialState}) {\n    let {variables, ...initial} = initialState\n    let [state, setState] = useState(initial)\n\n    let initialInputRows = Object.keys(variables).map(key => {\n        return {\n            ...variables[key],\n            variable: key,\n        }\n    })\n    let [inputRows, setInputRows] = useState(initialInputRows)\n\n    let [expressionMessage, setExpressionMessage] = useState(\"\")\n    let [expressionError, setExpressionError] = useState(false)\n\n    // evaluate expression when form is shown\n    useEffect(() => {\n        if (initialState.expression === \"\") return\n        evaluateExpression(initialState.expression, getVariables())\n    }, [initialState.expression]);\n\n    function reset() {\n        setExpressionMessage(\"\")\n        setExpressionError(\"\")\n        setInputRows(initialInputRows)\n        setState(initial)\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        let data = {\n            ...state,\n            variables: getVariables(),\n        }\n\n        if (editMode) {\n            // edit trigger\n            fetch(urlPrefix + \"/triggers/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(data)\n            })\n        } else {\n            // new trigger\n            fetch(urlPrefix + \"/triggers\", {\n                method: \"post\",\n                body: JSON.stringify(data)\n            })\n                .then(() => {\n                    reset()\n                })\n        }\n\n        try {\n            handleClose()\n        } catch (e) {}\n    }\n\n    function onChange(e) {\n        e.preventDefault()\n        let target = e.nativeEvent.target\n        let newState = {...state}\n        let value = target.value\n        if (target.dataset.factor && value != null) {\n            value *= target.dataset.factor\n        }\n        newState[target.name] = value\n        setState(newState)\n    }\n\n    function getVariables() {\n        let variables = {}\n        inputRows.map(row => {\n            let {variable, ...value} = row\n            variables[variable] = value\n            return null\n        })\n        return variables\n    }\n\n    function evaluateExpression(expression, variables) {\n        let data = {\n            expression: expression,\n            variables: variables,\n        }\n\n        fetch(urlPrefix + \"/evaluate\", {\n            method: \"post\",\n            body: JSON.stringify(data)\n        })\n            .then(res => {return res.json()})\n            .then(res => {\n                setExpressionMessage(res.message)\n                setExpressionError(res.error)\n            })\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={\"row\"}>\n                <div className={\"col-md-6\"}>\n                    <label>Name:</label>\n                    <input type=\"text\"\n                           className=\"form-control mb-2\"\n                           name={\"name\"}\n                           value={ state.name }\n                           onChange={onChange}/>\n                </div>\n                <div className={\"col-md-6\"}>\n                    <label>Retain history for:</label>\n                    <div className=\"input-group mb-2\">\n                        <input type=\"number\"\n                               className=\"form-control\"\n                               name={\"retain_for\"}\n                               data-factor={daysToSeconds}\n                               value={ state.retain_for / daysToSeconds }\n                               onChange={onChange}/>\n                        <div className=\"input-group-append\">\n                            <span className=\"input-group-text\">days</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <hr/>\n\n            <h4>Variables</h4>\n            <div className={\"row\"}>\n                <div style={{width: \"36px\"}} className={\"px-2\"}> </div>\n                <div style={{width: \"35%\"}} className={\"px-2\"}>Sensor:</div>\n                <div style={{width: \"35%\"}} className={\"px-2\"}>Channel:</div>\n                <div style={{width: \"20%\", maxWidth: \"90px\"}} className={\"px-2\"}>Index:</div>\n            </div>\n            { inputRows.map((row, idx) => {\n                return <InputRow\n                    key={idx}\n                    value={inputRows[idx]}\n                    handleRemove={() => {\n                        // remove the current row\n                        setInputRows(\n                            inputRows.filter((value, index) => { return index !== idx;})\n                        )\n                    }}\n                    handleChange={(newState) => {\n                        let newRows = [...inputRows]\n                        newRows[idx] = newState\n                        setInputRows(newRows)\n                    }}\n                />\n            }) }\n            <AddRowButton onClick={() => {\n                setInputRows([\n                    ...inputRows,\n                    inputRows.length > 0 ? inputRows.slice(-1)[0]  : emptyInputRow\n                ])\n            }} />\n\n\n            <hr/>\n            <h4>Expression</h4>\n\n            <input type=\"text\"\n                   className=\"form-control text-monospace mb-1\"\n                   placeholder={\"A == 3 or \\\"substing\\\" in long_string\"}\n                   onChange={e => {\n                       e.preventDefault()\n                       setState({\n                           ...state,\n                           expression: e.nativeEvent.target.value\n                       })\n                       evaluateExpression(e.nativeEvent.target.value, getVariables())\n                   }}\n                   value={state.expression}\n            />\n\n            {state.expression === \"\" ? null :\n                <div className={`alert ${expressionError ? \"alert-danger\" : \n                    [true, false].includes(expressionMessage) ? \"alert-success\" : \"alert-warning\"}`}>\n                    {expressionMessage.toString()}\n                </div>\n            }\n\n            <h4>Action</h4>\n            <input type=\"text\"\n               className=\"form-control\"\n               placeholder={\"asdad-asdasd-adsads-dasdsa-adsasd\"}\n               onChange={e => {\n                   e.preventDefault()\n                   setState({\n                       ...state,\n                       action_ids: [e.nativeEvent.target.value]\n                   })\n               }}\n               value={state.action_ids[0]}\n            />\n\n            <input type=\"text\"\n               className=\"form-control\"\n               placeholder={\"Message\"}\n               onChange={e => {\n                   e.preventDefault()\n                   setState({\n                       ...state,\n                       message: e.nativeEvent.target.value\n                   })\n               }}\n               value={state.message}\n            />\n\n            <div className={\"col-lg-12\"}>\n                <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                    {editMode ? \"Apply\" : \"Create Trigger\"}\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\n","import React from \"react\"\nimport {DetailView, listItemsLastReading} from \"./DetailView\";\nimport {TriggerFrom} from \"./TriggerForms\";\n\n\nexport class Trigger extends DetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Trigger\"\n        this.fetchUrlPath = \"/triggers\"\n    }\n\n    renderFormView() {\n        return <TriggerFrom\n            handleClose={this.hideModal}\n            editMode={true}\n            initialState={this.item()}\n        />\n    }\n\n    renderSubclassed() {\n        return (\n            <div>\n                <hr/>\n                <h5>\n                    Last Check\n                </h5>\n                <ul className={\"list-group\"}>\n                    {listItemsLastReading(this.item().last_reading)}\n                </ul>\n            </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport {TriggerFrom} from \"./TriggerForms\";\nimport {ListDetailView} from \"./ListDetailView\";\nimport {Trigger} from \"./Trigger\";\n\n\nexport class TriggerView extends ListDetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Trigger\"\n        this.basicEventHandlerItemPrefix = \"trigger\"\n        this.fetchUrlPath = \"/triggers\"\n    }\n\n    renderDetailView() {\n        return <Trigger id={ this.state.active }\n                        eventManager={this.props.eventManager}\n                        globalState={this.props.globalState}\n                        setGlobalState={this.props.setGlobalState}\n        />\n    }\n\n    renderFormView() {\n        return <TriggerFrom handleClose={this.hideModal}/>\n    }\n}\n\n\n\n","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {FromGroup, FromGroupSelect} from \"./Basics\";\n\n\nexport function ActionForm(props) {\n    const initialState = {\n        \"type\": \"DebugAction\",\n        \"interval\": \"5\",\n        \"name\": \"\",\n        \"url\": \"\",\n        \"retain_for\": \"90\",\n        ...props.initialState};\n    let [state, setState] = useState(initialState)\n\n    let editMode = \"editMode\" in props ? props.editMode : false\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        let data = {\n            ...state,\n            \"interval\": state.interval * 60,\n            \"retain_for\": state.retain_for * 24 * 60 * 60,\n        }\n\n        if (editMode) {\n            // edit action\n            fetch(urlPrefix + \"/actions/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(data)\n            })\n        } else {\n            // new action\n            fetch(urlPrefix + \"/actions\", {\n                method: \"post\",\n                body: JSON.stringify(data)\n            })\n                .then(() => {\n                    setState(initialState)\n                })\n        }\n\n        try {\n            props.handleClose()\n        } catch (e) {}\n    }\n\n    function handleSetState(event) {\n        let newState = {};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        setState({\n            ...state,\n            ...newState\n        })\n    }\n\n    function testAction() {\n        let message = `${state.name}: Test message :)`;\n        fetch(urlPrefix + \"/actions/\" + state.id + \"/update\", {\n            method: \"post\",\n            body: JSON.stringify({\n                message: message,\n                force_send: true\n            })\n        })\n    }\n\n    function pushoverInputs() {\n        return [\n            <FromGroup label={\"Api token:\"}\n                       type={\"text\"}\n                       name={\"api_token\"}\n                       value={state.api_token}\n                       key={\"api_token\"}\n                       onChange={handleSetState}/>,\n            <FromGroup label={\"User key:\"}\n                       type={\"text\"}\n                       name={\"user_key\"}\n                       value={state.user_key}\n                       key={\"user_key\"}\n                       onChange={handleSetState}/>,\n            <FromGroup label={\"Device:\"}\n                       type={\"text\"}\n                       name={\"device\"}\n                       value={state.device}\n                       key={\"device\"}\n                       onChange={handleSetState}/>,\n        ]\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FromGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={handleSetState}\n                    disabled={editMode}\n                >\n                    <option value={\"DebugAction\"}>DebugAction - Debug print statement</option>\n                    <option value={\"PushoverAction\"}>Pushover - Sends a push notification</option>\n                </FromGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FromGroup label={\"Name:\"}\n                           name={\"name\"}\n                           value={state.name}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Cooldown:\"}\n                           type={\"cooldown\"}\n                           name={\"interval\"}\n                           placeholder={\"5\"}\n                           suffix={\"minutes\"}\n                           value={state.interval}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Retain for:\"}\n                           type={\"number\"}\n                           name={\"retain_for\"}\n                           placeholder={\"90\"}\n                           suffix={\"days\"}\n                           value={state.retain_for}\n                           onChange={handleSetState}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"PushoverAction\" ? (\n                    pushoverInputs()\n                ) : \"\" }\n            </div>\n\n            <div className={\"col-lg-12\"}>\n                <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                    {editMode ? \"Apply\" : \"Create Action\"}\n                </button>\n                <button type={\"button\"} className={\"btn btn-secondary mt-2 px-4 ml-2\"} onClick={testAction}>\n                    Send Test Notification\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\n","import React from \"react\"\nimport {DetailView, listItemsLastReading} from \"./DetailView\";\nimport {ActionForm} from \"./ActionForms\";\n\n\nexport class Action extends DetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Action\"\n        this.fetchUrlPath = \"/actions\"\n    }\n\n    renderFormView() {\n        return <ActionForm\n            handleClose={this.hideModal}\n            editMode={true}\n            initialState={this.item()}\n        />\n    }\n\n    renderSubclassed() {\n        return (\n            <div>\n                <hr/>\n                <h5>\n                    Last Message\n                </h5>\n                <ul className={\"list-group\"}>\n                    {listItemsLastReading(this.item().last_reading)}\n                </ul>\n            </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport {ActionForm} from \"./ActionForms\";\nimport {ListDetailView} from \"./ListDetailView\";\nimport {Action} from \"./Action\";\n\n\nexport class ActionView extends ListDetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Action\"\n        this.basicEventHandlerItemPrefix = \"action\"\n        this.fetchUrlPath = \"/actions\"\n    }\n\n    renderDetailView() {\n        return <Action id={ this.state.active }\n                       eventManager={this.props.eventManager}\n                       globalState={this.props.globalState}\n                       setGlobalState={this.props.setGlobalState}\n        />\n    }\n\n    renderFormView() {\n        return <ActionForm handleClose={this.hideModal}/>\n    }\n}\n\n\n\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './custom.css'\n//import './bootstrap-dark/bootstrap-dark.scss'\nimport { SensorView } from './SensorView.js';\nimport { eventManager } from \"./events\";\nimport { MainPills } from \"./AppView\";\nimport {TriggerView} from \"./TriggerView\";\nimport {ActionView} from \"./ActionView\";\n\n\n// create state\nlet events = new eventManager()\n\nfunction App() {\n    let [state, _setState] = useState({})\n\n    function setState(newState) {\n        _setState({...state, ...newState})\n    }\n\n    return (\n        <MainPills\n            initialActive={\"Sensors\"}\n            content={{\n                \"Sensors\" : <SensorView eventManager={events} globalState={state} setGlobalState={setState}/>,\n                \"Triggers\" : <TriggerView eventManager={events} globalState={state} setGlobalState={setState}/>,\n                \"Actions\" : <ActionView eventManager={events} globalState={state} setGlobalState={setState}/>,\n            }}\n        />\n    )\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n          <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}