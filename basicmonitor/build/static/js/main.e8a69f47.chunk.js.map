{"version":3,"sources":["state.js","settings.js","formHelpers.js","SensorForms.js","TriggerForms.js","ActionForms.js","Basics.js","DetailView.js","events.js","ListView.js","Chart.js","Messages.js","AppView.js","Sensor.js","Trigger.js","Action.js","index.js"],"names":["stateManager","eventManager","itemLabel","eventHandlerItemPrefix","fetchUrlPath","this","stateKey","globalState","setGlobalState","subscribe","showMessage","bind","title","children","messages","event","message","id","data","newIdx","filtered","items","filter","item","index","setItems","length","setState","active","name","updateItem","setActiveState","lastUpdateEvent","Date","now","state","idx","findIndex","obj","last_reading","reading","updateItems","newState","newGlobalState","newActiveState","activeState","find","promise","then","res","json","type","showError","catch","e","url","fetch","setItem","Promise","resolve","handleFetchErrors","method","body","JSON","stringify","force_send","toLowerCase","onChangeHandler","preventDefault","target","nativeEvent","value","dataset","factor","FormGroupSelect","className","label","props","onChange","FormGroup","placeholder","list","disabled","data-factor","suffix","ApplyCreateCloseButtons","handleClose","editMode","onClick","makeSubmitHandler","initialState","setActive","editItem","addItem","AddRowButton","InputRow","handleRemove","handleChange","sensorManager","useState","numberUpdating","setNumberUpdating","time","lastReading","setLastReading","incrementNumberUpdating","inc","n","updateChannelList","row","useEffect","key","map","channel","Object","keys","variable","ActionIDsFrom","actions","setActions","actionManager","action","i","newActions","idxOption","emptyInputRow","retain_for","expression","variables","action_ids","expressionMessage","expressionError","InputRows","setVariables","newInputRow","newRow","slice","randomChar","string","charAt","Math","floor","random","vowels","consonants","result","randomReadableString","_","newVariables","ListItemSelect","style","cursor","width","iconLeft","iconRight","ListItemCollapse","show","setShow","borderBottom","transform","truncate","str","toString","minuteStr","x","round","converters","Proxy","elapsed","toLocaleString","percentage","seconds","href","decodeURIComponent","rel","interval","cooldown","broken","last_notify","moment","fromNow","queued_messages","get","ignoreList","labelConversion","ListItemsLastReading","allowSpinner","setAllowSpinner","setTimeout","AttributeRow","Button","showSpinner","YouSureButton","sureClass","showDialog","setShowDialog","Buttons","updating","setUpdating","copying","setCopying","send","refreshItem","last_update","copy","deleteItem","DetailView","FormView","setFormState","formState","attributes","statefulConverters","sensorName","s","entries","entry","includes","attributeRows","subscriptions","listen","parse","handleEvent","error","console","log","source","close","reconnect","EventSource","urlPrefix","onmessage","onMessage","onerror","onError","onopen","onReconnect","forEach","eventHandler","push","indexOf","BadgeMessage","badge","child","color","Item","flash","setFlash","ListView","some","LineChart","options","responsive","hoverMode","stacked","display","text","scales","yAxes","position","gridLines","drawOnChartArea","xAxes","plugins","zoom","pan","enabled","drag","mode","speed","threshold","chartRef","React","createRef","resetZoom","current","chartInstance","onDoubleClick","labels","datasets","borderColor","backgroundColor","fill","hidden","makeLineChartData","ref","Message","minWidth","DismissAllButton","MessageContainer","setMessages","Sidebar","ContentView","events","itemInfo","manager","form","handleSubmit","stateProps","onSubmit","borderRight","moreInfo","activeDetailView","setActiveDetailView","window","open","document","write","content","chartData","evaluateExpression","sending","setSending","App","_setState","MoreInfoView","icons","makeTabs","sensors","newMessages","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8a69f47.chunk.js","sourcesContent":["import {urlPrefix} from \"./settings\";\n\n// the state manager itself is stateless. All its state is stored in the \"globalState\" of the root ract component\nexport class stateManager {\n    constructor({eventManager,\n                 itemLabel=\"Item\",\n                 eventHandlerItemPrefix = \"item\",\n                 fetchUrlPath=\"/items\"}) {\n\n        // Is this state manager for a Sensor, Trigger or otherwise?\n        this.itemLabel = itemLabel\n        this.stateKey = itemLabel + \"State\"\n        this.eventHandlerItemPrefix = eventHandlerItemPrefix\n        this.fetchUrlPath = fetchUrlPath\n\n        // dummy state\n        this.globalState = {}\n        this.setGlobalState = ({}) => {}\n\n        // listen to incoming events. The eventManager will call the \"eventHandler\" function\n        this.eventManager = eventManager\n        eventManager.subscribe(this)\n        eventManager.showMessage = this.showMessage.bind(this)\n    }\n\n    showMessage(title, children) {\n        this.setGlobalState({messages: [\n                {title: title, children: children},\n                ...this.globalState.messages,\n            ]})\n    }\n\n    showError(title, children) {\n        this.showMessage(title, children)\n    }\n\n    eventHandler(event) {\n        if (event.message === this.eventHandlerItemPrefix + \" deleted\") {\n            // remove item from list\n            let id = event.data.id\n            let newIdx = 0\n            let filtered = this.items().filter((item, index) => {\n                if (item.id === id) {\n                    newIdx = index\n                }\n                return item.id !== id;\n            });\n\n            // delete item\n            this.setItems(filtered)\n\n            // focus on new item\n            if (this.items().length > 0) {\n                newIdx = this.items().length <= newIdx ? newIdx - 1 : newIdx\n                this.setState( {\n                    active: this.items()[newIdx].id\n                } )\n            }\n\n        } if (event.message === this.eventHandlerItemPrefix + \" added\") {\n            this.item(event.data.id).name == null && this.setItems([\n                ...this.items(),\n                event.data\n            ])\n\n        } if (event.message === this.eventHandlerItemPrefix + \" edited\") {\n            // update the relevant item\n            this.updateItem(event.data.id)\n\n        } if (event.message === this.eventHandlerItemPrefix + \" updated\") {\n            let id = event.data.id\n            // set last update time\n            this.setActiveState({lastUpdateEvent: Date.now() / 1000}, id)\n            if (this.state().active === id) {\n                // update item if currently visible\n                this.updateItem(id)\n            } else {\n                // remove outdated reading if not visible\n                let items = this.items()\n                let idx = items.findIndex(obj => obj.id === id)\n                if (0 <= idx < items.length) {\n                    if (items[idx].last_reading) {\n                        items[idx].last_reading = null\n                    }\n                    event.data.reading != null && (items[idx].last_reading = event.data.reading)\n                    this.setItems(items)\n                }\n            }\n\n        } if (event.message === \"reconnected to server\") {\n            this.updateItems()\n        }\n    }\n\n    state() {\n        // initialize other state\n        if (this.globalState[this.stateKey] == null) {\n            this.globalState[this.stateKey] = {}\n        }\n        return this.globalState[this.stateKey]\n    }\n\n    setState(newState) {\n        let state = this.state()\n        let newGlobalState = {}\n        newGlobalState[this.stateKey] = {...state, ...newState}\n        this.setGlobalState(newGlobalState)\n    }\n\n    activeState(id=this.state().active) {\n        // state of currently active item\n        if (id == null) return {}\n        // initialize\n        if (this.globalState[id] == null) {\n            this.globalState[id] = {}\n            return {}\n        }\n        return this.globalState[id]\n    }\n\n    setActiveState(newActiveState, id=this.state().active) {\n        if (id == null) return\n\n        let newState = {}\n        newState[id] = {...this.activeState(id), ...newActiveState}\n        this.setGlobalState(newState)\n    }\n\n    items() {\n        // initialize list of sensors or triggers, ect\n        if (this.globalState[this.itemLabel] == null) {\n            this.globalState[this.itemLabel] = []\n            this.updateItems()\n            return []\n        }\n        return this.globalState[this.itemLabel]\n    }\n\n    setItems(items) {\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.setGlobalState(newState)\n    }\n\n    item(id=this.state().active){\n        let item = this.items().find(obj => {\n            return obj.id === id\n        })\n        // item not found\n        if (item == null) {\n            item = {}\n        }\n        return item\n    }\n\n    setItem(item) {\n        let items = this.items()\n        let idx = items.findIndex(obj => obj.id === item.id)\n        items[idx] = item\n        this.setItems(items)\n    }\n\n    handleFetchErrors(promise, title=`${this.itemLabel} error`) {\n        return promise\n            .then(res => {\n                return res.json()\n            })\n            .then(data => {\n                if (data.type === \"error\") {\n                    this.showError(title, data.message)\n                    // return null on error to let following then statements know, something went wrong\n                    return null;\n                }\n                return data\n            })\n            .catch(e => {\n                this.showError(\n                    title,\n                    e.message)\n            })\n    }\n\n    updateItem(id) {\n        if (id == null) return\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem(data)\n            })\n    }\n\n    updateItems() {\n        let url = urlPrefix + this.fetchUrlPath\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                this.setItems(res)\n                if (this.state().active === \"\" && this.items().length > 0) this.setState({\n                    active: \"id\" in this.items()[0] ? this.items()[0].id : \"form\"\n                })\n            })\n            .catch(() => {\n                this.state().active === \"\" && this.setState({\n                    active: \"form\"\n                })\n            })\n    }\n\n    refreshItem(id) {\n        if (id == null) return Promise.resolve(null)\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}/update`\n        return this.handleFetchErrors(fetch(url), `Cannot refresh ${this.fetchUrlPath}`)\n            .then(data => {\n                if (data == null) return;\n                this.setItem({\n                    ...this.item(),\n                    last_reading: data\n                })\n            })\n    }\n\n    send(id, message) {\n        if (id == null) return Promise.resolve(null)\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}/send`\n        return this.handleFetchErrors(fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify({message: message, force_send: true})\n        }), `Failed to cause ${this.item(id).name} ${this.itemLabel.toLowerCase()}`)\n    }\n\n    deleteItem(id) {\n        if (id == null) return Promise.resolve(null)\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`;\n        return this.handleFetchErrors(fetch(url, {\n            method: 'DELETE',\n            data: {}\n        }), `Cannot delete ${this.item(id).name || this.itemLabel}`);\n    }\n\n    addItem(data) {\n        let url = urlPrefix + this.fetchUrlPath;\n        return this.handleFetchErrors(fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        }), `Cannot create new ${this.itemLabel}`)\n\n    }\n\n    editItem(data) {\n        let url = urlPrefix + this.fetchUrlPath + \"/\" + data.id;\n        return this.handleFetchErrors(fetch(url, {\n            method: 'PUT',\n            body: JSON.stringify(data)\n        }), `Cannot edit ${data.name}`)\n\n    }\n\n}","// dev\n//export let urlPrefix = \"http://127.0.0.1:5000\";\n\n// build\nexport let urlPrefix = \".\";","import React from \"react\";\n\nexport const daysToSeconds = 24 * 60 * 60\n\nexport function onChangeHandler(state, setState) {\n    return function onChange(e) {\n        e.preventDefault()\n        let target = e.nativeEvent.target\n        let newState = {...state}\n        let value = target.value\n        if (target.dataset.factor && value != null) {\n            value *= target.dataset.factor\n        }\n        newState[target.name] = value\n        setState(newState)\n    }\n}\n\nexport function FormGroupSelect({children, className, name=\"\", label=\"\", state, setState, ...props}) {\n    return (\n        <div className=\"form-group\">\n            {label !== \"\" && <label>{label}</label>}\n            <select\n                className={\"form-control \" + className}\n                onChange={onChangeHandler(state, setState)}\n                value={state[name]}\n                name={name}\n                {...props}\n            >\n                {children}\n            </select>\n        </div>\n    )\n}\n\nexport function FormGroup(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <input type={props.type || \"text\"}\n                       className=\"form-control\"\n                       placeholder={props.placeholder || \"\"}\n                       onChange={onChangeHandler(props.state, props.setState)}\n                       value={\n                           props.factor != null ?\n                               props.state[props.name] / props.factor :\n                               props.state[props.name]\n                       }\n                       list={props.list || \"\"}\n                       name={props.name}\n                       disabled={props.disabled}\n                       data-factor={props.factor}\n                />\n                {\"suffix\" in props ? (\n                    <div className=\"input-group-append\">\n                        <span className=\"input-group-text\">{props.suffix}</span>\n                    </div>\n                ) : \"\"}\n            </div>\n        </div>\n    )\n}\n\n\nexport function ApplyCreateCloseButtons({handleClose=()=>{}, editMode=false, label=\"\", children}) {\n    return (\n        <div className={\"col-12\"}>\n            <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                {editMode ? \"Apply\" : `Create ${label}`}\n            </button>\n            {editMode ?\n            <button type={\"button\"} className={\"btn btn-secondary mt-2 ml-2 px-4\"} onClick={handleClose}>\n                Cancel\n            </button>\n            : \"\"}\n            {children}\n        </div>\n    )\n}\n\n\nexport function makeSubmitHandler(editMode, handleClose, state, setState, initialState, setActive, stateManager) {\n\n    return function handleSubmit(event) {\n        event.preventDefault()\n\n        if (editMode) {\n            // edit item\n            stateManager.editItem(state)\n        } else {\n            // new item\n            stateManager.addItem(state)\n                .then(data => {\n                    if (data == null) return;\n                    setState(initialState)\n                    setActive(data.id)\n                })\n        }\n\n        handleClose()\n    }\n}\n\n\nexport function randomReadableString(length=5) {\n    function randomChar(string) {\n        return string.charAt(Math.floor(Math.random() * string.length))\n    }\n    let vowels = 'aeoui'\n    let consonants = 'qwrtzipsdfghjklyxcvbnm'\n    let result = ''\n    for (let i = 0; i < length; i++) {\n        result += i % 2 === 0 ? randomChar(consonants) : randomChar(vowels)\n    }\n    return result\n}","import React from 'react';\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    FormGroupSelect,\n    makeSubmitHandler,\n} from \"./formHelpers\";\n\nconst initialState = {\n    \"type\": \"HTML\",\n    \"interval\": 5 * 60,\n    \"name\": \"\",\n    \"url\": \"\",\n    \"retain_for\": 90 * daysToSeconds};\n\nexport function SensorFrom({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=()=>{}, stateManager}) {\n\n    const handleSubmit = makeSubmitHandler(\n        editMode, handleClose, state, setState, initialState, setActive, stateManager)\n\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FormGroupSelect\n                    label={\" \"}\n                    name={\"type\"}\n                    disabled={editMode}\n                    {...stateProps}\n                >\n                    <option value={\"HTML\"}>HTML - Grabs HTTP response from a URL</option>\n                    <option value={\"CPUPercentage\"}>CPUPercentage - Host system CPU usage</option>\n                    <option value={\"RAMPercentage\"}>RAMPercentage - Host system memory usage</option>\n                    <option value={\"Uptime\"}>Uptime - Host system uptime</option>\n                </FormGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FormGroup {...stateProps} label={\"Name:\"} name={\"name\"}/>\n                <FormGroup\n                    {...stateProps}\n                    label={\"Update interval:\"}\n                    name={\"interval\"} type={\"number\"}\n                    suffix={\"minutes\"}\n                    factor={60}\n                />\n                <FormGroup\n                    {...stateProps}\n                    label={\"Retain for:\"}\n                    name={\"retain_for\"}\n                    type={\"number\"}\n                    suffix={\"days\"}\n                    factor={daysToSeconds}/>\n\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"HTML\" ? (\n                    <FormGroup label={\"Target URL:\"} name={\"url\"} {...stateProps}/>\n                ) : \"\" }\n            </div>\n\n            <ApplyCreateCloseButtons handleClose={handleClose} editMode={editMode} label={\"Sensor\"}/>\n        </form>\n    )\n}\n\n\n","import React, {useEffect, useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    makeSubmitHandler,\n    randomReadableString\n} from \"./formHelpers\";\n\nfunction AddRowButton({onClick}) {\n    return (\n        <button type=\"button\" className={\"btn btn-sm btn-light\"} onClick={(e) => {\n            e.preventDefault()\n            if (onClick == null) return\n            onClick()\n        }}>\n            <span className={\"fa fa-plus\"} />\n        </button>\n    )\n}\n\n\nfunction InputRow({handleRemove, state, handleChange, sensorManager}) {\n    let [numberUpdating, setNumberUpdating] = useState(0)\n    let [lastReading, setLastReading] = useState({time: 0})\n\n    function incrementNumberUpdating(inc=1) {\n        setNumberUpdating(n => {\n            return n + inc\n        });\n    }\n\n    function updateChannelList(id, row=state.row) {\n        let url = `${urlPrefix}/query/${id}?row=${row}`\n        incrementNumberUpdating()\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                if (res[0] != null) setLastReading(res[0])\n                else setLastReading({})\n                incrementNumberUpdating(-1)\n            })\n            .catch(() => {\n                incrementNumberUpdating(-1)\n                setLastReading({})\n            })\n    }\n\n    function onClickRemove(e) {\n        e.preventDefault()\n        handleRemove()\n    }\n\n    function onClickRefresh(e) {\n        e.preventDefault()\n        updateChannelList(state.id)\n    }\n\n    function onChange(event) {\n        event.preventDefault()\n        let newState = {...state};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        handleChange(newState)\n        if (event.nativeEvent.target.name === \"id\") {\n            updateChannelList(event.nativeEvent.target.value)\n        }\n        if (event.nativeEvent.target.name === \"row\") {\n            updateChannelList(state.id, event.nativeEvent.target.value)\n        }\n    }\n\n    useEffect(() => {\n        state.id && updateChannelList(state.id)\n    }, [state.id]);\n\n    return ([\n        <div key={\"remove-button\"}>\n            <button type=\"button\" className={\"btn btn-sm btn-light\"} onClick={onClickRemove}>\n                <span className={\"fa fa-minus\"} />\n            </button>\n        </div>,\n        <div key={\"sensor\"}>\n            <select\n                   className=\"form-control form-control-sm mr-2\"\n                   placeholder=\"Sensor\"\n                   name={\"id\"}\n                   value={ state.id }\n                   onChange={onChange}>\n                <option value=\"\"/>\n                { sensorManager.items().map(item => {\n                    return <option key={item.id} value={item.id}>{item.name}</option>\n                }) }\n            </select>\n        </div>,\n        <div key={\"channel\"}>\n            <select\n                   className=\"form-control form-control-sm mr-2\"\n                   placeholder=\"Channel\"\n                   name={\"channel\"}\n                   value={ state.channel }\n                   onChange={onChange}>\n                { Object.keys(lastReading).map(item => {\n                    return <option key={item} value={item}>{item}</option>\n                }) }\n            </select>\n        </div>,\n        <div key={\"index\"}>\n            <input type=\"number\"\n                   className=\"form-control form-control-sm mr-2\"\n                   placeholder=\"-1\"\n                   name={\"row\"}\n                   value={ state.row }\n                   onChange={onChange}/>\n        </div>,\n        <div key={\"placeholder\"}/>,\n        <div key={\"variable\"}>\n            <input type=\"text\"\n                   className=\"form-control form-control-sm\"\n                   placeholder=\"Variable name (can be used in Expression)\"\n                   name={\"variable\"}\n                   value={ state.variable }\n                   onChange={onChange}/>\n        </div>,\n        <div key={\"current-value\"}>\n            <div className=\"form-control form-control-sm bg-light text-truncate text-nowrap text-monospace\">\n                { lastReading[state.channel] }\n            </div>\n        </div>,\n        <div key={\"update-button\"} className={\"mb-2\"}>\n            <button type=\"button\" className={\"btn btn-sm btn-light w-100\"} onClick={onClickRefresh}>\n                {numberUpdating > 0 ?\n                    <i className={\"spinner-border spinner-border-sm\"}/> :\n                    <i className={\"fa fa-sync\"}/>}\n            </button>\n        </div>\n    ])\n}\n\n\nfunction ActionIDsFrom({actions, setActions, actionManager}) {\n    return (\n        <div>\n            <ul className={\"list-group\"}>\n                {actions.map((action, idx) => {\n                    return (\n                        <div className={\"list-group-item p-0\"} key={idx}>\n                            <div className={\"input-group\"}>\n                                <div className=\"input-group-prepend\">\n                                    <button\n                                        className=\"btn btn-light\"\n                                        type=\"button\"\n                                        onClick={() => setActions(\n                                            actions.filter((item, i) => idx !== i)\n                                        )}>\n                                        <i className={\"fas fa-minus\"}/>\n                                    </button>\n                                </div>\n                                <select\n                                    className={\"border-0 custom-select\"}\n                                    value={action}\n                                    onChange={event => {\n                                        let newActions = [...actions]\n                                        newActions[idx] = event.nativeEvent.target.value\n                                        setActions(newActions)\n                                    }}>\n                                    {actionManager.items().map((item, idxOption) => {\n                                        return <option value={item.id} key={idxOption}>\n                                            {item.name}\n                                        </option>\n                                    })}\n                                </select>\n                            </div>\n                        </div>\n                    )\n                })}\n            </ul>\n            <div\n                className={\"btn btn-light mt-1\"}\n                onClick={() => {\n                    setActions([\n                        ...actions,\n                        actionManager.items().length > 0  ? actionManager.items()[0].id : \"\"\n                    ])\n                }}>\n                <i className={\"fa fa-plus\"}/>\n            </div>\n        </div>\n    )\n}\n\n\nconst emptyInputRow = {channel: \"time\", row: -1, id:\"\", variable: \"A\"}\nconst initialState = {\n    name: \"New Trigger\",\n    retain_for: 90 * daysToSeconds,\n    expression: \"\",\n    variables: [emptyInputRow],\n    action_ids: [],\n    message: \"\",\n    expressionMessage: \"\",\n    expressionError: false,\n}\n\n\nfunction InputRows({variables, setVariables, sensorManager}) {\n\n    function newInputRow() {\n        if (variables.length === 0) return emptyInputRow\n        // make sure to deep copy the variable object\n        let newRow = {...variables.slice(-1)[0]}\n        newRow.variable = randomReadableString(3)\n        setVariables([...variables, newRow])\n    }\n\n    return ([\n        ...variables.map((variable, idx) => {\n            return <InputRow\n                sensorManager={sensorManager}\n                key={idx}\n                state={variable}\n                handleRemove={() => {\n                    setVariables(\n                        variables.filter((_, i) => {\n                            return i !== idx\n                        })\n                    )\n                }}\n                handleChange={(newState) => {\n                    let newVariables = [...variables]\n                    newVariables[idx] = newState\n                    setVariables(newVariables)\n                }}\n            />\n        }),\n        <AddRowButton key={\"add-button\"} onClick={() => {newInputRow()}}/>\n    ])\n}\n\n\nexport function TriggerFrom({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=()=>{}, actionManager, sensorManager, stateManager}) {\n\n    // evaluate expression when form is shown, or variables or expression changes\n    useEffect(() => {\n        if (state.expression === \"\") return\n        evaluateExpression(state.expression, state.variables)\n    }, [state.expression, state.variables]);\n\n\n    const handleSubmit = makeSubmitHandler(\n        editMode, handleClose, state, setState, initialState, setActive, stateManager)\n\n\n    function evaluateExpression(expression, variables) {\n        let data = {\n            expression: expression,\n            variables: variables,\n        }\n\n        fetch(urlPrefix + \"/evaluate\", {\n            method: \"post\",\n            body: JSON.stringify(data)\n        })\n            .then(res => {return res.json()})\n            .then(res => {\n                setState({...state, expressionMessage: res.message, expressionError: res.error})\n            })\n    }\n\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={\"row\"}>\n                <div className={\"col-md-6\"}>\n                    <FormGroup\n                        label={\"Name:\"}\n                        name={\"name\"}\n                        {...stateProps}/>\n                </div>\n                <div className={\"col-md-6\"}>\n                    <FormGroup\n                        label={\"Retain history for:\"}\n                        type={\"number\"}\n                        name={\"retain_for\"}\n                        suffix={\"days\"}\n                        factor={daysToSeconds}\n                        {...stateProps}/>\n                </div>\n            </div>\n\n            <hr/>\n\n            <h4>Variables</h4>\n            <div className={\"variable-input-grid\"}>\n                <div/>\n                <div>Sensor:</div>\n                <div>Channel:</div>\n                <div>Index:</div>\n                <InputRows\n                    sensorManager={sensorManager}\n                    variables={state.variables}\n                    setVariables={(variables => {\n                        setState({...state, variables: variables})\n                    })}/>\n            </div>\n\n\n            <hr/>\n            <h4>Expression</h4>\n\n            <FormGroup\n                type=\"text\"\n                className=\"form-control text-monospace mb-1\"\n                placeholder={\"A == 3 or \\\"substing\\\" in long_string\"}\n                name={\"expression\"}\n                {...stateProps}/>\n\n            {state.expression === \"\" ? null :\n                <div className={`alert ${state.expressionError ? \"alert-danger\" : \n                    [true, false].includes(state.expressionMessage) ? \"alert-success\" : \"alert-warning\"}`}>\n                    {\"expressionMessage\" in state && state.expressionMessage.toString()}\n                </div>\n            }\n\n            <h4>Action</h4>\n            <ActionIDsFrom\n                actionManager={actionManager}\n                actions={state.action_ids}\n                setActions={actions => {\n                    setState({\n                        ...state,\n                        action_ids: actions\n                    })\n                }}/>\n\n            <FormGroup\n                label={\"Message:\"}\n                name={\"message\"}\n                {...stateProps}/>\n\n            <ApplyCreateCloseButtons label={\"Trigger\"} handleClose={handleClose} editMode={editMode}/>\n        </form>\n    )\n}\n\n\n","import React, {useState} from 'react';\nimport {\n    ApplyCreateCloseButtons,\n    daysToSeconds,\n    FormGroup,\n    FormGroupSelect,\n    makeSubmitHandler,\n} from \"./formHelpers\";\n\nconst initialState = {\n    \"type\": \"DebugAction\",\n    \"cooldown\": 5 * 60,\n    \"name\": \"\",\n    \"url\": \"\",\n    \"method\": \"get\",\n    \"retain_for\": 90 * daysToSeconds};\n\n\nexport function ActionForm({editMode=false, state=initialState, setState, handleClose=()=>{},\n                               setActive=()=>{}, stateManager}) {\n\n    let [sending, setSending] = useState(false)\n\n    const handleSubmit = makeSubmitHandler(\n        editMode, handleClose, state, setState, initialState, setActive, stateManager)\n    const stateProps = {state: state, setState: setState}\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FormGroupSelect\n                    label={\" \"}\n                    name={\"type\"}\n                    disabled={editMode}\n                    {...stateProps}\n                >\n                    <option value={\"DebugAction\"}>DebugAction - Debug print statement</option>\n                    <option value={\"PushoverAction\"}>Pushover - Sends a push notification</option>\n                    <option value={\"WebhookAction\"}>Webhook - Makes a webrequest</option>\n                    <option value={\"RebootAction\"}>Reboot - only works on Linux</option>\n                </FormGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FormGroup\n                    label={\"Name:\"}\n                    name={\"name\"}\n                    {...stateProps}/>\n                <FormGroup\n                    label={\"Cooldown:\"}\n                    name={\"cooldown\"}\n                    type={\"number\"}\n                    suffix={\"minutes\"}\n                    factor={60}\n                    {...stateProps}/>\n                <FormGroup\n                    label={\"Retain for:\"}\n                    name={\"retain_for\"}\n                    type={\"number\"}\n                    suffix={\"days\"}\n                    factor={daysToSeconds}\n                    {...stateProps}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"PushoverAction\" && ([\n                    <FormGroup label={\"Api token:\"} name={\"api_token\"} key={\"api_token\"} {...stateProps}/>,\n                    <FormGroup label={\"User key:\"} name={\"user_key\"} key={\"user_key\"} {...stateProps}/>,\n                    <FormGroup label={\"Device:\"} name={\"device\"} key={\"device\"} {...stateProps}/>,\n                ])}\n                { state.type === \"WebhookAction\" && ([\n                    <FormGroup label={\"Url:\"} name={\"url\"} key={\"url\"} {...stateProps}/>,\n                    <FormGroupSelect label={\"Method:\"} name={\"method\"} key={\"method\"} {...stateProps}>\n                        <option value={\"get\"}>get</option>\n                        <option value={\"post\"}>post</option>\n                        <option value={\"put\"}>put</option>\n                        <option value={\"delete\"}>delete</option>\n                    </FormGroupSelect>,\n                ])}\n                { state.type === \"RebootAction\" && (\n                    <div>\n                        This trigger sends the <code>shutdown -h now</code> command.\n                        To make rebooting work, without giving basicmonitor root privileges, you need to run:\n                        <br/>\n                        <code className={\"label grey\"}>sudo chmod u+s /sbin/shutdown</code>\n                        <br/>\n                        <br/>\n                        <a href={\"https://linux.byexamples.com/archives/315/how-to-shutdown-and-reboot-without-sudo-password/\"}>source: byexamples.com</a>\n\n                    </div>\n                )}\n            </div>\n\n            <ApplyCreateCloseButtons editMode={editMode} handleClose={handleClose} label={\"Action\"}>\n                {state.id != null && stateManager != null && <button\n                    type={\"button\"}\n                    className={\"btn btn-secondary mt-2 ml-2 px-4\"}\n                    onClick={() => {\n                        setSending(true)\n                        stateManager.send(state.id, `${state.name}: Test message :)`)\n                            .then(() => {setSending(false)})\n                            .catch(() => {setSending(false)})\n                    }}>\n                    { sending && <i className={\"spinner-border spinner-border-sm mr-2\"}/>}\n                    Send Test Notification\n                </button>}\n            </ApplyCreateCloseButtons>\n        </form>\n    )\n}\n\n\n","import React, {useCallback, useEffect, useState} from \"react\";\n\nexport const Modal = ({handleClose, show, children, title}) => {\n    function maybeClose(event) {\n        if (event.target.classList.contains(\"modal\")) {\n            handleClose()\n        }\n    }\n\n    const escFunction = useCallback((event) => {\n        if (event.key === \"Escape\") {\n            handleClose()\n        }\n    }, [handleClose]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", escFunction, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [escFunction]);\n\n    return (\n        <div className={`modal fade ${show ? \"show\" : \"\"}`}\n             tabIndex=\"-1\"\n             role=\"dialog\"\n             style={{\n                 \"display\": show ? \"block\" : \"none\",\n                 \"backgroundColor\": \"rgba(1,1,31,0.22)\",\n                 backdropFilter: \"blur(8px)\",\n                 overflowY: \"auto\"\n             }}\n             onClick={(event) => maybeClose(event)}\n        >\n            <div className=\"modal-dialog modal-xl\" role=\"document\">\n                <div className=\"modal-content shadow\">\n                    <div className=\"modal-header bg-light\">\n                        <h5 className=\"modal-title\">{title}</h5>\n                        <button type=\"button\" className=\"close\" onClick={() => {\n                            handleClose()\n                        }}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport function ListItemSelect(props) {\n    return (\n        <li\n            className={`list-group-item list-group-item-transparent list-group-item-action \n            ${props.active ? \"active\" : \"\"} ` + props.className}\n            style={{cursor: \"default\"}}\n            onClick={props.onClick}\n        >\n            <span style={{width: \"48px\"}}>{props.iconLeft}</span>\n            {props.children}\n            <span className={\"float-right\"}>{props.iconRight}</span>\n        </li>\n    )\n}\n\n\nexport function ListItemCollapse(props) {\n    let [show, setShow] = useState(false);\n\n    return (\n        [\n            <li className={\"list-group-item list-group-item-action\"}\n                onClick={() => setShow(!show)}\n                style={{cursor: \"pointer\", borderBottom: \"none\"}}\n                key={\"1\"}\n            >\n                <i className={\"fas fa-chevron-right fa-sm mr-2\"} style={show ? {transform: \"rotate(90deg)\"} : {}}/>\n                <span className=\"text-monospace\">\n                    {props.label}\n                </span>\n                <span className=\"float-right font-weight-light\">\n                    {props.value}\n                </span>\n            </li>,\n            <li className={`list-group-item custom-collapse ${show ? \"show\" : \"\"} py-0`} key={\"2\"}>\n                <div className={\"py-3\"}>\n                    {show ? props.children : null}\n                </div>\n            </li>\n        ]\n    )\n}","import React, {useEffect, useState} from \"react\"\nimport {ListItemCollapse} from \"./Basics\";\nimport moment from \"moment\";\n\nfunction truncate(str) {\n    if (str !== null) {\n        str = str.toString()\n        return str.length < 40 ? str : `${str.slice(0, 37)}...`\n    }\n}\n\nfunction minuteStr(x) {\n    return `${Math.round(x / 60 * 10) / 10} minute${x !== 60 ? \"s\" : \"\"}`\n}\n\nlet knownConverters = {\n    elapsed: x => {\n        return `${Math.round(x * 1000)} ms`\n    },\n    time: x => {\n        return new Date(x * 1000).toLocaleString()\n    },\n    percentage: x => {\n        return `${Math.round(x * 10) / 10} %`\n    },\n    seconds: x => {\n        return `${Math.round(x)} (${Math.round(10 * x / 60 / 60 / 24) / 10} days)`\n    },\n    url: x => {\n        return (\n            <a href={decodeURIComponent(x)} target=\"_blank\" rel=\"noopener noreferrer\">\n                { decodeURIComponent(x) }\n            </a>\n        )\n    },\n    interval: minuteStr,\n    cooldown: minuteStr,\n    type: x => {\n        return <kbd className={\"bg-light text-dark\"}>\n            {x}\n        </kbd>\n    },\n    retain_for: x => {\n        return `${Math.round(x / 24 / 60 / 60 * 10) / 10} days`\n    },\n    expression: x => {\n        return <div className={\"text-monospace\"}>{x}</div>\n    },\n    broken: x => {\n        return !x ? <span className={\"fas fa-check text-success\"}/> : <span className={\"fas fa-times text-danger\"}/>\n    },\n    last_notify: x => {\n        return x < 0 ?\n            \"never\" :\n            `${new Date(x * 1000).toLocaleString()} (${moment(x * 1000).fromNow()})`\n    },\n    queued_messages: x => {\n        return x.map((item, idx) => {\n            return <div key={idx}>\n                {item}\n            </div>\n        })\n    }\n}\nlet converters = new Proxy(knownConverters, {\n    get: (target, name) =>\n        name in target ? target[name] : truncate\n})\n\n\nlet ignoreList = [\"last_reading\", \"last_update\", \"kwargs\", \"enabled\", \"id\", \"name\"]\n\nlet knownLabelConversions = {\n    \"url\": \"Target URL\",\n    \"retain_for\": \"Retain readings for\",\n    \"last_notify\": \"Last notified\",\n    \"queued_messages\": \"Queued messages\",\n    \"api_token\": \"Api token\",\n    \"user_key\": \"User key\",\n    \"action_ids\": \"Actions\",\n}\nlet labelConversion = new Proxy(knownLabelConversions, {\n    get: (target, name) =>\n        name in target ? target[name] : <span className={\"text-capitalize\"}>{name}</span>\n})\n\n\nexport function ListItemsLastReading(lastReading) {\n    let [allowSpinner, setAllowSpinner] = useState(true)\n\n    useEffect(() => {\n        setTimeout(() => {\n            setAllowSpinner(false)\n        }, 3000)\n    }, [])\n\n    if (lastReading == null) return (\n        allowSpinner ?\n            <i className={\"spinner-grow spinner-grow-lg text-secondary mx-auto my-5\"}/> :\n            <h4 className={\"text-muted text-lg mx-auto my-5\"}>\n                <i className={\"fa fa-server mr-2\"}/>\n                Cannot connect to server 😔\n            </h4>\n    )\n\n    return Object.keys(lastReading).map(function (key) {\n        return <ListItemCollapse\n            key={key}\n            label={key}\n            value={converters[key](lastReading[key])}\n        >\n            {lastReading[key]}\n        </ListItemCollapse>\n    });\n}\n\n\nfunction AttributeRow({label, children}) {\n    return (\n        <li className={\"list-group-item px-0\"}>\n            <div className={\"row\"}>\n                <div className={\"col-3 h5 text-secondary m-0\"}>\n                    {label}\n                </div>\n                <div className={\"col-9\"}>\n                    {children}\n                </div>\n            </div>\n        </li>\n    )\n}\n\n\nfunction Button({showSpinner, className, ...props}) {\n    return (\n        <button\n            className={\"btn btn-light mr-2 \" + className}\n            {...props}>\n            {showSpinner ?\n                <i className={\"spinner-border spinner-border-sm\"}/> :\n                props.children}\n        </button>\n    )\n}\n\nfunction YouSureButton({children, onClick, sureClass=\"border-primary\", ...props}) {\n    let [showDialog, setShowDialog] = useState(false)\n\n    return (\n        <Button\n            onClick={(e) => {\n                showDialog && onClick(e)\n                !showDialog && setTimeout(() => {setShowDialog(false)}, 3000)\n                setShowDialog(!showDialog)\n            }}\n            className={showDialog ? sureClass : \"\"}\n            {...props}>\n            {children}\n        </Button>\n    )\n\n}\n\n\nfunction Buttons({stateManager}) {\n    let [updating, setUpdating] = useState(false)\n    let [copying, setCopying] = useState(false)\n    let id = stateManager.state().active\n\n    function refresh() {\n        function _refresh() {\n            return stateManager.eventHandlerItemPrefix === \"action\" ?\n                stateManager.send(id, `${stateManager.item().name}: Test Message :)`) :\n                stateManager.refreshItem(id)\n        }\n        if (updating) {return}\n        setUpdating(true)\n        _refresh()\n            .then(() => {setUpdating(false)})\n            .catch(() => {setUpdating(false)})\n    }\n\n    function copy() {\n        let {last_reading, last_update, id, ...item} = stateManager.item()\n        item.name += \" (copy)\"\n        setCopying(true)\n        stateManager.addItem(item)\n            .then(() => {setCopying(false)})\n            .catch(() => {setCopying(false)})\n    }\n\n    return (\n        <div className={\"header-buttons float-right my-auto\"}>\n            <Button showSpinner={updating} onClick={() => refresh()} disabled={stateManager.activeState().editMode}>\n                {stateManager.eventHandlerItemPrefix === \"action\" ?\n                    <i className={\"fa fa-comment\"}/> :\n                    <i className={\"fa fa-sync\"}/>}\n            </Button>\n\n            <YouSureButton showSpinner={copying} onClick={() => copy()} disabled={stateManager.activeState().editMode}>\n                <i className={\"fa fa-copy\"}/>\n            </YouSureButton>\n\n            <Button\n                onClick={() => stateManager.setActiveState({\n                    editMode: !stateManager.activeState().editMode\n                })}>\n                <i className={\"fa fa-edit\"}/>\n            </Button>\n\n            <YouSureButton\n                sureClass={\"border-danger\"}\n                onClick={() => stateManager.deleteItem(id)}>\n                <i className={\"fa fa-trash text-danger\"}/>\n            </YouSureButton>\n        </div>\n    )\n\n}\n\nexport function DetailView({stateManager, FormView, children, ...props}) {\n    let id = stateManager.state().active\n\n    useEffect(() => {\n        stateManager.item().last_reading == null && stateManager.updateItem(id)\n    }, [id])\n\n    function attributeRows(attributes) {\n        let statefulConverters = {\n            variables: x => {\n                return x.map((variable, idx) => {\n                    let sensorName = variable.id\n                    try {\n                        sensorName = props.sensorManager.items().find(s => s.id === variable.id).name\n                    } catch (e) {}\n\n                    return <div className={\"text-monospace text-large\"} key={idx}>\n                        <code className={\"\"}>{variable.variable}</code> = <kbd>\n                            {sensorName}\n                        </kbd>.\n                        <kbd>{variable.channel}</kbd>\n                        [<kbd>{variable.row}</kbd>]\n                    </div>\n                })\n            },\n            action_ids: x => {\n                return x.map((id, idx) => {\n                    return (\n                        <kbd key={idx} className={\"mr-2\"}>\n                            {props.actionManager != null ?\n                                props.actionManager.item(id).name || id :\n                                id}\n                        </kbd>\n                    )\n                })\n            },\n        }\n\n        return (\n            <ul className=\"list-group list-group-flush\">\n                {Object.entries(attributes).map(entry => {\n                    let key = entry[0]\n                    let value = entry[1]\n                    return (value != null && value !== \"\" && !(ignoreList.includes(key))) && (\n                        <AttributeRow label={labelConversion[key]} key={key}>\n                            { key in statefulConverters ? statefulConverters[key](value) : converters[key](value)}\n                        </AttributeRow>\n                    )\n                })}\n            </ul>\n        )\n    }\n\n    function renderDetail() {\n        return (\n            <div className={\"main px-3\"} key={\"detail\"}>\n                { attributeRows(stateManager.item()) }\n                { children }\n            </div>\n        )\n    }\n\n    function setFormState(state) {\n        stateManager.setActiveState({\n            formState: {...stateManager.activeState().formState, ...state}\n        })\n    }\n\n    function renderForm() {\n        return (\n            <div className={\"main px-3\"}>\n                <FormView\n                    key={\"form\"}\n                    state={{...stateManager.item(), ...stateManager.activeState().formState}}\n                    setState={setFormState}\n                    editMode={true}\n                    stateManager={stateManager}\n                    handleClose={() => {stateManager.setActiveState({editMode: false, formState: {}})}}\n                    {...props}\n                />\n            </div>\n        )\n    }\n\n    if (stateManager.activeState().editMode === true) {\n        return ([\n            <Buttons stateManager={stateManager} key={\"Buttons\"}/>,\n            renderForm()\n        ])\n    } else {\n        return ([\n            <Buttons stateManager={stateManager} key={\"ButtonsDetail\"}/>,\n            renderDetail()\n        ])\n    }\n}","import { urlPrefix } from './settings.js';\n\n\nexport class eventManager {\n    constructor() {\n        this.subscriptions = []\n        this.showMessage = () => {}\n\n        this.listen()\n    }\n\n    onMessage(event) {\n        try {\n            let data = JSON.parse(event.data)\n            this.handleEvent(data)\n        } catch (error) {\n            this.showMessage(\"Event Source Parsing\", \"Could not parse message. \" + error)\n        }\n    }\n\n    onError() {\n        // reconnect on error\n        setTimeout(() => {\n            console.log(\"Lost connection to EventSource. Reconnecting...\")\n            this.source.close()\n            this.source = null\n            this.listen(true)\n        }, 3000)\n    }\n\n    onReconnect() {\n        console.log(\"Reconnected to EventSource\")\n        this.handleEvent({message: \"reconnected to server\"})\n    }\n\n    listen (reconnect=false) {\n        this.source = new EventSource(urlPrefix + \"/events\")\n        this.source.onmessage = this.onMessage.bind(this)\n        this.source.onerror = this.onError.bind(this)\n        if (reconnect) this.source.onopen = this.onReconnect.bind(this)\n    }\n\n\n    handleEvent(event) {\n        let showMessage = this.showMessage\n        this.subscriptions.forEach(obj => {\n            try {\n                obj.eventHandler(event)\n            }\n            catch (error) {\n                showMessage(\"Event Handler Failed\", \"Event handler threw the following exception: \" + error)\n            }\n        })\n    }\n\n\n    subscribe(obj) {\n        this.subscriptions.push(obj)\n    }\n\n\n    unsubscribe(obj) {\n        let idx = this.subscriptions.indexOf(obj)\n        delete this.subscriptions[idx]\n    }\n}","import React, {useEffect, useState} from \"react\";\nimport {ListItemSelect} from \"./Basics\";\n\n\nfunction BadgeMessage({stateManager, item}) {\n    function badge(child, color=\"light\") {\n        return (\n            <div className={\"badge font-weight-normal badge-\" + color}>\n                {child}\n                { stateManager.activeState(item.id).editMode && <i className={\"fas fa-edit ml-2\"}/> }\n            </div>\n        )\n    }\n\n    if (stateManager.eventHandlerItemPrefix === \"trigger\") {\n        // no data for last reading? early return\n        if (item.last_reading == null) return null\n\n        // broken?\n        if (item.last_reading.state == null) {\n            return badge(\"broken\", \"warning\")\n        }\n\n        return item.last_reading.state ? badge(\"triggering\", \"primary\") : badge(\"not triggering\")\n    }\n\n    return badge(item.type)\n}\n\n\nfunction Item({stateManager, item}) {\n    let [flash, setFlash] = useState(\"initial\")\n\n    useEffect(() => {\n        // do not do anything on initial render\n        if (flash === \"initial\") {\n            setFlash(\"\")\n            return;\n        }\n        setFlash(\"flash\")\n        setTimeout(() => setFlash(\"\"), 1000)\n    }, [stateManager.activeState(item.id).lastUpdateEvent])\n\n    return (\n        <ListItemSelect\n            className={flash}\n            onClick={() => stateManager.setState({ active: item.id })}\n            active={stateManager.state().active === item.id}\n            iconRight={<BadgeMessage stateManager={stateManager} item={item}/>}>\n            { item.name }\n        </ListItemSelect>\n    )\n}\n\nexport function ListView({stateManager}) {\n    useEffect(() => {\n        if (stateManager.state().active == null && stateManager.items()[0] != null) {\n            stateManager.setState({\n                active:  stateManager.items()[0].id\n            })\n        }\n    }, [stateManager.state().active, stateManager.items()])\n\n    function ItemList(items) {\n        if (items == null) return null\n        return items.map(item => {\n            return <Item stateManager={stateManager} item={item} key={item.id}/>\n        });\n    }\n\n    return [\n        <li className={`list-group-item list-group-item-transparent list-group-item-action \n        ${stateManager.state().active === \"form\" ? \"active\" : \"\"}`}\n            key={\"button\"}\n            style={{cursor: \"default\"}}\n            onClick={() => stateManager.setState({ active: \"form\" })}\n        >\n            <h3 className={\"mb-1\"}>\n                New {stateManager.itemLabel}\n                <span className={\"float-right\"}>\n                    <i className={\"fa fa-xs fa-plus\"}/>\n                </span>\n            </h3>\n        </li>,\n\n        <input className={\"input-group-sm list-group-item list-group-item-transparent w-100 icon-placeholder py-2\"}\n               placeholder=\"&#xf002; Filter\"\n               value={stateManager.state().filter}\n               key={\"Filter\"}\n               onChange={event => stateManager.setState({filter: event.target.value})}\n        />,\n\n        ItemList( stateManager.items().filter(item => {\n            let filter = (stateManager.state().filter || \"\").toLowerCase()\n            return Object.keys(item).some(key => {\n                try {\n                    return item[key].toLowerCase().includes(filter)\n                } catch (e) {\n                    return false\n                }\n            })\n        }))\n    ]\n\n}\n\n\n\n","import React, {useEffect} from \"react\";\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-plugin-zoom'\n\nexport function LineChart({data, title, ...props}) {\n\n    function makeLineChartData(data) {\n        return {\n            labels: data.map((x, i) => i),\n            datasets: [{\n                label: 'My First dataset',\n                borderColor: \"#fa9121\",\n                backgroundColor: \"#fa912111\",\n                fill: true,\n                data: data,\n                hidden: true,\n            }, {\n                label: 'My Second dataset',\n                borderColor: \"#21af61\",\n                backgroundColor: \"#21af61\",\n                fill: false,\n                data: data.map(x => x * 1.2),\n            }]\n        }\n    }\n\n    let options = {\n        responsive: true,\n        hoverMode: 'index',\n        stacked: false,\n        title: {\n            display: true,\n            text: title || \"\"\n        },\n        scales: {\n            yAxes: [{\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'left',\n                id: 'y-axis-1',\n            }, {\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: false,\n                position: 'right',\n                id: 'y-axis-2',\n\n                // grid line settings\n                gridLines: {\n                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                },\n            }],\n            xAxes: [{\n                type: 'time',\n            }, ],\n        },\n        plugins: {\n            zoom: {\n                pan: {\n                    enabled: false,\n                },\n                zoom: {\n                    enabled: true,\n                    drag: true,\n                    mode: 'x',\n                    speed: 1,\n                    threshold: 0.1,\n                }\n            }\n        },\n    }\n\n    let chartRef = React.createRef()\n\n    function resetZoom() {\n        chartRef.current.chartInstance.resetZoom()\n    }\n\n    return (\n        <div {...props} onDoubleClick={resetZoom}>\n            <Line\n                data={makeLineChartData(data)}\n                options={options}\n                ref={chartRef}\n            />\n            <button\n                type={\"button\"}\n                className={\"btn btn-sm btn-outline-primary\"}\n                onClick={resetZoom}>\n                <i className={\"fa fa-search\"}/> Reset Zoom\n            </button>\n        </div>\n    )\n}","import React from 'react';\n\nexport function Message({title, children, className=\"\", handleClose, ...props}) {\n    return (\n        <div className={\"toast show \" + className} style={{minWidth: \"180px\"}}>\n            <div className=\"toast-header\">\n                <strong className=\"mr-auto\">{title}</strong>\n                <button type=\"button\" className=\"ml-2 mb-1 close\" onClick={handleClose}>\n                    <span>&times;</span>\n                </button>\n            </div>\n            <div className=\"toast-body\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\n\nexport function DismissAllButton({handleClose=() => {}}) {\n    return (\n        <button type=\"button\" className={\"btn float-right text-muted\"} onClick={handleClose}>\n            <div className=\"close ml-2\">\n                <span>&times;</span>\n            </div>\n            <small className={\"text-small\"}>\n                dismiss all\n            </small>\n        </button>\n    )\n}\n\nexport function MessageContainer({messages, setMessages}) {\n    if (messages == null) return null;\n    return (\n        <div className={\"message-container\"}>\n            {messages.map((message, idx) => {\n                return (\n                    <Message\n                        handleClose={() => {\n                            setMessages(messages.filter((message, i) => {\n                                return i !== idx\n                            }))\n                        }}\n                        title={message.title}\n                        key={idx}>\n                        {message.children}\n                    </Message>\n                )\n            })}\n            {messages.length > 0 && <DismissAllButton handleClose={() => setMessages([])}/>}\n        </div>\n    )\n}","import {stateManager} from \"./state\";\nimport {SensorFrom} from \"./SensorForms\";\nimport {TriggerFrom} from \"./TriggerForms\";\nimport {ActionForm} from \"./ActionForms\";\nimport React, {useState} from \"react\";\nimport {DetailView} from \"./DetailView\";\nimport {eventManager} from \"./events\";\nimport {ListView} from \"./ListView\";\nimport {Sensor} from \"./Sensor\";\nimport {Trigger} from \"./Trigger\";\nimport {Action} from \"./Action\";\nimport {MessageContainer} from \"./Messages\";\n\nfunction Sidebar(props) {\n    return (\n        <div className={\"sidebar bg-night shadow-sm\"}>\n            <ul className={\"list-group list-group-flush\"}>\n                {props.children}\n            </ul>\n        </div>\n    )\n}\n\n\nfunction ContentView({FormView, stateManager, children, ...props}) {\n    function setFormState(state) {\n        stateManager.setState({\n            formState: {...stateManager.state().formState, ...state}\n        })\n    }\n\n    return ([\n        <div className={\"header h2 text-dark my-auto px-3\"} key={\"header\"}>\n            {stateManager.item().name || \"Create New\"}\n        </div>,\n        stateManager.state().active === \"form\" ?\n            <div className={\"main px-3\"} key={\"FormView\"}>\n                <FormView\n                    state={stateManager.state().formState}\n                    setState={setFormState}\n                    setActive={active => {\n                        stateManager.setState({active: active})\n                    }}\n                    stateManager={stateManager}\n                    {...props}\n                />\n            </div>\n            :\n            <DetailView\n                key={\"DetailView\"}\n                stateManager={stateManager}\n                FormView={FormView}\n                {...props}>\n                {children}\n            </DetailView>\n\n    ])\n}\n\n// create event listener globally\nlet events = new eventManager()\nlet itemInfo = {\n    \"sensors\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Sensor\",\n            eventHandlerItemPrefix: \"sensor\",\n            fetchUrlPath: \"/sensors\",\n        }),\n        form: SensorFrom,\n        moreInfo: Sensor,\n    },\n    \"triggers\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Trigger\",\n            eventHandlerItemPrefix: \"trigger\",\n            fetchUrlPath: \"/triggers\",\n        }),\n        form: TriggerFrom,\n        moreInfo: Trigger,\n    },\n    \"actions\": {\n        manager: new stateManager({\n            eventManager: events,\n            itemLabel: \"Action\",\n            eventHandlerItemPrefix: \"action\",\n            fetchUrlPath: \"/actions\",\n        }),\n        form: ActionForm,\n        moreInfo: Action,\n    },\n}\n\nexport function App() {\n    let [state, _setState] = useState({messages: []})\n\n    function setState(newState) {\n        _setState({...state, ...newState})\n    }\n\n    Object.keys(itemInfo).map(key => {\n        itemInfo[key].manager.globalState = state\n        itemInfo[key].manager.setGlobalState = setState\n    })\n\n    let [active, setActive] = useState(\"sensors\")\n\n    function makeTabs() {\n        let icons = {\n            \"sensors\": <span className={`fas fa-ruler-vertical mr-2`}/>,\n            \"triggers\": <span className={`fas fa-calculator mr-2`}/>,\n            \"actions\": <span className={`fas fa-bullseye mr-2`}/>,\n        }\n        return Object.keys(itemInfo).map(key => {\n            return (\n                <button type=\"button\"\n                        className={`btn btn-outline-transparent text-white px-1 text-capitalize \n                        ${active === key ? \"active\" : \"\"}`}\n                        key={key}\n                        onClick={() => {\n                            setActive(key)\n                        }}>\n                    {icons[key]}<br/>{key}\n                </button>\n            )\n        })\n    }\n\n    let manager = itemInfo[active].manager\n    let MoreInfoView = itemInfo[active].moreInfo\n\n    return (\n        <div>\n            <div className={\"main-grid\"}>\n                <Sidebar>\n                    <div className=\"btn-group w-100 px-1 py-2\">\n                        {makeTabs()}\n                    </div>\n                    <ListView stateManager={manager}/>\n                </Sidebar>\n\n                <ContentView\n                    stateManager={manager}\n                    FormView={itemInfo[active].form}\n                    sensorManager={itemInfo.sensors.manager}\n                    actionManager={itemInfo.actions.manager}>\n                    <MoreInfoView stateManager={manager}/>\n                </ContentView>\n            </div>\n\n            <MessageContainer\n                messages={state.messages}\n                setMessages={(newMessages) => setState({messages: newMessages})}/>\n        </div>\n    )\n}","import React from \"react\"\nimport {ListItemsLastReading} from \"./DetailView\";\nimport {LineChart} from \"./Chart\";\nimport {urlPrefix} from \"./settings\";\n\n\nexport function Sensor({stateManager}) {\n\n    let activeDetailView = stateManager.state().activeDetailView || 0\n    const setActiveDetailView = active => {\n        stateManager.setState({activeDetailView: active})\n    }\n\n    function getChartData() {\n        let url = `${urlPrefix}/query/${stateManager.item().id}?row=elapsed`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                console.log(res)\n                stateManager.setActiveState({chartData: res})\n            })\n    }\n\n    return (\n        <div className={\"mt-3\"}>\n            { stateManager.item().type === \"HTML\" && (\n                <button\n                    className={\"btn btn-sm btn-outline-primary mb-2\"}\n                    onClick={() => {\n                        let wnd = window.open(stateManager.item().url)\n                        wnd.document.write(stateManager.item().last_reading.content)\n                    }}>\n                    <span className={\"fa fa-external-link-alt mr-2\"}/>\n                    Open HTML content of last reading in new window\n                </button>\n            )}\n            <div className=\"btn-group mb-2 w-100\">\n                <button\n                    type=\"button\"\n                    className={`btn btn-light ${activeDetailView === 0 ? \"active\" : \"\"}`}\n                    onClick={() => {setActiveDetailView(0)}}>\n                    <span className={\"fas fa-database mr-2\"}/>\n                    Raw Data\n                </button>\n                <button\n                    type=\"button\"\n                    className={`btn btn-light ${activeDetailView === 1 ? \"active\" : \"\"}`}\n                    onClick={() => {setActiveDetailView(1)}}>\n                    <span className={\"fas fa-chart-area mr-2\"}/>\n                    History\n                </button>\n            </div>\n\n            {activeDetailView === 0 &&\n            <div>\n                <ul className={\"list-group\"}>\n                    {ListItemsLastReading(stateManager.item().last_reading)}\n                </ul>\n                <span className={\"text-muted font-weight-normal\"}>data from last reading</span>\n            </div>\n            }\n\n            {activeDetailView === 3 &&\n                <LineChart\n                    className={\"mb-2\"}\n                    data={stateManager.activeState().chartData || [0, 2, 3, 1, 4, 2, 4, 2, 1]}\n                />\n            }\n\n        </div>\n    )\n}","import React from \"react\"\nimport {ListItemsLastReading} from \"./DetailView\";\n\n\nexport function Trigger({stateManager}) {\n    return (\n        <div className={\"mt-3\"}>\n            <h4>\n                Last Check\n            </h4>\n            <ul className={\"list-group\"}>\n                {ListItemsLastReading(stateManager.item().last_reading)}\n            </ul>\n        </div>\n    )\n}","import React from \"react\"\nimport {ListItemsLastReading} from \"./DetailView\";\n\n\nexport function Action({stateManager}) {\n    return (\n        <div className={\"mt-3\"}>\n            <h4>\n                Last Message\n            </h4>\n            <ul className={\"list-group\"}>\n                {ListItemsLastReading(stateManager.item().last_reading)}\n            </ul>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './custom.css'\nimport {App} from \"./AppView\";\n//import './bootstrap-dark/bootstrap-dark.scss' import {App} from \"./AppView\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n          <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}