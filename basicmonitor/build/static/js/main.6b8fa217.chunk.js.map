{"version":3,"sources":["Basics.js","SensorForms.js","DetailView.js","settings.js","Sensor.js","ListDetailView.js","SensorView.js","events.js","AppView.js","TriggerForms.js","Trigger.js","TriggerView.js","ActionForms.js","Action.js","ActionView.js","index.js"],"names":["Modal","handleClose","show","children","title","escFunction","useCallback","event","key","useEffect","document","addEventListener","removeEventListener","className","tabIndex","role","style","backdropFilter","overflowY","onClick","target","classList","contains","maybeClose","type","aria-hidden","ListItemSelect","props","active","cursor","width","iconLeft","iconRight","FromGroupSelect","label","placeholder","onChange","value","name","disabled","FromGroup","list","suffix","ListItemCollapse","useState","setShow","borderBottom","transform","SensorFrom","initialState","state","setState","editMode","handleSetState","newState","nativeEvent","onSubmit","preventDefault","data","interval","retain_for","fetch","urlPrefix","id","method","body","JSON","stringify","then","res","e","borderRight","url","truncate","str","toString","length","slice","converters","Proxy","elapsed","x","Math","round","time","Date","toLocaleString","percentage","seconds","href","decodeURIComponent","rel","expression","broken","last_notify","moment","fromNow","queued_messages","map","item","idx","get","blacklist","labelConversion","listItemsLastReading","lastReading","Object","keys","AttributeRow","overflow","DetailView","hideModal","showModal","updating","itemLabel","fetchUrlPath","this","json","last_reading","out","globalState","find","obj","newItem","items","findIndex","setGlobalState","setItem","prevProps","prevState","snapshot","update","attributes","statefulConverters","variables","sensorName","s","channel","row","entries","entry","includes","renderFormView","refresh","delete","attributeRows","renderSubclassed","React","Component","Sensor","window","open","write","content","ListDetailView","filter","basicEventHandlerItemPrefix","setItems","message","newIdx","filtered","index","updateItem","eventManager","subscribe","unsubscribe","borderBottomLeftRadius","borderBottomRightRadius","height","ItemList","toLowerCase","some","renderDetailView","SensorView","subscriptions","listen","push","indexOf","forEach","eventHandler","console","log","that","decoder","TextDecoder","response","reader","getReader","read","processStream","done","decode","parse","handleEvent","MainPills","initialActive","reloadContent","setActive","AddRowButton","InputRow","handleRemove","handleChange","sensorOptions","setSensorOptions","numberUpdating","setNumberUpdating","setLastReading","incrementNumberUpdating","inc","n","updateChannelList","maxWidth","variable","emptyInputRow","defaultInitialState","action_ids","TriggerFrom","initial","initialInputRows","inputRows","setInputRows","expressionMessage","setExpressionMessage","expressionError","setExpressionError","dataset","factor","getVariables","evaluateExpression","error","data-factor","newRows","Trigger","TriggerView","ActionForm","api_token","user_key","device","force_send","Action","ActionView","events","App","_setState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6b8fa217.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from \"react\";\n\nexport const Modal = ({handleClose, show, children, title}) => {\n    function maybeClose(event) {\n        if (event.target.classList.contains(\"modal\")) {\n            handleClose()\n        }\n    }\n\n    const escFunction = useCallback((event) => {\n        if (event.key === \"Escape\") {\n            handleClose()\n        }\n    }, [handleClose]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", escFunction, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [escFunction]);\n\n    return (\n        <div className={`modal fade ${show ? \"show\" : \"\"}`}\n             tabIndex=\"-1\"\n             role=\"dialog\"\n             style={{\n                 \"display\": show ? \"block\" : \"none\",\n                 \"backgroundColor\": \"rgba(1,1,31,0.22)\",\n                 backdropFilter: \"blur(8px)\",\n                 overflowY: \"auto\"\n             }}\n             onClick={(event) => maybeClose(event)}\n        >\n            <div className=\"modal-dialog modal-xl\" role=\"document\">\n                <div className=\"modal-content shadow\">\n                    <div className=\"modal-header bg-light\">\n                        <h5 className=\"modal-title\">{title}</h5>\n                        <button type=\"button\" className=\"close\" onClick={() => {\n                            handleClose()\n                        }}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport function ListItemSelect(props) {\n    return (\n        <li\n            className={`list-group-item list-group-item-action ${props.active ? \"active\" : \"\"}`}\n            style={{cursor: \"default\"}}\n            onClick={props.onClick}\n        >\n            <span style={{width: \"48px\"}}>{props.iconLeft}</span>\n            {props.children}\n            <span className={\"float-right\"}>{props.iconRight}</span>\n        </li>\n    )\n}\n\nexport function FromGroupSelect(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <select\n                    className=\"form-control\"\n                    placeholder={props.placeholder || \"\"}\n                    onChange={props.onChange}\n                    value={props.value}\n                    name={props.name}\n                    disabled={props.disabled}\n                >\n                    {props.children}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport function FromGroup(props) {\n    return (\n        <div className=\"form-group\">\n            {\"label\" in props ? <label>{props.label || \"label\"}</label> : null}\n            <div className=\"input-group\">\n                <input type={props.type || \"text\"}\n                       className=\"form-control\"\n                       placeholder={props.placeholder || \"\"}\n                       onChange={props.onChange}\n                       value={props.value}\n                       list={props.list || \"\"}\n                       name={props.name}\n                       disabled={props.disabled}\n                />\n                {\"suffix\" in props ? (\n                    <div className=\"input-group-append\">\n                        <span className=\"input-group-text\">{props.suffix}</span>\n                    </div>\n                ) : \"\"}\n            </div>\n        </div>\n    )\n}\n\n\nexport function ListItemCollapse(props) {\n    let [show, setShow] = useState(false);\n\n    return (\n        [\n            <li className={\"list-group-item list-group-item-action\"}\n                onClick={() => setShow(!show)}\n                style={{cursor: \"pointer\", borderBottom: \"none\"}}\n                key={\"1\"}\n            >\n                <i className={\"fas fa-chevron-right fa-sm mr-2\"} style={show ? {transform: \"rotate(90deg)\"} : {}}/>\n                <span className=\"text-monospace\">\n                    {props.label}\n                </span>\n                <span className=\"float-right font-weight-light\">\n                    {props.value}\n                </span>\n            </li>,\n            <li className={`list-group-item custom-collapse ${show ? \"show\" : \"\"} py-0`} key={\"2\"}>\n                <div className={\"py-3\"}>\n                    {show ? props.children : null}\n                </div>\n            </li>\n        ]\n    )\n}","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {FromGroup, FromGroupSelect} from \"./Basics\";\n\n\nexport function SensorFrom(props) {\n    const initialState = {\"type\": \"HTML\", \"interval\": \"5\", \"name\": \"\", \"url\": \"\", \"retain_for\": \"90\",\n        ...props.initialState};\n    let [state, setState] = useState(initialState)\n\n    let editMode = \"editMode\" in props ? props.editMode : false\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        let data = {\n            ...state,\n            \"interval\": state.interval * 60,\n            \"retain_for\": state.retain_for * 24 * 60 * 60,\n        }\n\n        if (editMode) {\n            // edit sensor\n            fetch(urlPrefix + \"/sensors/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(data)\n            })\n        } else {\n            // new sensor\n            fetch(urlPrefix + \"/sensors\", {\n                method: \"post\",\n                body: JSON.stringify(data)\n            })\n                .then(res => {\n                    setState(initialState)\n                })\n        }\n\n        try {\n            props.handleClose()\n        } catch (e) {}\n    }\n\n    function handleSetState(event) {\n        let newState = {};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        setState({\n            ...state,\n            ...newState\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FromGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={handleSetState}\n                    disabled={editMode}\n                >\n                    <option value={\"HTML\"}>HTML - Grabs HTTP response from a URL</option>\n                    <option value={\"CPUPercentage\"}>CPUPercentage - Host system CPU usage</option>\n                    <option value={\"RAMPercentage\"}>RAMPercentage - Host system memory usage</option>\n                    <option value={\"Uptime\"}>Uptime - Host system uptime</option>\n                </FromGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FromGroup label={\"Name:\"}\n                           name={\"name\"}\n                           value={state.name}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Update interval:\"}\n                           type={\"number\"}\n                           name={\"interval\"}\n                           placeholder={\"5\"}\n                           suffix={\"minutes\"}\n                           value={state.interval}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Retain for:\"}\n                           type={\"number\"}\n                           name={\"retain_for\"}\n                           placeholder={\"90\"}\n                           suffix={\"days\"}\n                           value={state.retain_for}\n                           onChange={handleSetState}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"HTML\" ? (\n                    <FromGroup label={\"Target URL:\"}\n                               type={\"text\"}\n                               name={\"url\"}\n                               value={state.url}\n                               onChange={handleSetState}/>\n                ) : \"\" }\n            </div>\n\n            <div className={\"col-lg-12\"}>\n                <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                    {editMode ? \"Apply\" : \"Create Sensor\"}\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\n","import React from \"react\"\nimport {urlPrefix} from \"./settings\"\nimport {ListItemCollapse, Modal} from \"./Basics\";\nimport moment from \"moment\";\n\nfunction truncate(str) {\n    if (str !== null) {\n        str = str.toString()\n        return str.length < 30 ? str : `${str.slice(0, 27)}...`\n    }\n}\n\nlet knownConverters = {\n    elapsed: x => {\n        return `${Math.round(x * 1000)} ms`\n    },\n    time: x => {\n        return new Date(x * 1000).toLocaleString()\n    },\n    percentage: x => {\n        return `${Math.round(x * 10) / 10} %`\n    },\n    seconds: x => {\n        return `${Math.round(x)} (${Math.round(10 * x / 60 / 60 / 24) / 10} days)`\n    },\n    url: x => {\n        return (\n            <a href={decodeURIComponent(x)} target=\"_blank\" rel=\"noopener noreferrer\">\n                { decodeURIComponent(x) }\n            </a>\n        )\n    },\n    interval: x => {\n        return `${Math.round(x / 60 * 10) / 10} minutes`\n    },\n    retain_for: x => {\n        return `${Math.round(x / 24 / 60 / 60 * 10) / 10} days`\n    },\n    expression: x => {\n        return <div className={\"text-monospace\"}>{x}</div>\n    },\n    broken: x => {\n        return !x ? <span className={\"fas fa-check text-success\"}/> : <span className={\"fas fa-times text-danger\"}/>\n    },\n    last_notify: x => {\n        return x < 0 ?\n            \"never\" :\n            `${new Date(x * 1000).toLocaleString()} (${moment(x * 1000).fromNow()})`\n    },\n    queued_messages: x => {\n        return x.map((item, idx) => {\n            return <div key={idx}>\n                {item}\n            </div>\n        })\n    },\n}\nlet converters = new Proxy(knownConverters, {\n    get: (target, name) =>\n        name in target ? target[name] : truncate\n})\n\n\nlet blacklist = [\"last_reading\", \"last_update\", \"kwargs\", \"enabled\", \"id\", \"name\"]\n\nlet knownLabelConversions = {\n    \"url\": \"Target URL\",\n    \"retain_for\": \"Retain readings for\",\n    \"broken\": \"Working?\",\n    \"last_notify\": \"Last notified\",\n    \"queued_messages\": \"Queued messages\",\n}\nlet labelConversion = new Proxy(knownLabelConversions, {\n    get: (target, name) =>\n        name in target ? target[name] : <span className={\"text-capitalize\"}>{name}</span>\n})\n\n\nexport function listItemsLastReading(lastReading) {\n    if (lastReading == null) return null\n\n    let listItems = Object.keys(lastReading).map(function (key) {\n        return <ListItemCollapse\n            key={key}\n            label={key}\n            value={converters[key](lastReading[key])}\n        >\n            {lastReading[key]}\n        </ListItemCollapse>\n    });\n    return (\n        listItems\n    )\n}\n\n\nfunction AttributeRow({label, children}) {\n    return (\n        <div className={\"row mb-2\"}>\n            <div className={\"col-sm-4\"}>\n                <h5>\n                    { label }\n                </h5>\n            </div>\n            <div className={\"col-sm-8\"} style={{ overflow: \"hidden\" }}>\n                { children }\n            </div>\n        </div>\n    )\n}\n\n\nexport class DetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {updating: false, showModal: false}\n\n        // override these attributes\n        this.itemLabel = \"Item\"\n        this.fetchUrlPath = \"/item\"\n    }\n\n    // override me\n    renderFormView() {\n        return null\n    }\n\n    //override me\n    renderSubclassed() {\n        return null\n    }\n\n\n    refresh() {\n        let url = urlPrefix + `${this.fetchUrlPath}/${this.props.id}/update`\n        this.setState({ updating: true })\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setState({\n                    item: {\n                        ...this.item(),\n                        last_reading: data\n                    },\n                    updating: false\n                });\n            })\n    }\n\n    item() {\n        let out = this.props.globalState[this.itemLabel].find(obj => {\n            return obj.id === this.props.id\n        })\n        return out == null ? {} : out\n    }\n\n    setItem(newItem) {\n        let items = this.props.globalState[this.itemLabel]\n        let idx = items.findIndex(obj => obj.id === newItem.id)\n        items[idx] = newItem\n        // set new items list\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.props.setGlobalState(newState)\n    };\n\n    update() {\n        let url = urlPrefix + `${this.fetchUrlPath}/${this.props.id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                this.setItem(data)\n            })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.id !== prevProps.id) {\n            if (this.item().last_reading == null) {\n                this.update()\n            }\n        }\n    }\n\n    delete() {\n        let url = urlPrefix + `${this.fetchUrlPath}/${this.props.id}`;\n        fetch(url, {\n            method: 'DELETE',\n            data: this.item()\n        });\n    }\n\n    hideModal = () => {\n        this.setState({ showModal: false });\n    };\n\n    attributeRows(attributes) {\n        let statefulConverters = {\n            variables: x => {\n                return Object.keys(x).map(key => {\n                    let obj = x[key]\n                    let sensorName = obj.id\n                    try {\n                        sensorName =  this.props.globalState[\"Sensor\"].find(s => s.id === obj.id).name\n                    } catch (e) {}\n\n                    return <div className={\"text-monospace text-large\"} key={key}>\n                        <code className={\"\"}>{key}</code> = <kbd>\n                            {sensorName}\n                        </kbd>.\n                        <kbd>{obj.channel}</kbd>\n                        [<kbd>{obj.row}</kbd>]\n                    </div>\n                })\n            }\n        }\n\n        if (attributes == null) return\n        return Object.entries(attributes).map(entry => {\n            let key = entry[0]\n            let value = entry[1]\n            return (value != null && value !== \"\" && !(blacklist.includes(key))) ? (\n                <AttributeRow label={labelConversion[key]} key={key}>\n                    { key in statefulConverters ? statefulConverters[key](value) : converters[key](value)}\n                </AttributeRow>\n            ) : null\n\n        })\n    }\n\n\n\n    render() {\n        // { this.state.name }\n        return (\n            <div className={\"card shadow\"}>\n                { this.state.showModal ? (\n                    <Modal title={\"Edit item\"}\n                           show={true}\n                           handleClose={this.hideModal}>\n                        { this.renderFormView() }\n                    </Modal>\n                ) : null}\n\n                <div className={\"card-header bg-dark py-3\"}>\n                    <h2 className={\"mb-0 text-white\"}>\n                        {this.item().name || \"\"}\n                        <span className={\"float-right\"}>\n                            <button\n                                className={\"btn btn-light mr-2\"}\n                                onClick={() => this.refresh()}\n                            >\n                                {this.state.updating ?\n                                    <i className={\"spinner-border spinner-border-sm\"}/> :\n                                    <i className={\"fa fa-sync\"}/>}\n                            </button>\n                            <button\n                                className={\"btn btn-light mr-2\"}\n                                onClick={() => this.setState({showModal: true})}\n                            >\n                                <i className={\"fa fa-edit\"}/>\n                            </button>\n                            <button\n                                className={\"btn btn-light\"}\n                                onClick={() => this.delete()}\n                            >\n                                <i className={\"fa fa-trash text-danger\"}/>\n                            </button>\n                        </span>\n                    </h2>\n                </div>\n                <div className={\"card-body\"}>\n                    { this.attributeRows(this.item()) }\n                    { this.renderSubclassed() }\n                </div>\n            </div>\n        )\n    }\n}","export let urlPrefix = \".\";","import React from \"react\"\nimport {urlPrefix} from \"./settings\"\nimport {DetailView, listItemsLastReading} from \"./DetailView\";\nimport {SensorFrom} from \"./SensorForms\";\n\n\nexport class Sensor extends DetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Sensor\"\n        this.fetchUrlPath = \"/sensors\"\n    }\n\n\n    renderFormView() {\n        return <SensorFrom handleClose={this.hideModal}\n                  editMode={true}\n                  initialState={{\n                      ...this.item(),\n                      interval: this.item().interval / 60,\n                      retain_for: this.item().retain_for / 24 / 60 / 60,\n                      url: decodeURIComponent(this.item().url)}}\n        />\n    }\n\n    renderSubclassed() {\n        return (\n        <div>\n            { this.item().type === \"HTML\" ? (\n                <button\n                    className={\"btn btn-sm btn-outline-primary\"}\n                    onClick={() => {\n                        let wnd = window.open(this.item().url)\n                        wnd.document.write(this.item().last_reading.content)\n                    }}>\n                    <span className={\"fa fa-external-link-alt mr-2\"}/>\n                    Open HTML content of last reading in new window\n                </button>\n            ) : null\n            }\n            <hr/>\n            <h5>\n                Channels\n                <span className={\"text-muted font-weight-normal\"}> (last reading)</span>\n            </h5>\n            <ul className={\"list-group\"}>\n                {listItemsLastReading(this.item().last_reading)}\n            </ul>\n        </div>\n        )\n    }\n\n\n}","import React from \"react\";\nimport {urlPrefix} from \"./settings\";\nimport {ListItemSelect, Modal} from \"./Basics\";\n\nexport class ListDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { active: \"\", showModal: false, filter: \"\" }\n\n        // override these attributes\n        this.itemLabel = \"Item\"\n        this.basicEventHandlerItemPrefix = \"item\"\n        this.fetchUrlPath = \"/items\"\n    }\n\n    // override me\n    renderDetailView() {\n        return null\n    }\n\n    // override me\n    renderFormView() {\n        return null\n    }\n\n\n    setItems(items) {\n        let newState = {}\n        newState[this.itemLabel] = items\n        this.props.setGlobalState(newState)\n    }\n\n    items() {\n        if (this.props.globalState[this.itemLabel] == null) {\n            this.props.globalState[this.itemLabel] = []\n        }\n        return this.props.globalState[this.itemLabel]\n    }\n\n    updateItem(id) {\n        let url = urlPrefix + `${this.fetchUrlPath}/${id}`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(data => {\n                let items = this.props.globalState[this.itemLabel]\n                let idx = items.findIndex(obj => obj.id === id)\n                items[idx] = data\n                this.setItems(items)\n            })\n    }\n\n    eventHandler(event) {\n        if (event.message === this.basicEventHandlerItemPrefix + \" deleted\") {\n            // remove item from list\n            let id = event.data.id\n            let newIdx = 0\n            let filtered = this.items().filter((item, index) => {\n                if (item.id === id) {\n                    newIdx = index\n                }\n                return item.id !== id;\n            });\n\n            // delete item\n            this.setItems(filtered)\n\n            // focus on new item\n            if (this.items().length > 0) {\n                newIdx = this.items().length <= newIdx ? newIdx - 1 : newIdx\n                this.setState( {\n                    active: this.items()[newIdx].id\n                } )\n            }\n\n        } if (event.message === this.basicEventHandlerItemPrefix + \" added\") {\n            this.setItems([\n                ...this.items(),\n                event.data\n            ] )\n        } if (event.message === this.basicEventHandlerItemPrefix + \" edited\") {\n            // update the relevant item\n            this.updateItem(event.data.id)\n        } if (event.message === this.basicEventHandlerItemPrefix + \" updated\") {\n            let id = event.data.id\n            if (this.state.active === id) {\n                // update item if currently visible\n                this.updateItem(id)\n            } else {\n                // remove outdated reading if not visible\n                let items = this.items()\n                let idx = items.findIndex(obj => obj.id === id)\n                if (items[idx].last_reading) {\n                    items[idx].last_reading = null\n                }\n                this.setItems(items)\n            }\n        }\n    }\n\n    update() {\n        let url = urlPrefix + this.fetchUrlPath\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                this.setItems(res)\n                if (this.state.active === \"\" && this.items().length > 0) this.setState({\n                    active: \"id\" in this.items()[0] ? this.items()[0].id : \"\"\n                })\n            })\n    }\n\n    componentDidMount() {\n        this.update()\n        if (this.props.eventManager) {\n            this.props.eventManager.subscribe(this)\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.eventManager) {\n            this.props.eventManager.unsubscribe(this)\n        }\n    }\n\n    ItemList(items) {\n        if (items == null) return null\n\n        return items.map(item => {\n            return <ListItemSelect\n                key={item.id}\n                onClick={() => this.setState({ active: item.id })}\n                active={this.state.active === item.id}\n                iconRight={ <div className={\"badge badge-light font-weight-normal\"}>{ item.type }</div> }\n            >\n                { item.name }\n            </ListItemSelect>\n        });\n    }\n\n    hideModal = () => {\n        this.setState({ showModal: false });\n    };\n\n    render() {\n        return (\n            <div className={\"row\"}>\n                <div className={\"col-md-4 mb-3\"}>\n                    <Modal title={`Add New ${this.itemLabel}`}\n                           show={this.state.showModal}\n                           handleClose={this.hideModal}>\n                        {this.renderFormView()}\n                    </Modal>\n                    <ul className={\"list-group shadow\"}>\n                        <li className={\"bg-light list-group-item btn btn-outline-primary text-dark py-3\"}\n                            style={{\n                                cursor: \"pointer\",\n                                borderBottomLeftRadius: 0,\n                                borderBottomRightRadius: 0,\n                                 height: \"76px\" }}\n                            onClick={() => this.setState({ showModal: true })}\n                        >\n                            <span className={\"h2 align-bottom float-left mb-0\"}>\n                                New {this.itemLabel}\n                            </span>\n                            <h2 className={\"mb-0\"}>\n                                <span className={\"float-right\"}>\n                                    <i className={\"fa fa-xs fa-plus\"}/>\n                                </span>\n                            </h2>\n\n                        </li>\n                        <input className={\"bg-light input-group-sm list-group-item icon-placeholder py-2\"}\n                               placeholder=\"&#xf002; Filter\"\n                               value={this.state.filter}\n                               onChange={event => this.setState({filter: event.target.value})}\n                        />\n                        { this.ItemList( this.items().filter(item => {\n                            let filter = this.state.filter.toLowerCase()\n                            return Object.keys(item).some(key => {\n                                try {\n                                    return item[key].toLowerCase().includes(filter)\n                                } catch (e) {\n                                    return false\n                                }\n                            })\n                            }))\n                        }\n                    </ul>\n                </div>\n                <div className={\"col-md-8 mb-3\"}>\n                    {this.renderDetailView()}\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\n\n","import React from 'react';\nimport {SensorFrom} from \"./SensorForms\";\nimport {Sensor} from \"./Sensor\";\nimport {ListDetailView} from \"./ListDetailView\";\n\n\nexport class SensorView extends ListDetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Sensor\"\n        this.basicEventHandlerItemPrefix = \"sensor\"\n        this.fetchUrlPath = \"/sensors\"\n    }\n\n    renderDetailView() {\n        return <Sensor id={ this.state.active }\n                       eventManager={this.props.eventManager}\n                       globalState={this.props.globalState}\n                       setGlobalState={this.props.setGlobalState}\n        />\n    }\n\n    renderFormView() {\n        return <SensorFrom handleClose={this.hideModal} />\n    }\n}\n\n\n\n","import { urlPrefix } from './settings.js';\n\n\nexport class eventManager {\n    constructor() {\n        this.subscriptions = []\n        this.listen()\n    }\n\n\n    subscribe(obj) {\n        this.subscriptions.push(obj)\n    }\n\n\n    unsubscribe(obj) {\n        let idx = this.subscriptions.indexOf(obj)\n        delete this.subscriptions[idx]\n    }\n\n\n    handleEvent(event) {\n        this.subscriptions.forEach(obj => {\n            try {\n                obj.eventHandler(event)\n            }\n            catch (e) {\n                console.log(e)\n            }\n        })\n    }\n\n\n    listen () {\n        let that = this;\n        let decoder = new TextDecoder(\"utf-8\");\n\n        fetch(urlPrefix + \"/events\")\n            .then(response => {\n                let reader = response.body.getReader()\n                reader.read().then(function processStream({ done, value }) {\n                    let str = decoder.decode(value)\n                    try {\n                        let obj = JSON.parse(str)\n                        that.handleEvent(obj)\n                    } catch (e) {\n                        console.log(\"Cannot parse JSON:\\n\" + str)\n                    }\n\n                    if (done) {\n                        console.log(\"Finished event stream\")\n                        return\n                    }\n\n                    // Read some more, and call this function again\n                    return reader.read().then(processStream);\n                })\n\n            })\n    }\n\n}","import React, {useState} from \"react\";\n\nexport const MainPills = ({content, initialActive, reloadContent}) => {\n    let [active, setActive] = useState(initialActive)\n\n    function makeTabs() {\n        return Object.keys(content).map(key => {\n            return (\n                <li className={`nav-item bg-light`} key={key} onClick={() => {setActive(key)}}>\n                    <div className={`nav-link ${active === key ? \"active\" : \"\"} text-dark px-3`} style={{cursor: \"pointer\"}}>\n                        {key}\n                    </div>\n                </li>\n            )\n        })\n    }\n\n    function makeTabChildren() {\n        // reload content\n        if (reloadContent) {\n            return content[active]\n        }\n\n        // keep everything loaded\n        return (\n            <div className=\"tab-content\">\n                {Object.keys(content).map(key => {\n                    return (\n                        <div className={`tab-pane ${active === key ? \"active\" : \"\"}`} key={key}>\n                            { content[key] }\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <nav className=\"navbar navbar-light bg-light pb-0 mb-3\">\n                <div className={\"container\"}>\n                    <ul className=\"nav nav-tabs\">\n                        {makeTabs()}\n                    </ul>\n                </div>\n            </nav>\n            <div className={\"container\"}>\n\n                    { makeTabChildren() }\n\n            </div>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport {urlPrefix} from \"./settings\";\n\nlet daysToSeconds = 24 * 60 * 60\n\nfunction AddRowButton({onClick}) {\n    return (\n        <div className={\"row mt-1\"}>\n            <div className={\"pl-2\"} style={{width: \"48px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light mr-2\"} onClick={(e) => {\n                    e.preventDefault()\n                    if (onClick == null) return\n                    onClick()\n                }}>\n                    <span className={\"fa fa-plus\"} />\n                </button>\n            </div>\n        </div>\n    )\n}\n\n\nfunction InputRow({handleRemove, value, handleChange}) {\n    let [state, setState] = useState(value)\n    let [sensorOptions, setSensorOptions] = useState([])\n    let [numberUpdating, setNumberUpdating] = useState(0)\n    let [lastReading, setLastReading] = useState({time: 0})\n\n    function updateSensorList() {\n        let url = urlPrefix + `/sensors/`\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                setSensorOptions(res)\n            })\n    }\n\n    function incrementNumberUpdating(inc=1) {\n        setNumberUpdating(n => {\n            return n + inc\n        });\n    }\n\n    function updateChannelList(id, row=state.row) {\n        let url = `${urlPrefix}/query/${id}?row=${row}`\n        incrementNumberUpdating()\n        fetch(url)\n            .then(res => {return res.json()})\n            .then(res => {\n                if (res[0] != null) setLastReading(res[0])\n                incrementNumberUpdating(-1)\n            })\n    }\n\n    function onClickRemove(e) {\n        e.preventDefault()\n        handleRemove()\n    }\n\n    function onClickRefresh(e) {\n        e.preventDefault()\n        updateChannelList(state.id)\n    }\n\n    function onChange(event) {\n        event.preventDefault()\n        let newState = {...state};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        setState(newState)\n        handleChange(newState)\n        if (event.nativeEvent.target.name === \"id\") {\n            updateChannelList(event.nativeEvent.target.value)\n        }\n        if (event.nativeEvent.target.name === \"row\") {\n            updateChannelList(state.id, event.nativeEvent.target.value)\n        }\n    }\n\n    useEffect(() => {\n        setState(value);\n        updateSensorList()\n        if (value.id) updateChannelList(value.id)\n    }, [value.id]);\n\n    return (\n        <div className={\"row py-2\"}>\n            <div className={\"pl-2\"} style={{width: \"36px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light mr-2\"} onClick={onClickRemove}>\n                    <span className={\"fa fa-minus\"} />\n                </button>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"35%\"}}>\n                <select\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"Sensor\"\n                       name={\"id\"}\n                       value={ state.id }\n                       onChange={onChange}>\n                    <option value=\"\"/>\n                    { sensorOptions.map(item => {\n                        return <option key={item.id} value={item.id}>{item.name}</option>\n                    }) }\n                </select>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"35%\"}}>\n                <select\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"Channel\"\n                       name={\"channel\"}\n                       value={ state.channel }\n                       onChange={onChange}>\n                    { Object.keys(lastReading).map(item => {\n                        return <option key={item} value={item}>{item}</option>\n                    }) }\n                </select>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"20%\", maxWidth: \"90px\"}}>\n                <input type=\"number\"\n                       className=\"form-control form-control-sm mr-2\"\n                       placeholder=\"-1\"\n                       name={\"row\"}\n                       value={ state.row }\n                       onChange={onChange}/>\n            </div>\n\n            <div className={\"col-12 mt-1\"} />\n\n            <div className={\"pl-2\"} style={{width: \"36px\"}}> </div>\n            <div className={\"pl-2\"} style={{width: \"70%\"}}>\n                <div className=\"input-group input-group-sm\">\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           placeholder=\"Variable name (can be used in Expression)\"\n                           name={\"variable\"}\n                           value={ state.variable }\n                           onChange={onChange}/>\n                    <div className=\"input-group-append w-50\">\n                        <div className=\"input-group-text w-100 bg-light\">\n                            <span className={\"text-truncate text-nowrap text-monospace\"}>\n                                = { lastReading[state.channel] }\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={\"pl-2\"} style={{width: \"20%\", maxWidth: \"90px\"}}>\n                <button type=\"button\" className={\"btn btn-sm btn-light w-100\"} onClick={onClickRefresh}>\n                    {numberUpdating > 0 ?\n                        <i className={\"spinner-border spinner-border-sm\"}/> :\n                        <i className={\"fa fa-sync\"}/>}\n                </button>\n            </div>\n\n        </div>\n    )\n}\n\nconst emptyInputRow = {channel: \"time\", row: -1, id:\"\", variable: \"t\"}\nconst defaultInitialState = {\n    name: \"New Trigger\",\n    retain_for: 90 * daysToSeconds,\n    expression: \"\",\n    variables: {\"t\": emptyInputRow},\n    action_ids: [],\n    message: \"\",\n}\n\nexport function TriggerFrom({editMode=false, handleClose, initialState=defaultInitialState}) {\n    let {variables, ...initial} = initialState\n    let [state, setState] = useState(initial)\n\n    let initialInputRows = Object.keys(variables).map(key => {\n        return {\n            ...variables[key],\n            variable: key,\n        }\n    })\n    let [inputRows, setInputRows] = useState(initialInputRows)\n\n    let [expressionMessage, setExpressionMessage] = useState(\"\")\n    let [expressionError, setExpressionError] = useState(false)\n\n    // evaluate expression when form is shown\n    useEffect(() => {\n        if (initialState.expression === \"\") return\n        evaluateExpression(initialState.expression, getVariables())\n    }, [initialState.expression]);\n\n    function reset() {\n        setExpressionMessage(\"\")\n        setExpressionError(\"\")\n        setInputRows(initialInputRows)\n        setState(initial)\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        let data = {\n            ...state,\n            variables: getVariables(),\n        }\n\n        if (editMode) {\n            // edit trigger\n            fetch(urlPrefix + \"/triggers/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(data)\n            })\n        } else {\n            // new trigger\n            fetch(urlPrefix + \"/triggers\", {\n                method: \"post\",\n                body: JSON.stringify(data)\n            })\n                .then(() => {\n                    reset()\n                })\n        }\n\n        try {\n            handleClose()\n        } catch (e) {}\n    }\n\n    function onChange(e) {\n        e.preventDefault()\n        let target = e.nativeEvent.target\n        let newState = {...state}\n        let value = target.value\n        if (target.dataset.factor && value != null) {\n            value *= target.dataset.factor\n        }\n        newState[target.name] = value\n        setState(newState)\n    }\n\n    function getVariables() {\n        let variables = {}\n        inputRows.map(row => {\n            let {variable, ...value} = row\n            variables[variable] = value\n            return null\n        })\n        return variables\n    }\n\n    function evaluateExpression(expression, variables) {\n        let data = {\n            expression: expression,\n            variables: variables,\n        }\n\n        fetch(urlPrefix + \"/evaluate\", {\n            method: \"post\",\n            body: JSON.stringify(data)\n        })\n            .then(res => {return res.json()})\n            .then(res => {\n                setExpressionMessage(res.message)\n                setExpressionError(res.error)\n            })\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={\"row\"}>\n                <div className={\"col-md-6\"}>\n                    <label>Name:</label>\n                    <input type=\"text\"\n                           className=\"form-control mb-2\"\n                           name={\"name\"}\n                           value={ state.name }\n                           onChange={onChange}/>\n                </div>\n                <div className={\"col-md-6\"}>\n                    <label>Retain history for:</label>\n                    <div className=\"input-group mb-2\">\n                        <input type=\"number\"\n                               className=\"form-control\"\n                               name={\"retain_for\"}\n                               data-factor={daysToSeconds}\n                               value={ state.retain_for / daysToSeconds }\n                               onChange={onChange}/>\n                        <div className=\"input-group-append\">\n                            <span className=\"input-group-text\">days</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <hr/>\n\n            <h4>Variables</h4>\n            <div className={\"row\"}>\n                <div style={{width: \"36px\"}} className={\"px-2\"}> </div>\n                <div style={{width: \"35%\"}} className={\"px-2\"}>Sensor:</div>\n                <div style={{width: \"35%\"}} className={\"px-2\"}>Channel:</div>\n                <div style={{width: \"20%\", maxWidth: \"90px\"}} className={\"px-2\"}>Index:</div>\n            </div>\n            { inputRows.map((row, idx) => {\n                return <InputRow\n                    key={idx}\n                    value={inputRows[idx]}\n                    handleRemove={() => {\n                        // remove the current row\n                        setInputRows(\n                            inputRows.filter((value, index) => { return index !== idx;})\n                        )\n                    }}\n                    handleChange={(newState) => {\n                        let newRows = [...inputRows]\n                        newRows[idx] = newState\n                        setInputRows(newRows)\n                    }}\n                />\n            }) }\n            <AddRowButton onClick={() => {\n                setInputRows([\n                    ...inputRows,\n                    inputRows.length > 0 ? inputRows.slice(-1)[0]  : emptyInputRow\n                ])\n            }} />\n\n\n            <hr/>\n            <h4>Expression</h4>\n\n            <input type=\"text\"\n                   className=\"form-control text-monospace mb-1\"\n                   placeholder={\"A == 3 or \\\"substing\\\" in long_string\"}\n                   onChange={e => {\n                       e.preventDefault()\n                       setState({\n                           ...state,\n                           expression: e.nativeEvent.target.value\n                       })\n                       evaluateExpression(e.nativeEvent.target.value, getVariables())\n                   }}\n                   value={state.expression}\n            />\n\n            {state.expression === \"\" ? null :\n                <div className={`alert ${expressionError ? \"alert-danger\" : \n                    [true, false].includes(expressionMessage) ? \"alert-success\" : \"alert-warning\"}`}>\n                    {expressionMessage.toString()}\n                </div>\n            }\n\n            <h4>Action</h4>\n            <input type=\"text\"\n               className=\"form-control\"\n               placeholder={\"asdad-asdasd-adsads-dasdsa-adsasd\"}\n               onChange={e => {\n                   e.preventDefault()\n                   setState({\n                       ...state,\n                       action_ids: [e.nativeEvent.target.value]\n                   })\n               }}\n               value={state.action_ids[0]}\n            />\n\n            <input type=\"text\"\n               className=\"form-control\"\n               placeholder={\"Message\"}\n               onChange={e => {\n                   e.preventDefault()\n                   setState({\n                       ...state,\n                       message: e.nativeEvent.target.value\n                   })\n               }}\n               value={state.message}\n            />\n\n            <div className={\"col-lg-12\"}>\n                <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                    {editMode ? \"Apply\" : \"Create Trigger\"}\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\n","import React from \"react\"\nimport {DetailView, listItemsLastReading} from \"./DetailView\";\nimport {TriggerFrom} from \"./TriggerForms\";\n\n\nexport class Trigger extends DetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Trigger\"\n        this.fetchUrlPath = \"/triggers\"\n    }\n\n    renderFormView() {\n        return <TriggerFrom\n            handleClose={this.hideModal}\n            editMode={true}\n            initialState={this.item()}\n        />\n    }\n\n    renderSubclassed() {\n        return (\n            <div>\n                <hr/>\n                <h5>\n                    Last Check\n                </h5>\n                <ul className={\"list-group\"}>\n                    {listItemsLastReading(this.item().last_reading)}\n                </ul>\n            </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport {TriggerFrom} from \"./TriggerForms\";\nimport {ListDetailView} from \"./ListDetailView\";\nimport {Trigger} from \"./Trigger\";\n\n\nexport class TriggerView extends ListDetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Trigger\"\n        this.basicEventHandlerItemPrefix = \"trigger\"\n        this.fetchUrlPath = \"/triggers\"\n    }\n\n    renderDetailView() {\n        return <Trigger id={ this.state.active }\n                        eventManager={this.props.eventManager}\n                        globalState={this.props.globalState}\n                        setGlobalState={this.props.setGlobalState}\n        />\n    }\n\n    renderFormView() {\n        return <TriggerFrom handleClose={this.hideModal}/>\n    }\n}\n\n\n\n","import React, {useState} from 'react';\nimport {urlPrefix} from \"./settings\";\nimport {FromGroup, FromGroupSelect} from \"./Basics\";\n\n\nexport function ActionForm(props) {\n    const initialState = {\n        \"type\": \"DebugAction\",\n        \"interval\": \"5\",\n        \"name\": \"\",\n        \"url\": \"\",\n        \"retain_for\": \"90\",\n        ...props.initialState};\n    let [state, setState] = useState(initialState)\n\n    let editMode = \"editMode\" in props ? props.editMode : false\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        let data = {\n            ...state,\n            \"interval\": state.interval * 60,\n            \"retain_for\": state.retain_for * 24 * 60 * 60,\n        }\n\n        if (editMode) {\n            // edit action\n            fetch(urlPrefix + \"/actions/\" + state.id, {\n                method: \"put\",\n                body: JSON.stringify(data)\n            })\n        } else {\n            // new action\n            fetch(urlPrefix + \"/actions\", {\n                method: \"post\",\n                body: JSON.stringify(data)\n            })\n                .then(() => {\n                    setState(initialState)\n                })\n        }\n\n        try {\n            props.handleClose()\n        } catch (e) {}\n    }\n\n    function handleSetState(event) {\n        let newState = {};\n        newState[event.nativeEvent.target.name] = event.nativeEvent.target.value\n        setState({\n            ...state,\n            ...newState\n        })\n    }\n\n    function testAction() {\n        let message = `${state.name}: Test message :)`;\n        fetch(urlPrefix + \"/actions/\" + state.id + \"/update\", {\n            method: \"post\",\n            body: JSON.stringify({\n                message: message,\n                force_send: true\n            })\n        })\n    }\n\n    function pushoverInputs() {\n        return [\n            <FromGroup label={\"Api token:\"}\n                       type={\"text\"}\n                       name={\"api_token\"}\n                       value={state.api_token}\n                       key={\"api_token\"}\n                       onChange={handleSetState}/>,\n            <FromGroup label={\"User key:\"}\n                       type={\"text\"}\n                       name={\"user_key\"}\n                       value={state.user_key}\n                       key={\"user_key\"}\n                       onChange={handleSetState}/>,\n            <FromGroup label={\"Device:\"}\n                       type={\"text\"}\n                       name={\"device\"}\n                       value={state.device}\n                       key={\"device\"}\n                       onChange={handleSetState}/>,\n        ]\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={\"row\"}>\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Type</h4>\n                <FromGroupSelect\n                    label={\" \"}\n                    type={\"select\"}\n                    value={state.type}\n                    list={\"form-add-sensor-types\"}\n                    name={\"type\"}\n                    onChange={handleSetState}\n                    disabled={editMode}\n                >\n                    <option value={\"DebugAction\"}>DebugAction - Debug print statement</option>\n                    <option value={\"PushoverAction\"}>Pushover - Sends a push notification</option>\n                </FromGroupSelect>\n            </div>\n\n            <div className={\"col-lg-4\"} style={{ borderRight: \"1px solid #dee2e6\" }}>\n                <h4>Info</h4>\n                <FromGroup label={\"Name:\"}\n                           name={\"name\"}\n                           value={state.name}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Cooldown:\"}\n                           type={\"cooldown\"}\n                           name={\"interval\"}\n                           placeholder={\"5\"}\n                           suffix={\"minutes\"}\n                           value={state.interval}\n                           onChange={handleSetState}/>\n                <FromGroup label={\"Retain for:\"}\n                           type={\"number\"}\n                           name={\"retain_for\"}\n                           placeholder={\"90\"}\n                           suffix={\"days\"}\n                           value={state.retain_for}\n                           onChange={handleSetState}/>\n            </div>\n\n            <div className={\"col-lg-4\"}>\n                <h4>Type Specific Info</h4>\n                { state.type === \"PushoverAction\" ? (\n                    pushoverInputs()\n                ) : \"\" }\n            </div>\n\n            <div className={\"col-lg-12\"}>\n                <button type={\"submit\"} className={\"btn btn-primary mt-2 px-4\"}>\n                    {editMode ? \"Apply\" : \"Create Action\"}\n                </button>\n                <button type={\"button\"} className={\"btn btn-secondary mt-2 px-4 ml-2\"} onClick={testAction}>\n                    Send Test Notification\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\n","import React from \"react\"\nimport {DetailView, listItemsLastReading} from \"./DetailView\";\nimport {ActionForm} from \"./ActionForms\";\n\n\nexport class Action extends DetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Action\"\n        this.fetchUrlPath = \"/actions\"\n    }\n\n    renderFormView() {\n        return <ActionForm\n            handleClose={this.hideModal}\n            editMode={true}\n            initialState={this.item()}\n        />\n    }\n\n    renderSubclassed() {\n        return (\n            <div>\n                <hr/>\n                <h5>\n                    Last Message\n                </h5>\n                <ul className={\"list-group\"}>\n                    {listItemsLastReading(this.item().last_reading)}\n                </ul>\n            </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport {ActionForm} from \"./ActionForms\";\nimport {ListDetailView} from \"./ListDetailView\";\nimport {Action} from \"./Action\";\n\n\nexport class ActionView extends ListDetailView {\n    constructor(props) {\n        super(props);\n\n        this.itemLabel = \"Action\"\n        this.basicEventHandlerItemPrefix = \"action\"\n        this.fetchUrlPath = \"/actions\"\n    }\n\n    renderDetailView() {\n        return <Action id={ this.state.active }\n                       eventManager={this.props.eventManager}\n                       globalState={this.props.globalState}\n                       setGlobalState={this.props.setGlobalState}\n        />\n    }\n\n    renderFormView() {\n        return <ActionForm handleClose={this.hideModal}/>\n    }\n}\n\n\n\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './custom.css'\n//import './bootstrap-dark/bootstrap-dark.scss'\nimport { SensorView } from './SensorView.js';\nimport { eventManager } from \"./events\";\nimport { MainPills } from \"./AppView\";\nimport {TriggerView} from \"./TriggerView\";\nimport {ActionView} from \"./ActionView\";\n\n\n// create state\nlet events = new eventManager()\n\nfunction App() {\n    let [state, _setState] = useState({})\n\n    function setState(newState) {\n        _setState({...state, ...newState})\n    }\n\n    return (\n        <MainPills\n            initialActive={\"Sensors\"}\n            content={{\n                \"Sensors\" : <SensorView eventManager={events} globalState={state} setGlobalState={setState}/>,\n                \"Triggers\" : <TriggerView eventManager={events} globalState={state} setGlobalState={setState}/>,\n                \"Actions\" : <ActionView eventManager={events} globalState={state} setGlobalState={setState}/>,\n            }}\n        />\n    )\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n          <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}